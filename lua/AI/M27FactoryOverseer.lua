---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 20/09/2021 20:28
---

local M27MapInfo = import('/mods/M27AI/lua/AI/M27MapInfo.lua')
local M27Utilities = import('/mods/M27AI/lua/M27Utilities.lua')
local M27PlatoonUtilities = import('/mods/M27AI/lua/AI/M27PlatoonUtilities.lua')
local M27Logic = import('/mods/M27AI/lua/AI/M27GeneralLogic.lua')
local M27Conditions = import('/mods/M27AI/lua/AI/M27CustomConditions.lua')
local M27Overseer = import('/mods/M27AI/lua/AI/M27Overseer.lua')
local M27EngineerOverseer = import('/mods/M27AI/lua/AI/M27EngineerOverseer.lua')
local M27PlatoonFormer = import('/mods/M27AI/lua/AI/M27PlatoonFormer.lua')
local M27UnitInfo = import('/mods/M27AI/lua/AI/M27UnitInfo.lua')
local M27EconomyOverseer = import('/mods/M27AI/lua/AI/M27EconomyOverseer.lua')
local M27AirOverseer = import('/mods/M27AI/lua/AI/M27AirOverseer.lua')

refiLastPriorityCategoryToBuild = 'M27FactoryLastIdleUnitToGet'
iFactoryDelayBeforeConsiderBuildingAgain = 10 --Wait 10 seconds if have flagged that we dont want the factory to build anything e.g. due to wanting to eco
refbFactoryTemporaryPauseActive = 'M27FactoryTemporaryPauseActive' --Local variable for factory
refiFactoriesTemporarilyPaused = 'M27FactoriesTemporarilyPaused' --Number of factories that are temporarily paused

refiInitialEngineersWanted = 'M27InitialEngineers'
refiMinimumTanksWanted = 'M27MinimumTanks'
refiEngineerCap = 'M27EngineerCap'
reftiEngineerLowMassCap = 'M27FactoryEngineerLowMassCap' --Limit on how many engineers to have by tech level if low on mass
reftFactoryBuildQueue = 'M27FactoryBuildQueue'
refiFactoryUniqueID = 'M27FactoryUniqueID'
refiFactoryNextID = 'M27FactoryNextID'
refiUnitCategoryToBuild = 'M27FactoryUnit'
refoFactory = 'M27FactoryObject'
refoLastUnitBuilt = 'M27FactoryLastUnitBuilt'
local refFactoryIdleCount = 'M27FactoryIdleCount' --Used to check how long the factory has been idle for (so can implement override to fix)

local refiFactoryDistanceToStart = 'M27FactoryDistanceToStart'
local refbFactoryCanBuildEngis = 'M27FactoryCanBuildEngis'

--Tracker - unit preferences
local reftBlueprintPriorityOverride = 'M27FactoryPreferredBlueprintByCategory' --[x] is the blueprint ref, if there's a priority override it returns a numerical value (higher number = higher priority)

--Category quickrefs
local refCategoryLandFactory = M27UnitInfo.refCategoryLandFactory
local refCategoryEngineer = M27UnitInfo.refCategoryEngineer
local refCategoryAttackBot = M27UnitInfo.refCategoryAttackBot
local refCategoryDFTank = M27UnitInfo.refCategoryDFTank --NOTE: Need to specify slowest (so dont pick LAB)
local refCategoryLandScout = M27UnitInfo.refCategoryLandScout
local refCategoryMAA = M27UnitInfo.refCategoryMAA
local refCategoryIndirect = M27UnitInfo.refCategoryIndirect
--Air
local refCategoryAirScout = M27UnitInfo.refCategoryAirScout
local refCategoryAirAA = M27UnitInfo.refCategoryAirAA
local refCategoryBomber = M27UnitInfo.refCategoryBomber
--Navy
local refCategoryFrigate = M27UnitInfo.refCategoryFrigate

--Other variables
iMaxCyclesBeforeOverride = 28


function GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetBlueprintsThatCanBuildOfCategory'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    local tBlueprints = EntityCategoryGetUnitList(iCategoryCondition)
    local tValidBlueprints = {}
    local iValidBlueprints = 0
    local tBestBlueprints = {}
    local iBestBlueprints = 0
    local iHighestTech = 1
    local iCurrentTech = 1
    --if bGetSlowest == nil then bGetSlowest = false end
    --if bGetFastest == nil then bGetFastest = false end
    local iCurSpeed
    local tiLowestSpeedByTech = {1000, 1000, 1000}
    local tiHighestSpeedByTech = {0,0,0}
    local oCurBlueprint
    local iHighestPriority = 0


    if bDebugMessages == true then LOG(sFunctionRef..': reftBlueprintPriorityOverride='..repr(aiBrain[reftBlueprintPriorityOverride])) end
    for _, sBlueprint in tBlueprints do
        if oFactory:CanBuild(sBlueprint) == true then
            --if EntityCategoryContains(iCategoryCondition, sBlueprint) then --tBlueprints is already filtered to just those that meet the categories
            iValidBlueprints = iValidBlueprints + 1
            tValidBlueprints[iValidBlueprints] = sBlueprint
            if EntityCategoryContains(categories.TECH3, sBlueprint) then iCurrentTech = 3
            elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
            else iCurrentTech = 1
            end
            if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurrentTech='..iCurrentTech..'; iHighestTech='..iHighestTech) end
            if iCurrentTech > iHighestTech then
                iHighestTech = iCurrentTech
                iHighestPriority = 0
            end
            if bDebugMessages == true then LOG(sFunctionRef..': Considering if sBlueprint has a priority specified if we arent looking for slowest or fastest. sBlueprint='..sBlueprint..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
            if bGetSlowest == false and bGetFastest == false and aiBrain[reftBlueprintPriorityOverride][sBlueprint] then
                if bDebugMessages == true then LOG(sFunctionRef..': Have a priority specified='..aiBrain[reftBlueprintPriorityOverride][sBlueprint]..'; iHighestPriority='..iHighestPriority) end
                iHighestPriority = math.max(aiBrain[reftBlueprintPriorityOverride][sBlueprint], iHighestPriority)
            end
            if bGetSlowest == true or bGetFastest == true then
                oCurBlueprint = __blueprints[sBlueprint]
                iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurSpeed='..iCurSpeed) end
                if bGetSlowest == true then
                    if iCurSpeed < tiLowestSpeedByTech[iCurrentTech] then tiLowestSpeedByTech[iCurrentTech] = iCurSpeed end
                elseif bGetFastest == true then
                    if iCurSpeed > tiHighestSpeedByTech[iCurrentTech] then tiHighestSpeedByTech[iCurrentTech] = iCurSpeed end
                end
            end
            --end
        end
    end
    --Now get a list of blueprints that are this tech level and of the highest priority
    --if bDebugMessages == true then LOG(sFunctionRef..': iHighestTech='..iHighestTech..'; tiHighestSpeedByTech='..tiHighestSpeedByTech[iHighestTech]..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
    local bIsValid, iCurrentPriority
    local iMinTechToUse = iHighestTech
    local iFastestSpeed = tiHighestSpeedByTech[iHighestTech]
    if bGetFastest == true and iHighestTech >= 3 then
        --If cybran, want loyalist instead of bomb; if Aeon want blaze instead of harbinger or shield disrupter; If sera probably want hover tank instead of siege tank; if UEF want titan
        if tiHighestSpeedByTech[3] <= 3.5 and tiHighestSpeedByTech[2] - tiHighestSpeedByTech[3] >= 0.6 then
            iMinTechToUse = 2
            iFastestSpeed = math.max(tiHighestSpeedByTech[3], tiHighestSpeedByTech[2])
        end
    end

    for _, sBlueprint in tValidBlueprints do
        bIsValid = false
        if EntityCategoryContains(categories.TECH3, sBlueprint) then iCurrentTech = 3
        elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
        else iCurrentTech = 1
        end
        if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..': Considering whether we have high enough tech to consider') end
        if iCurrentTech >= iMinTechToUse then
            if bGetFastest == false and bGetSlowest == false then iCurrentPriority = aiBrain[reftBlueprintPriorityOverride][sBlueprint] end
            if iCurrentPriority == nil then iCurrentPriority = 0 end
            if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurrentTech='..iCurrentTech..'; considering priority, iCurrentPriority='..iCurrentPriority..'; iHighestPriority='..iHighestPriority) end
            if iCurrentPriority >= iHighestPriority then
                bIsValid = true

                if bGetSlowest == false and bGetFastest == false then
                    if bDebugMessages == true then LOG(sFunctionRef..': Not interested in if slowest or fastest so marking BP as valid') end
                    bIsValid = true
                else
                    bIsValid = false
                    oCurBlueprint = __blueprints[sBlueprint]
                    iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                    if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurSpeed='..iCurSpeed) end
                    if bGetSlowest == true then
                        if iCurSpeed <= tiLowestSpeedByTech[iHighestTech] then bIsValid = true end
                    elseif iCurSpeed >= iFastestSpeed then
                        if bDebugMessages == true then LOG(sFunctionRef..': Have the highest speed for tech levels being considered') end
                        bIsValid = true
                    end
                end
            end
            if bIsValid == true then
                iBestBlueprints = iBestBlueprints + 1
                tBestBlueprints[iBestBlueprints] = sBlueprint
                if bDebugMessages == true then LOG(sFunctionRef..': Have valid blueprint='..sBlueprint) end
            end
        end
    end

    local iBPToBuild = math.random(1, iBestBlueprints)
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return tBestBlueprints[iBPToBuild]
end

function RecordUnderConstruction(aiBrain, oFactory, iUnitCategoryToBuild)
    local iFactoryID = oFactory[refiFactoryUniqueID]
    if iFactoryID == nil then
        if aiBrain[refiFactoryNextID] == nil then aiBrain[refiFactoryNextID] = 1 end
        iFactoryID = aiBrain[refiFactoryNextID]
        aiBrain[refiFactoryNextID] = aiBrain[refiFactoryNextID] + 1
        oFactory[refiFactoryUniqueID] = iFactoryID
    end
    if aiBrain[reftFactoryBuildQueue] == nil then aiBrain[reftFactoryBuildQueue] = {} end
    if aiBrain[reftFactoryBuildQueue][iFactoryID] == nil then
        aiBrain[reftFactoryBuildQueue][iFactoryID] = {}
        aiBrain[reftFactoryBuildQueue][iFactoryID][refoFactory] = oFactory
    end
    aiBrain[reftFactoryBuildQueue][iFactoryID][refiUnitCategoryToBuild] = iUnitCategoryToBuild
end

function GetPreferredArtiProportion(aiBrain, bAreSeraphimT1LandFactory)
    --Returns the % of units that want to be indirect fire units; will be much higher when enemy has lots of point defence; also higher when we have access to t3
    local sFunctionRef = 'GetPreferredArtiProportion'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    local iArtiProportion = 0
    if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and bAreSeraphimT1LandFactory and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] then
        iArtiProportion = 1
    else
        local iOurStartPosition = aiBrain.M27StartPositionNumber
        local tOurStart = M27MapInfo.PlayerStartPoints[iOurStartPosition]
        local iRange = aiBrain[M27Overseer.refiDistanceToNearestEnemyBase]
        local tEnemyUnits = aiBrain:GetUnitsAroundPoint(categories.DIRECTFIRE + categories.INDIRECTFIRE, tOurStart, iRange, 'Enemy')
        local iEnemyTotalThreat = 0
        local iEnemyPDThreat = 0
        if tEnemyUnits then
            local tEnemyPD = EntityCategoryFilterDown(categories.STRUCTURE, tEnemyUnits)
                    --GetCombatThreatRating(aiBrain, tUnits, bMustBeVisibleToIntelOrSight, iMassValueOfBlipsOverride, iSoloBlipMassOverride)
            if tEnemyPD then iEnemyPDThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyPD, true) end
            iEnemyTotalThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyUnits, true)
        end



        if iEnemyPDThreat == 0 then iArtiProportion = 0.1
        elseif iEnemyPDThreat <= 500 then iArtiProportion = 0.15
        elseif iEnemyPDThreat <= 1500 then iArtiProportion = 0.2
        elseif iEnemyPDThreat <= 2500 then iArtiProportion = 0.3
        else iArtiProportion = 0.6 end
        --Reduce % based on proportion:
        if iArtiProportion > 0.1 and iEnemyPDThreat > 0 then
            local iCap = 2 * iEnemyPDThreat / iEnemyTotalThreat
            if iCap < 0.15 then iCap = 0.15 end
            if iCap < iArtiProportion then iArtiProportion = iCap end
        end
        --Are we at tech 3 yet?  If so go for higher % of T3 arti; if at tech2 then go for lower % if no PD since MMLs arent as good
        if aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] == 3 then iArtiProportion = iArtiProportion + 0.05
        elseif aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] == 2 and iEnemyPDThreat <= 100 then iArtiProportion = iArtiProportion - 0.025 end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return iArtiProportion
end

function GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, bEmergency)
    --if bEmergency is true then will check the desired category can be buitl and if not will revert to a more general category
    local iCategoryToBuild = refCategoryDFTank
    if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then
        iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
        if iFactoryTechLevel == 1 and not(bEmergency) then
            local iFactionIndex = aiBrain:GetFactionIndex()
            if iFactionIndex == M27UnitInfo.refFactionUEF or iFactionIndex == M27UnitInfo.refFactionCybran then iCategoryToBuild = nil end
        else
            --Can this factory build an amphibious unit?
            if bEmergency then
                local sBlueprint = GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory)
                if sBlueprint == nil then iCategoryToBuild = refCategoryDFTank end
            end
        end
    end
    return iCategoryToBuild
end

function DetermineWhatToBuild(aiBrain, oFactory)
    --Returns unit BP ID to be built
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'DetermineWhatToBuild'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    local sBPIDToBuild
    if not(oFactory.GetBlueprint) then M27Utilities.ErrorHandler('Factory doesnt have a blueprint')
    else
        local oFactoryBlueprint = oFactory:GetBlueprint()
        local sFactoryBP = oFactory:GetUnitId()
        local iStrategy = aiBrain[M27Overseer.refiAIBrainCurrentStrategy]
        --local bGetSlowest, bGetFastest

        if iStrategy == nil then
            iStrategy = M27Overseer.refStrategyLandEarly
            aiBrain[M27Overseer.refiAIBrainCurrentStrategy] = iStrategy
        end
        local iCategoryToBuild
        if oFactoryBlueprint then
            local iFactoryTechLevel = M27UnitInfo.GetUnitTechLevel(oFactory)

            local bNeedEngiOfTechLevel = false
            if oFactory[refbFactoryCanBuildEngis] == true then
                if iFactoryTechLevel > 2 then
                    if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * categories.TECH3) == 0 then bNeedEngiOfTechLevel = true end
                elseif iFactoryTechLevel == 2 then if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer - M27UnitInfo.refCategoryEngineer * categories.TECH1) == 0 then bNeedEngiOfTechLevel = true end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': iFactoryTechLevel='..iFactoryTechLevel..'; FactoryID='..sFactoryBP) end


            --local iBlueprintFactionNumber = M27UnitInfo.GetFactionFromBP(oFactoryBlueprint)
            --local iFactionCat = M27Utilities.FactionIndexToCategory(iBlueprintFactionNumber)
            local iMaxLoop = 100

            local iCurrentConditionToTry = 1
            local bConsiderUnderConstruction
            local iTotalWanted
            local iMobileShields --Used to cap the number we have in action
            local iTotalLandFactories = aiBrain:GetCurrentUnits(refCategoryLandFactory)
            local bAlreadyBuildingEnough
            local iAlreadyBuilding
            if aiBrain[refiFactoryNextID] == nil then aiBrain[refiFactoryNextID] = 1 end
            local iFactoriesRecorded = aiBrain[refiFactoryNextID] - 1
            local oCurFactory
            local iEnemySearchRange = 60
            local tNearbyEnemies = aiBrain:GetUnitsAroundPoint(categories.LAND * categories.MOBILE, oFactory:GetPosition(), iEnemySearchRange, 'Enemy')
            local iNearbyEnemies = 0
            if M27Utilities.IsTableEmpty(tNearbyEnemies) == false then iNearbyEnemies = table.getn(tNearbyEnemies) end

            local bIsLandFactory = EntityCategoryContains(M27UnitInfo.refCategoryLandFactory, sFactoryBP)
            local bIsAirFactory = EntityCategoryContains(M27UnitInfo.refCategoryAirFactory, sFactoryBP)
            local bIsNavalFactory = EntityCategoryContains(M27UnitInfo.refCategoryNavalFactory, sFactoryBP)
            local bTemporaryPause = false
            local bSeraphimT1LandFactory = EntityCategoryContains(M27UnitInfo.refCategoryLandFactory * categories.TECH1 * categories.SERAPHIM, sFactoryBP)


            local iCount = 0
            while sBPIDToBuild == nil do
                iCount = iCount + 1 if iCount > 100 then M27Utilities.ErrorHandler('Infinite loop') break end
                local bGetFastest = false
                local bGetSlowest = false
                iCategoryToBuild = nil
                bConsiderUnderConstruction = true
                iTotalWanted = 100
                bAlreadyBuildingEnough = false
                iAlreadyBuilding = 0

        --=============Determine the next unit that want depending on factory type and  general strategy------
                if bIsLandFactory then
                    if iStrategy == M27Overseer.refStrategyLandEarly then
                        if bDebugMessages == true then LOG(sFunctionRef..': iStrategy='..iStrategy..': iCurrentConditionToTry='..iCurrentConditionToTry) end
                        if iCurrentConditionToTry == 1 then --Build tank if nearby enemies
                            if iNearbyEnemies > 0 then iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                        elseif iCurrentConditionToTry == 2 then --Emergency MAA (want in priority to everything except really near tank
                            if aiBrain[M27Overseer.refbEmergencyMAANeeded] == true then iCategoryToBuild = refCategoryMAA end
                        elseif iCurrentConditionToTry == 3 then
                            if bNeedEngiOfTechLevel == true then
                                iCategoryToBuild = refCategoryEngineer
                            end
                        elseif iCurrentConditionToTry == 4 then --First want 4 engis
                            if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryEngineer,  aiBrain[refiInitialEngineersWanted] + 1) == true then
                                --local tEngineers = aiBrain:GetListOfUnits(refCategoryEngineer, false, true)
                                local iEngineers = aiBrain:GetCurrentUnits(refCategoryEngineer)
                                --if M27Utilities.IsTableEmpty(tEngineers) == true then iEngineers = 0
                                --else iEngineers = table.getn(tEngineers) end
                                if iEngineers < aiBrain[refiInitialEngineersWanted] then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = aiBrain[refiInitialEngineersWanted] - iEngineers
                                end
                            end
                        elseif iCurrentConditionToTry == 5 then --Want 2 microbots initially (overseer will change to 0 for water based maps) (check both no. constructed cumulatively, and the total number owned):
                            if bDebugMessages == true then
                                LOG(sFunctionRef..': iStrategy='..iStrategy..': iCurrentConditionToTry='..iCurrentConditionToTry..': M27Overseer.refiInitialRaiderPlatoonsWanted='..M27Overseer.refiInitialRaiderPlatoonsWanted..'; LifetimeBuildCount<2='..tostring(M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryAttackBot, aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted]))..'; no. of microbots:')
                                if aiBrain:GetListOfUnits(refCategoryAttackBot, false, true) then LOG('No. of microbots='..table.getn(aiBrain:GetListOfUnits(refCategoryAttackBot, false, true)))
                                else LOG('No. of microbots = 0') end
                            end
                            if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryAttackBot, aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted]) == true then
                                local iMicrobots = aiBrain:GetCurrentUnits(refCategoryAttackBot)
                                if bDebugMessages == true then LOG(sFunctionRef..': Will produce bots unless already have that number in existence. iMicrobots='..iMicrobots) end
                                if iMicrobots < aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted] then
                                    iCategoryToBuild = refCategoryAttackBot
                                end
                            end
                        elseif iCurrentConditionToTry == 6 then --Scouts for initial raiders and ACU
                            if aiBrain[M27Overseer.refiScoutShortfallInitialRaider] > 0 or aiBrain[M27Overseer.refiScoutShortfallACU] > 0 then
                                iCategoryToBuild = refCategoryLandScout
                                bConsiderUnderConstruction = false
                                iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallInitialRaider] + aiBrain[M27Overseer.refiScoutShortfallACU] > 0
                            end
                            --if aiBrain[M27Overseer.refbNeedScoutsBuilt] == true then iCategoryToBuild = refCategoryLandScout end
                        elseif iCurrentConditionToTry == 7 then --Emergency defence - enemies are within 27% of our base
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                            if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.275 or (aiBrain:GetCurrentUnits(refCategoryDFTank) <= aiBrain[refiMinimumTanksWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand]) then
                                if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                    if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                        iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                    else
                                        iCategoryToBuild = refCategoryIndirect
                                    end
                                else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                            end
                        elseif iCurrentConditionToTry == 8 then --Build engineer if have just gained a new tech level
                            if iFactoryTechLevel > 2 then
                                --Do we have any T3 engis already?
                                if aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                elseif aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH2 + refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                end
                            end
                        elseif aiBrain[M27EngineerOverseer.refbNeedResourcesForMissile] == false or M27Conditions.HaveLowMass == false then
                            if iCurrentConditionToTry == 9 then --Escort units
                                if aiBrain[M27PlatoonUtilities.refbNeedEscortUnits] == true then
                                    iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                end
                            elseif iCurrentConditionToTry == 10 then --Initial engis
                                if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]
                                end
                            elseif iCurrentConditionToTry == 11 then --MAA initial
                                if aiBrain[M27Overseer.refbNeedMAABuilt] == true and aiBrain:GetCurrentUnits(refCategoryMAA) < 1 then iCategoryToBuild = refCategoryMAA end

                            elseif iCurrentConditionToTry == 12 then --Engis if small number of land factories
                                if aiBrain:GetListOfUnits(refCategoryLandFactory, false, true) < 4 then
                                    if aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                    end
                                end
                            elseif iCurrentConditionToTry == 13 then --Emergency defence - enemies are within 32.5% of our base
                                if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                                if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.325 then
                                    if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                        if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                            iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                        else
                                            iCategoryToBuild = refCategoryIndirect
                                        end
                                    else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                                end
                            elseif aiBrain:GetEconomyStored('MASS') > 10 then
                                if iCurrentConditionToTry == 14 then--Mobile shields
                                    local iPowerWanted = 25
                                    if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                    if not(M27Conditions.DoesACUHaveGun(aiBrain, true)) then iPowerWanted = math.max(iPowerWanted, 40) end

                                    if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                        if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                        if iMobileShields <= 30 then
                                            iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 15 then --Intel line scouts
                                    if aiBrain[M27Overseer.refiScoutShortfallIntelLine] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallIntelLine]
                                    end
                                elseif iCurrentConditionToTry == 16 then --Core engis
                                    if aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 17 then --MAA main
                                    if aiBrain[M27Overseer.refbNeedMAABuilt] == true then iCategoryToBuild = refCategoryMAA end
                                elseif iCurrentConditionToTry == 18 then --Scouts for large platoons
                                    if aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallLargePlatoons]
                                    end
                                elseif iCurrentConditionToTry == 19 then --Pre-spare engis
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] >= 0.4 and aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 20 then --Threat range
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= 0.5 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then
                                        if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                            if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                                iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                            else
                                                iCategoryToBuild = refCategoryIndirect
                                            end
                                        else
                                            iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                            if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat end
                                        end
                                    end
                                elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                    if iCurrentConditionToTry == 21 then --Arti ratio
                                        local iCurrentArti = aiBrain:GetCurrentUnits(refCategoryIndirect)
                                        local iCurrentTanks = aiBrain:GetCurrentUnits(refCategoryDFTank)
                                        local iArtiProportion = GetPreferredArtiProportion(aiBrain, bSeraphimT1LandFactory)
                                        local iCurProportion = 0
                                        if iCurrentTanks > 0 then iCurProportion = iCurrentArti / (iCurrentArti + iCurrentTanks) end
                                        if iCurProportion < iArtiProportion then
                                            iCategoryToBuild = refCategoryIndirect
                                        end
                                    elseif iCurrentConditionToTry == 22 then
                                        if aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= aiBrain[M27Overseer.refiMaxDefenceCoverageWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then
                                            if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                                if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                                else
                                                    iCategoryToBuild = refCategoryIndirect
                                                end
                                            else
                                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                                if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat end
                                            end
                                        end

                                    elseif iCurrentConditionToTry == 23 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 2 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                        end
                                    elseif iCurrentConditionToTry == 24 then --Scouts for small platoons
                                        if aiBrain[M27Overseer.refiScoutShortfallAllPlatoons] > 0 then
                                            iCategoryToBuild = refCategoryLandScout
                                            iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallAllPlatoons]
                                        end
                                    elseif iCurrentConditionToTry == 25 then --Scouts for mexes
                                        if aiBrain[M27Overseer.refiScoutShortfallMexes] > 0 then
                                            iCategoryToBuild = refCategoryLandScout
                                            iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallMexes]
                                        end
                                    elseif iCurrentConditionToTry == 26 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 5 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 5 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                            if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] < 2 then iTotalWanted = iTotalWanted - aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] end
                                        end
                                    else
                                        --Are we about to overflow mass?
                                        if aiBrain:GetEconomyStored('MASS') >= 3000 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.9 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 100
                                        else
                                            iCategoryToBuild = aiBrain[refiLastPriorityCategoryToBuild]
                                            --bTemporaryPause = true
                                        end
                                    end
                                end
                            end
                        end

                    elseif iStrategy == M27Overseer.refStrategyEcoAndTech or iStrategy == M27Overseer.refStrategyAirDominance then
                        if iCurrentConditionToTry == 1 then --Build tank if nearby enemies
                            if iNearbyEnemies > 0 then iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                        elseif iCurrentConditionToTry == 2 then --Emergency MAA (want in priority to everything except really near tank
                            if aiBrain[M27Overseer.refbEmergencyMAANeeded] == true then iCategoryToBuild = refCategoryMAA end
                        elseif iCurrentConditionToTry == 3 then
                            if bNeedEngiOfTechLevel == true then
                                iCategoryToBuild = refCategoryEngineer
                            end
                        elseif iCurrentConditionToTry == 4 then --Scouts for initial raiders and ACU
                            if aiBrain[M27Overseer.refiScoutShortfallInitialRaider] > 0 or aiBrain[M27Overseer.refiScoutShortfallACU] > 0 then
                                iCategoryToBuild = refCategoryLandScout
                                bConsiderUnderConstruction = false
                                iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallInitialRaider] + aiBrain[M27Overseer.refiScoutShortfallACU] > 0
                            end
                            --if aiBrain[M27Overseer.refbNeedScoutsBuilt] == true then iCategoryToBuild = refCategoryLandScout end
                        elseif iCurrentConditionToTry == 5 then --Emergency defence
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                            if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.275 or (aiBrain:GetCurrentUnits(refCategoryDFTank) <= aiBrain[refiMinimumTanksWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == true) then
                                if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                    if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                        iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                    else
                                        iCategoryToBuild = refCategoryIndirect
                                    end
                                else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                            end
                        elseif iCurrentConditionToTry == 6 then --Escort units
                            if aiBrain[M27PlatoonUtilities.refbNeedEscortUnits] == true then
                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                            end
                        elseif iCurrentConditionToTry == 7 then --Initial engis
                            if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                iCategoryToBuild = refCategoryEngineer
                                iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]
                            end
                        elseif iCurrentConditionToTry == 8 then --Build engineer if have just gained a new tech level
                            if iFactoryTechLevel > 2 then
                                --Do we have any T3 engis already?
                                if aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                elseif aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH2 + refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Just checked if have no engineers of the factorys tech level; iTotalWanted='..iTotalWanted) end
                            end
                        elseif iCurrentConditionToTry == 9 then --MAA initial
                            if aiBrain[M27Overseer.refbNeedMAABuilt] == true and aiBrain:GetCurrentUnits(refCategoryMAA) < 1 then iCategoryToBuild = refCategoryMAA end
                        elseif aiBrain[M27EngineerOverseer.refbNeedResourcesForMissile] == false or M27Conditions.HaveLowMass == false then

                            if iCurrentConditionToTry == 10 then --Emergency defence - enemies are within 32.5% of our base
                                if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                                if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.325 then
                                    if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                        if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                            iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                        else
                                            iCategoryToBuild = refCategoryIndirect
                                        end
                                    else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                                end
                            elseif aiBrain:GetEconomyStored('MASS') > 10 then
                                if iCurrentConditionToTry == 11 then--Mobile shields but just for ACU
                                    local iPowerWanted = 25
                                    if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                    if not(M27Conditions.DoesACUHaveGun(aiBrain, true)) then iPowerWanted = math.max(iPowerWanted, 40) end
                                    if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                        local oPlatoonWithACU = M27Utilities.GetACU(aiBrain).PlatoonHandle
                                        if oPlatoonWithACU and M27PlatoonFormer.DoesPlatoonWantAnotherMobileShield(oPlatoonWithACU, 200) then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields <= 20 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                iTotalWanted = 1
                                            end
                                        end
                                    end

                                elseif iCurrentConditionToTry == 12 then --Intel line scouts
                                    if aiBrain[M27Overseer.refiScoutShortfallIntelLine] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallIntelLine]
                                    end
                                elseif iCurrentConditionToTry == 13 then --Core engis
                                    if aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 14 then --MAA main
                                    if aiBrain[M27Overseer.refbNeedMAABuilt] == true then iCategoryToBuild = refCategoryMAA end
                                elseif iCurrentConditionToTry == 15 then --Scouts for large platoons
                                    if aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallLargePlatoons]
                                    end
                                elseif iCurrentConditionToTry == 16 then --Pre-spare engis
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] >= 0.4 and aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 17 then --Threat range
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= aiBrain[M27Overseer.refiMaxDefenceCoverageWanted] then
                                        if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                            if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                                iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                            else
                                                iCategoryToBuild = refCategoryIndirect
                                            end
                                        else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false) end
                                    end
                                elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                    if iCurrentConditionToTry == 18 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 2 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                        end
                                    elseif iCurrentConditionToTry == 19 then --Mobile shields
                                        local iPowerWanted = 25
                                        if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                        if not(M27Conditions.DoesACUHaveGun(aiBrain, true)) then iPowerWanted = math.max(iPowerWanted, 40) end
                                        if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields <= 30 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                iTotalWanted = 1
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 20 then --Scouts for mexes
                                        if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27Overseer.refiScoutShortfallMexes]='..aiBrain[M27Overseer.refiScoutShortfallMexes]) end
                                        if aiBrain[M27Overseer.refiScoutShortfallMexes] > 0 then
                                            iCategoryToBuild = refCategoryLandScout
                                            iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallMexes]
                                        end
                                    elseif iCurrentConditionToTry == 21 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 5 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 5 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                            if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] < 2 then iTotalWanted = iTotalWanted - aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] end
                                        end
                                    elseif aiBrain[M27PlatoonFormer.refbUsingTanksForPlatoons] == true then
                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                    else
                                        --Are we about to overflow mass?
                                        if aiBrain:GetEconomyStored('MASS') >= 3000 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.9 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 100
                                        else
                                            iCategoryToBuild = aiBrain[refiLastPriorityCategoryToBuild]
                                            bTemporaryPause = true
                                        end
                                    end
                                end
                            end
                        end
                    elseif aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill then
                        bGetFastest = true
                        if bDebugMessages == true then LOG(sFunctionRef..': Are doing ACUKill strategy, decide what to build') end
                        if iCurrentConditionToTry == 1 then --Antinavy because enemy ACU is underwater
                            if aiBrain[M27Overseer.refoLastNearestACU] and M27UnitInfo.IsUnitUnderwater(aiBrain[M27Overseer.refoLastNearestACU]) then
                                iCategoryToBuild = M27UnitInfo.refCategoryAntiNavy
                                iTotalWanted = 1000
                            end
                        elseif iCurrentConditionToTry == 2 then --Amphibious if cant path with land to enemy base or ACU
                            if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then
                                iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
                                iTotalWanted = 1000
                            else
                                --Can we path to ACU with amphib but not with land?
                                --GetSegmentGroupOfLocation(sPathing, tLocation)
                                local iOurBaseAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.reftLastNearestACU])
                                local iOurBaseLandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.reftLastNearestACU])
                                local iEnemyACUAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.reftLastNearestACU])
                                local iEnemyACULandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.reftLastNearestACU])

                                if not(iOurBaseLandGroup == iEnemyACULandGroup) and iOurBaseAmphibGroup == iEnemyACUAmphibGroup then
                                    iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
                                    iTotalWanted = 1000
                                end
                            end
                        elseif iCurrentConditionToTry == 3 then
                            if bDebugMessages == true then LOG(sFunctionRef..': Will build normal land combat') end
                            iCategoryToBuild = M27UnitInfo.refCategoryLandCombat
                            iTotalWanted = 1000
                        else
                            M27Utilities.ErrorHandler('Somehow cant build anything')
                        end
                    elseif iStrategy == M27Overseer.refStrategyAirDominance then
                        if iCurrentConditionToTry == 1 then --Build tank if nearby enemies
                            if iNearbyEnemies > 0 then iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                        elseif iCurrentConditionToTry == 2 then --Emergency MAA (want in priority to everything except really near tank
                            if aiBrain[M27Overseer.refbEmergencyMAANeeded] == true then iCategoryToBuild = refCategoryMAA end
                        elseif iCurrentConditionToTry == 3 then
                            if bNeedEngiOfTechLevel == true then
                                iCategoryToBuild = refCategoryEngineer
                            end
                        elseif iCurrentConditionToTry == 4 then --Scouts for initial raiders and ACU
                            if aiBrain[M27Overseer.refiScoutShortfallInitialRaider] > 0 or aiBrain[M27Overseer.refiScoutShortfallACU] > 0 then
                                iCategoryToBuild = refCategoryLandScout
                                bConsiderUnderConstruction = false
                                iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallInitialRaider] + aiBrain[M27Overseer.refiScoutShortfallACU] > 0
                            end
                            --if aiBrain[M27Overseer.refbNeedScoutsBuilt] == true then iCategoryToBuild = refCategoryLandScout end
                        elseif iCurrentConditionToTry == 5 then --Emergency defence
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                            if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.275 or (aiBrain:GetCurrentUnits(refCategoryDFTank) <= aiBrain[refiMinimumTanksWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == true) then
                                if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                    if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                        iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                    else
                                        iCategoryToBuild = refCategoryIndirect
                                    end
                                else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                            end
                        elseif iCurrentConditionToTry == 6 then --Escort units
                            if aiBrain[M27PlatoonUtilities.refbNeedEscortUnits] == true then
                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                            end
                        elseif iCurrentConditionToTry == 7 then --Initial engis
                            if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                iCategoryToBuild = refCategoryEngineer
                                iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]
                            end
                        elseif iCurrentConditionToTry == 8 then --Build engineer if have just gained a new tech level
                            if iFactoryTechLevel > 2 then
                                --Do we have any T3 engis already?
                                if aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                elseif aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH2 + refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 4
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Just checked if have no engineers of the factorys tech level; iTotalWanted='..iTotalWanted) end
                            end
                        elseif iCurrentConditionToTry == 9 then --MAA initial
                            if aiBrain[M27Overseer.refbNeedMAABuilt] == true and aiBrain:GetCurrentUnits(refCategoryMAA) < 1 then iCategoryToBuild = refCategoryMAA end
                        elseif aiBrain[M27EngineerOverseer.refbNeedResourcesForMissile] == false or M27Conditions.HaveLowMass == false then

                            if iCurrentConditionToTry == 10 then --Emergency defence - enemies are within 32.5% of our base
                                if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                                if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < 0.325 then
                                    if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                        if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                            iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                        else
                                            iCategoryToBuild = refCategoryIndirect
                                        end
                                    else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                                end
                            elseif aiBrain:GetEconomyStored('MASS') > 10 then
                                if iCurrentConditionToTry == 11 then--Mobile shields but just for ACU
                                    local iPowerWanted = 25
                                    if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                    if not(M27Conditions.DoesACUHaveGun(aiBrain, true)) then iPowerWanted = math.max(iPowerWanted, 40) end
                                    if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                        local oPlatoonWithACU = M27Utilities.GetACU(aiBrain).PlatoonHandle
                                        if oPlatoonWithACU and M27PlatoonFormer.DoesPlatoonWantAnotherMobileShield(oPlatoonWithACU, 200) then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields <= 20 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                iTotalWanted = 1
                                            end
                                        end
                                    end

                                elseif iCurrentConditionToTry == 12 then --Intel line scouts
                                    if aiBrain[M27Overseer.refiScoutShortfallIntelLine] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallIntelLine]
                                    end
                                elseif iCurrentConditionToTry == 13 then --Core engis
                                    if aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 14 then --MAA main
                                    if aiBrain[M27Overseer.refbNeedMAABuilt] == true then iCategoryToBuild = refCategoryMAA end
                                elseif iCurrentConditionToTry == 15 then --Scouts for large platoons
                                    if aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallLargePlatoons]
                                    end
                                elseif iCurrentConditionToTry == 16 then --Pre-spare engis
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] >= 0.4 and aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                    end
                                elseif iCurrentConditionToTry == 17 then --Threat range
                                    if aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= aiBrain[M27Overseer.refiMaxDefenceCoverageWanted] then
                                        if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                            if aiBrain[M27Overseer.refbNeedT2PlusIndirect] == true then
                                                iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                                            else
                                                iCategoryToBuild = refCategoryIndirect
                                            end
                                        else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false) end
                                    end
                                elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                    if iCurrentConditionToTry == 18 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 2 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                        end
                                    elseif iCurrentConditionToTry == 19 then --Mobile shields
                                        local iPowerWanted = 25
                                        if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                        if not(M27Conditions.DoesACUHaveGun(aiBrain, true)) then iPowerWanted = math.max(iPowerWanted, 40) end
                                        if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields <= 30 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                iTotalWanted = 1
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 20 then --Scouts for mexes
                                        if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27Overseer.refiScoutShortfallMexes]='..aiBrain[M27Overseer.refiScoutShortfallMexes]) end
                                        if aiBrain[M27Overseer.refiScoutShortfallMexes] > 0 then
                                            iCategoryToBuild = refCategoryLandScout
                                            iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallMexes]
                                        end
                                    elseif iCurrentConditionToTry == 21 then --Spare engis
                                        if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 5 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 5 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                            if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] < 2 then iTotalWanted = iTotalWanted - aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] end
                                        end
                                    elseif aiBrain[M27PlatoonFormer.refbUsingTanksForPlatoons] == true then
                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                    else
                                        --Are we about to overflow mass?
                                        if aiBrain:GetEconomyStored('MASS') >= 3000 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.9 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 100
                                        else
                                            iCategoryToBuild = aiBrain[refiLastPriorityCategoryToBuild]
                                            bTemporaryPause = true
                                        end
                                    end
                                end
                            end
                        end
                    else
                        M27Utilities.ErrorHandler('Dont have a strategy for factory, will build engineers')
                            iCategoryToBuild = refCategoryEngineer
                    end


        --=======AIR FACTORY------------------
                elseif bIsAirFactory then
                    local iMinPowerPerTickWantedForAir = 8
                    if iFactoryTechLevel == 2 then iMinPowerPerTickWantedForAir = 13
                    elseif iFactoryTechLevel == 3 then iMinPowerPerTickWantedForAir = 45 end --Actually need 50 for strat bomber
                    local bHavePowerForAir = false
                    if aiBrain[M27EconomyOverseer.refiEnergyNetBaseIncome] >= iMinPowerPerTickWantedForAir then bHavePowerForAir = true end

                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill and bHavePowerForAir then
                        if M27UnitInfo.IsUnitUnderwater(aiBrain[M27Overseer.refoLastNearestACU]) then
                            iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                        else iCategoryToBuild = M27UnitInfo.refCategoryBomber
                        end
                    else
                        if iCurrentConditionToTry == 1 then
                            if bNeedEngiOfTechLevel == true then
                                iCategoryToBuild = refCategoryEngineer
                            end
                        elseif iCurrentConditionToTry == 2 then
                            if bHavePowerForAir == false then iCategoryToBuild = refCategoryEngineer end
                        elseif iCurrentConditionToTry == 3 then
                            if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                iCategoryToBuild = refCategoryEngineer
                                iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]
                            end
                        elseif iCurrentConditionToTry == 4 then  --Emergency defence bombers, or base level of bombers if in air dominance mode
                            if aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] <= 75 then
                                iCategoryToBuild = refCategoryBomber
                            end
                        elseif iCurrentConditionToTry == 5 then
                            if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27AirOverseer.refiAirAANeeded]='..aiBrain[M27AirOverseer.refiAirAANeeded]..' so will build airAA if its >0') end
                            if bHavePowerForAir and aiBrain[M27AirOverseer.refiAirAANeeded] > 0 then --will be set to >0 if we have an existing air target that we want to attack (e.g. its on our side of the map) but we can't crush with our airforce
                                iCategoryToBuild = refCategoryAirAA
                                iTotalWanted = aiBrain[M27AirOverseer.refiAirAANeeded]
                            end
                        elseif iCurrentConditionToTry == 6 then
                            if aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0 then
                                iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                iTotalWanted = aiBrain[M27AirOverseer.refiTorpBombersWanted]
                            end
                        elseif iCurrentConditionToTry == 7 then
                            if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyAirDominance and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryBomber) < 10 then
                                iCategoryToBuild = refCategoryBomber
                                iTotalWanted = math.max(1, aiBrain[M27AirOverseer.refiBombersWanted])
                            end
                        elseif iCurrentConditionToTry == 7 then
                            if bHavePowerForAir and aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] > 0 then
                                if aiBrain:GetCurrentUnits(refCategoryAirScout) == 0 then
                                    iCategoryToBuild = refCategoryAirScout
                                    iTotalWanted = 1
                                end
                            end
                        elseif iCurrentConditionToTry == 8 then
                            if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                iCategoryToBuild = refCategoryEngineer
                                iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]
                            end
                        elseif iCurrentConditionToTry == 9 then
                            if bHavePowerForAir and aiBrain:GetCurrentUnits(refCategoryBomber) == 0 and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true then
                                iCategoryToBuild = refCategoryBomber
                                iTotalWanted = 1
                            end
                        elseif iCurrentConditionToTry == 10 then
                            if bHavePowerForAir then
                                if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27AirOverseer.refiAirAAWanted]='..aiBrain[M27AirOverseer.refiAirAAWanted]..' so will build airAA if its >0') end
                                if aiBrain[M27AirOverseer.refiAirAAWanted] > 0 then
                                    iCategoryToBuild = refCategoryAirAA
                                    iTotalWanted = math.max(aiBrain[M27AirOverseer.refiAirAAWanted],2)
                                elseif aiBrain:GetCurrentUnits(refCategoryAirAA) < 2 then
                                    iCategoryToBuild = refCategoryAirAA
                                    iTotalWanted = 2
                                end
                            end
                        elseif aiBrain:GetEconomyStored('MASS') > 10 then
                            if iCurrentConditionToTry == 11 then
                                if bHavePowerForAir and aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] > 0 then
                                    iCategoryToBuild = refCategoryAirScout
                                    iTotalWanted = aiBrain[M27AirOverseer.refiExtraAirScoutsWanted]
                                end
                            elseif iCurrentConditionToTry == 12 then
                                if bHavePowerForAir and aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                end
                            elseif iCurrentConditionToTry == 13 then
                                if bHavePowerForAir and aiBrain[M27AirOverseer.refiBombersWanted] > 0 and (aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true or aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= aiBrain[M27AirOverseer.refiBomberDefencePercentRange]) then
                                    iCategoryToBuild = refCategoryBomber
                                    iTotalWanted = aiBrain[M27AirOverseer.refiBombersWanted]
                                end
                            elseif iCurrentConditionToTry == 14 then
                                if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                end
                            elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                if iCurrentConditionToTry == 15 then
                                    if aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 2 - aiBrain[M27EngineerOverseer.refiBOActiveSpareEngineers][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                    end
                                elseif iCurrentConditionToTry == 16 then
                                    if bHavePowerForAir and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true then
                                        local iSpareBombers = 0
                                        if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableBombers]) == false then iSpareBombers = table.getn(aiBrain[M27AirOverseer.reftAvailableBombers]) end
                                        if iSpareBombers <= 1 then
                                            --Do we have targets for the bombers?
                                            if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftBomberTargetShortlist]) == false then
                                                iCategoryToBuild = refCategoryBomber
                                            end
                                        end
                                    end
                                else
                                    if bDebugMessages == true then LOG(sFunctionRef..': iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel]='..tostring(aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel])) end
                                    if iStrategy == M27Overseer.refStrategyEcoAndTech then
                                        bTemporaryPause = true
                                        iCategoryToBuild = nil
                                    else
                                        if bHavePowerForAir and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true and aiBrain:GetEconomyStored('MASS') > 750 and aiBrain:GetEconomyStoredRatio('MASS') > 0.4 then
                                            iCategoryToBuild = refCategoryBomber
                                            iTotalWanted = 100
                                        end
                                    end
                                end
                            end
                        end
                    end

        --=======NAVAL FACTORY------------------
                elseif bIsNavalFactory then
                    if aiBrain:GetEconomyStored('MASS') > 10 then
                        if not(aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill) then
                            if M27Conditions.HaveLowMass(aiBrain) == false then
                                if iCurrentConditionToTry == 1 then
                                    if bNeedEngiOfTechLevel == true then
                                        iCategoryToBuild = refCategoryEngineer
                                    end
                                else
                                    if iStrategy == M27Overseer.refStrategyEcoAndTech then
                                        bTemporaryPause = true
                                        iCategoryToBuild = nil
                                    else
                                        iCategoryToBuild = refCategoryFrigate
                                    end
                                end
                            end
                        end
                    end
                end



                if bDebugMessages == true then

                    if iCategoryToBuild == M27UnitInfo.refCategoryAmphibiousCombat then LOG(sFunctionRef..': iCurrentConditionToTry='..iCurrentConditionToTry..'; Are going to try and build amphibious units')
                    elseif iCategoryToBuild then LOG(sFunctionRef..': iCurrentConditionToTry='..iCurrentConditionToTry..'; Have a category to build that isnt amphibious combat')
                    else LOG(sFunctionRef..': iCategoryToBuild is nil; iCurrentConditionToTry='..iCurrentConditionToTry)
                    end
                end
        --=======================Check this is a factory where we want to build engineers and we're not over the cap
                if iCategoryToBuild == refCategoryEngineer then
                    if oFactory[refbFactoryCanBuildEngis] == false then
                        if bDebugMessages == true then LOG(sFunctionRef..': Factory is flagged to not build engineers, so changing category to build to nil') end
                        iCategoryToBuild = nil
                    else
                        local iEngiCategory
                        if iFactoryTechLevel == 1 then
                            iEngiCategory = refCategoryEngineer
                        elseif iFactoryTechLevel == 2 then
                            iEngiCategory = refCategoryEngineer * categories.TECH2 + refCategoryEngineer * categories.TECH3
                        else iEngiCategory = refCategoryEngineer * categories.TECH3 end

                        local iExistingEngis = aiBrain:GetCurrentUnits(iEngiCategory)
                        if iExistingEngis > aiBrain[refiEngineerCap] then iCategoryToBuild = nil
                        elseif iExistingEngis > aiBrain[reftiEngineerLowMassCap][iFactoryTechLevel] and aiBrain:GetEconomyStored('MASS') <= 50 then iCategoryToBuild = nil
                        elseif aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] > 1 and iFactoryTechLevel < aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] then
                            if iFactoryTechLevel == 1 then
                                if iExistingEngis > aiBrain[refiEngineerCap] * 0.5 then iCategoryToBuild = nil end
                            elseif iExistingEngis > aiBrain[refiEngineerCap] * 0.75 then iCategoryToBuild = nil end
                        end
                    end
                end

                if not(iCategoryToBuild == nil) then
                    if bDebugMessages == true then
                        LOG(sFunctionRef..': iConditionToTry='..iCurrentConditionToTry..': Have a valid category to build, subject to existing construction')
                        if iCategoryToBuild == refCategoryDFTank then LOG(sFunctionRef..': Want to build a DF Tank') end
                    end

                    --Specify speed for tanks and attack bots as some factions have both - superceded by new blueprint priority override system
                    --Tanks - assume want tank not speed; attack bots - assume want speed not tankiness
                    --[[
                    if bGetSlowest == nil then
                        if iCategoryToBuild == refCategoryDFTank then bGetSlowest = true
                        elseif iCategoryToBuild == refCategoryAttackBot then bGetSlowest = false
                        else bGetSlowest = false end
                    end
                    if bGetFastest == nil then
                        if iCategoryToBuild == refCategoryDFTank then bGetFastest = false
                        elseif iCategoryToBuild == refCategoryAttackBot then bGetFastest = true
                        else bGetFastest = false end
                    end

                    if bDebugMessages == true then LOG(sFunctionRef..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
                    --]]

        --=========Check if we are already building the number wanted
                    if bConsiderUnderConstruction == true then
                        if iTotalLandFactories > iTotalWanted then

                            if iFactoriesRecorded > 1 then
                                for iFactory = 1, iFactoriesRecorded do
                                    oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                    if oCurFactory and not(oCurFactory.Dead) then
                                        if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == iCategoryToBuild then
                                            iAlreadyBuilding = iAlreadyBuilding + 1
                                        end
                                    end
                                end
                                if bDebugMessages == true then LOG(sFunctionRef..': Number of units of this type already building='..iAlreadyBuilding) end
                                if iAlreadyBuilding >= iTotalWanted then
                                    bAlreadyBuildingEnough = true
                                end
                            end
                        end
                    end
                    if bAlreadyBuildingEnough == false then
                        sBPIDToBuild = GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, bGetSlowest, bGetFastest)
                        if bDebugMessages == true then
                            if sBPIDToBuild == nil then LOG(sFunctionRef..': Have no BPID to build')
                            else LOG(sFunctionRef..': sBPIDToBuild='..sBPIDToBuild) end
                            if iCategoryToBuild == refCategoryEngineer then LOG('Are building an engineer; current number of engineers that we already have='..aiBrain:GetCurrentUnits(refCategoryEngineer))
                            else LOG('Not building an engineer. number of units with the same category we already have='..aiBrain:GetCurrentUnits(iCategoryToBuild)) end
                        end
                    end
                end
                if bTemporaryPause == true then
                    --aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] + 1
                    sBPIDToBuild = nil
                    break
                else
                    iCurrentConditionToTry = iCurrentConditionToTry + 1
                    if iCurrentConditionToTry > iMaxLoop then break end
                end
            end
        else
            M27Utilities.ErrorHandler('Blueprint is nil')
        end
        if iCategoryToBuild == true then RecordUnderConstruction(aiBrain, oFactory, iCategoryToBuild) end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return sBPIDToBuild
end

function RemoveTemporaryFactoryPause(aiBrain, oFactory)
    --Call via forkthread
    WaitSeconds(iFactoryDelayBeforeConsiderBuildingAgain)
    aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] - 1
    if oFactory then oFactory[refbFactoryTemporaryPauseActive] = false end

end

function FactoryMainOverseerLoop(aiBrain)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'FactoryMainOverseerLoop'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    local iFactoryCategory = categories.CONSTRUCTION * categories.FACTORY * categories.STRUCTURE
    local sUnitToBuild, oCommandAction, tCommandQueue, bFactoryIsIdle
    local refbUpdatedFactoryUnitTracker = 'M27FactoryUnitTracker'
    local oTrackerLastUnit
    local tAllFactories = aiBrain:GetListOfUnits(iFactoryCategory, true, true)

    if tAllFactories then
        for iFactory, oFactory in tAllFactories do
            if not(oFactory.Dead) then
                if not(oFactory:IsUnitState('BeingBuilt')) and not(oFactory[refbFactoryTemporaryPauseActive] == true) then
                    if bDebugMessages == true then LOG(sFunctionRef..': iFactory='..iFactory..'; Factory unit state='..M27Logic.GetUnitState(oFactory)) end
                    if not(oFactory:IsUnitState('Building')) and not(oFactory:IsUnitState('Upgrading')) then --and not(oFactory:IsUnitState('Guarding'))
                        if bDebugMessages == true then LOG(sFunctionRef..': iFactory='..iFactory..': Doesnt appear to be busy, checking command queue') end
                        if oFactory.GetCommandQueue then
                            tCommandQueue = oFactory:GetCommandQueue()
                            bFactoryIsIdle = false
                            local oLastUnit = oFactory[refoLastUnitBuilt]
                            if M27Utilities.IsTableEmpty(tCommandQueue) == true then bFactoryIsIdle = true
                            else
                                if bDebugMessages == true then LOG(sFunctionRef..': factory has a command queue') end
                                if oFactory:GetFractionComplete() >= 1 and not(oFactory:IsPaused()) then
                                    if oLastUnit and not(oLastUnit.Dead) then
                                        local sUnitID = oLastUnit:GetUnitId()
                                        if not(oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon]) then M27PlatoonFormer.AllocateNewUnitToPlatoonFromFactory(oLastUnit)
                                        else
                                            if oFactory[refFactoryIdleCount] == nil then oFactory[refFactoryIdleCount] = 0 end
                                            oFactory[refFactoryIdleCount] = oFactory[refFactoryIdleCount] + 1
                                            if oFactory[refFactoryIdleCount] > iMaxCyclesBeforeOverride then
                                                if oLastUnit.GetPosition and oFactory.GetPosition then
                                                    if oLastUnit[M27PlatoonFormer.refbJustCleared] == false and not(oLastUnit[M27PlatoonFormer.refbJustBuilt] == true) then
                                                        --Below is a redundancy - hopefully no longer needed given the logic in the platoon former
                                                        if M27Utilities.GetDistanceBetweenPositions(oLastUnit:GetPosition(), oFactory:GetPosition()) >= 2.9 then --i.e. land fac is 4x4, so 2x2 from middle, so if do (2^2 + 2^2)^0.5 get just under 2.83, so if distance is >=2.83 the unit is away from the factory; have used distance of 3 to be safe incase unit size affects things
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef..': Clearing factory commands and issuing new ones')
                                                                LOG(sFunctionRef..': iFactory unit state='..M27Logic.GetUnitState(oFactory))
                                                                LOG(sFunctionRef..': iFactory='..': Factory command repr='..repr(tCommandQueue))
                                                                oCommandAction = tCommandQueue[table.getn(tCommandQueue)] -- Last command
                                                                LOG(sFunctionRef..': repr of oCommandAction='..repr(oCommandAction))
                                                                LOG(sFunctionRef..': oLastUnit state='..M27Logic.GetUnitState(oLastUnit))
                                                            end


                                                            --Occassional error where factory thinks its still attached to a unit:
                                                            if oLastUnit and not(oLastUnit.Dead) and oLastUnit.IsUnitState then
                                                                if not(EntityCategoryContains(categories.AIR, sUnitID)) then
                                                                    if oLastUnit.Stop then
                                                                        if bDebugMessages == true then LOG(sFunctionRef..': Issuing clear command to unit with lifetime count='..M27UnitInfo.GetUnitLifetimeCount(oLastUnit)) end
                                                                        oLastUnit:Stop()
                                                                    else
                                                                        if bDebugMessages == true then LOG(sFunctionRef..': Issuing clear command to unit with lifetime count='..M27UnitInfo.GetUnitLifetimeCount(oLastUnit)..' and ID='..sUnitID) end

                                                                        IssueClearCommands({oLastUnit})
                                                                    end
                                                                    IssueClearFactoryCommands({oFactory})
                                                                end
                                                                --bFactoryIsIdle = true
                                                            end
                                                        elseif oLastUnit and not(oLastUnit.Dead) and oLastUnit.GetUnitId and M27Logic.IsUnitIdle(oLastUnit, false, false) == true then
                                                            --FindEmptyPathableAreaNearTarget(aiBrain, oPathingUnit, tStartPosition, iAreaRadius)
                                                            local tTempRallyPoint = M27MapInfo.FindEmptyPathableAreaNearTarget(aiBrain, oLastUnit, oFactory:GetPosition(), 5)
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef..': tTempRallyPoint='..repr(tTempRallyPoint))
                                                                M27Utilities.DrawLocation(tTempRallyPoint)
                                                            end
                                                            IssueMove({oLastUnit}, tTempRallyPoint)
                                                        end
                                                    end
                                                end
                                            end
                                            if oFactory[refFactoryIdleCount] > 200 then
                                                if bDebugMessages == true then M27Utilities.DrawLocation(oFactory:GetPosition()) end
                                                M27Utilities.ErrorHandler('Factory has gone 200 cycles of being stuck - will reset count. Factory position='..repr(oFactory:GetPosition())..'; iFactory='..iFactory, nil, true)
                                                oFactory[refFactoryIdleCount] = 1
                                            end
                                        end
                                    end
                                end

                            end
                            if bFactoryIsIdle == true then
                                --If we just built a unit then tell it to be assigned to a platoon
                                if bDebugMessages == true then
                                    LOG(sFunctionRef..': About to check if weve already sent last unit for processing')
                                    if not(oLastUnit) then LOG('Last unit is nil')
                                    elseif oLastUnit.Dead then LOG('Last unit is dead')
                                    elseif oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon] == nil then LOG('refbProcessedForPlatoon is nil')
                                    else LOG('refbProcessedForPlatoon='..tostring(oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon])) end
                                end
                                if oLastUnit and not(oLastUnit.Dead) and not(oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon]) then
                                    M27PlatoonFormer.AllocateNewUnitToPlatoonFromFactory(oLastUnit)
                                end
                                oFactory[refFactoryIdleCount] = 0
                                if bDebugMessages == true then LOG(sFunctionRef..': iFactory='..iFactory..': Has an empty command queue') end
                                if oFactory[refiFactoryUniqueID] then
                                    if aiBrain[reftFactoryBuildQueue] == nil then aiBrain[reftFactoryBuildQueue] = {} end
                                    if aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID] == nil then aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID] = {} end
                                    aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID][refiUnitCategoryToBuild] = nil
                                end
                                --Set flags for whether can build engis at this factory
                                if iFactory == 1 then --always want at least 1 factory that can build engis regardless of where it is
                                    oFactory[refbFactoryCanBuildEngis] = true
                                else
                                    if oFactory[refbFactoryCanBuildEngis] == nil then
                                        if oFactory[refiFactoryDistanceToStart] == nil then oFactory[refiFactoryDistanceToStart] = M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) end
                                        if oFactory[refiFactoryDistanceToStart] <= 100 then oFactory[refbFactoryCanBuildEngis] = true else oFactory[refbFactoryCanBuildEngis] = false end
                                    end
                                end

                                sUnitToBuild = DetermineWhatToBuild(aiBrain, oFactory)
                                if sUnitToBuild == nil then
                                    oFactory[refbFactoryTemporaryPauseActive] = true
                                    aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] + 1
                                    ForkThread(RemoveTemporaryFactoryPause, aiBrain, oFactory)
                                else
                                    if bDebugMessages == true then LOG(sFunctionRef..': iFactory='..iFactory..': About to tell factory to build '..sUnitToBuild) end
                                    IssueBuildFactory({ oFactory }, sUnitToBuild, 1)
                                    oFactory[refFactoryIdleCount] = 0
                                    oFactory[refbUpdatedFactoryUnitTracker] = false
                                    --Update factory rally point
                                    M27Logic.SetFactoryRallyPoint(oFactory)
                                end
                            else
                                if bDebugMessages == true then LOG(sFunctionRef..': factory not idle') end
                            end
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': factory doesnt have a command queue') end
                        end
                    else
                        if not(oFactory[refbUpdatedFactoryUnitTracker]) then
                            oFactory[refFactoryIdleCount] = 0
                            if oFactory:IsUnitState('Building') then
                                if oFactory.GetFocusUnit then
                                    oTrackerLastUnit = oFactory:GetFocusUnit()
                                    oFactory[refoLastUnitBuilt] = oTrackerLastUnit
                                    oTrackerLastUnit[M27PlatoonFormer.refbJustBuilt] = true
                                    oFactory[refbUpdatedFactoryUnitTracker] = true
                                end
                            end
                        end
                    end
                else
                    oFactory[refFactoryIdleCount] = 0
                end
            end
        end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function FactoryOverseer(aiBrain)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'FactoryOverseer'

    local iTicksBetweenCycle = 1
    iMaxCyclesBeforeOverride = 28 / iTicksBetweenCycle --2.5s triggers often; 3s doesnt

    aiBrain[refiFactoriesTemporarilyPaused] = 0
    while aiBrain do
        if bDebugMessages == true then LOG(sFunctionRef..': Checking if any idle factories') end
        ForkThread(FactoryMainOverseerLoop, aiBrain)
      --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Pre wait tick')
        WaitTicks(iTicksBetweenCycle)
      --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Post wait tick')
        if aiBrain:IsDefeated() or aiBrain.M27IsDefeated or M27Logic.iTimeOfLastBrainAllDefeated > 10 then break end
    end
end

function SetPreferredUnitsByCategory(aiBrain)
    --If have multiple units that can build for a particular category, this will specify what to build
    --special cases where want to prioritise one unit over another where multiple of same type satisfy the category
    --NOTE: This gets ignored if we have coded in special cases where we want to pick the fastest or slowest unit
    aiBrain[reftBlueprintPriorityOverride] = {}
        --T1
    aiBrain[reftBlueprintPriorityOverride]['ual0201'] = 1 --Aurora (instead of LAB)
    aiBrain[reftBlueprintPriorityOverride]['url0107'] = 1 --Mantis (instead of LAB)
    aiBrain[reftBlueprintPriorityOverride]['uel0201'] = 1 --Striker (instead of mechmarine)
    aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = 1 --Thaam (instead of combat scout)
        --T2
    aiBrain[reftBlueprintPriorityOverride]['uel0202'] = 1 --Pillar (instead of mongoose or riptide)
    aiBrain[reftBlueprintPriorityOverride]['xsl0202'] = 1 --Ilshavoh (instead of hover tank)
    aiBrain[reftBlueprintPriorityOverride]['url0202'] = 1 --Rhino (instead of hover tank)
    aiBrain[reftBlueprintPriorityOverride]['ual0202'] = 1 --Obsidian (instead of blaze)
        --T3
    aiBrain[reftBlueprintPriorityOverride]['uel0303'] = 1 --Titan (instead of Percy)
    aiBrain[reftBlueprintPriorityOverride]['ual0303'] = 1 --Harby (instead of sniper bot)
    --aiBrain[reftBlueprintPriorityOverride]['ual0304'] = 1 --Mobile t3 arti instead of shield disrupter
    aiBrain[reftBlueprintPriorityOverride]['url0303'] = 1 --Loyalist (instead of Brick)
    aiBrain[reftBlueprintPriorityOverride]['xsl0303'] = 1 --Siege tank (instead of sniper bot)

        --Engineers
    aiBrain[reftBlueprintPriorityOverride]['uel0208'] = 1 --T2 Engi (instead of sparky)

end