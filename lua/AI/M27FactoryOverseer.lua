---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 20/09/2021 20:28
---

local M27MapInfo = import('/mods/M27AI/lua/AI/M27MapInfo.lua')
local M27Utilities = import('/mods/M27AI/lua/M27Utilities.lua')
local M27PlatoonUtilities = import('/mods/M27AI/lua/AI/M27PlatoonUtilities.lua')
local M27Logic = import('/mods/M27AI/lua/AI/M27GeneralLogic.lua')
local M27Conditions = import('/mods/M27AI/lua/AI/M27CustomConditions.lua')
local M27Overseer = import('/mods/M27AI/lua/AI/M27Overseer.lua')
local M27EngineerOverseer = import('/mods/M27AI/lua/AI/M27EngineerOverseer.lua')
local M27PlatoonFormer = import('/mods/M27AI/lua/AI/M27PlatoonFormer.lua')
local M27UnitInfo = import('/mods/M27AI/lua/AI/M27UnitInfo.lua')
local M27EconomyOverseer = import('/mods/M27AI/lua/AI/M27EconomyOverseer.lua')
local M27AirOverseer = import('/mods/M27AI/lua/AI/M27AirOverseer.lua')
local M27Transport = import('/mods/M27AI/lua/AI/M27Transport.lua')
local M27Navy = import('/mods/M27AI/lua/AI/M27Navy.lua')
local M27Team = import('/mods/M27AI/lua/AI/M27Team.lua')
local M27PlatoonTemplates = import('/mods/M27AI/lua/AI/M27PlatoonTemplates.lua')

refiLastPriorityCategoryToBuild = 'M27FactoryLastIdleUnitToGet'
iFactoryDelayBeforeConsiderBuildingAgain = 2 --Wait 2 seconds if have flagged that we dont want the factory to build anything e.g. due to wanting to eco
refbFactoryTemporaryPauseActive = 'M27FactoryTemporaryPauseActive' --Local variable for factory
refiFactoriesTemporarilyPaused = 'M27FactoriesTemporarilyPaused' --Number of factories that are temporarily paused

refiTimeOfLastCtrlK = 'M27FactoriesTimeOfLastCtrlK' --Gametime we last ctrl-Kd a factory

refiInitialEngineersWanted = 'M27InitialEngineers'
refiMinimumTanksWanted = 'M27MinimumTanks'

--Unit cap variables - max no. of a unit for a given tech level - set in overseer initialisation
refiEngineerCap = 'M27EngineerCap'
refiDFCap = 'M27FactoryDFCap'
refiIndirectCap = 'M27IndirectCap'
refiMAACap = 'M27MAAcap'
refiAirAACap = 'M27AirAACap'
refiAirScoutCap = 'M27AirScoutCap'
refiNavalT2AndBelowCap = 'M27NavalT2AndLowerCap'

reftiEngineerLowMassCap = 'M27FactoryEngineerLowMassCap' --Limit on how many engineers to have by tech level if low on mass
reftFactoryBuildQueue = 'M27FactoryBuildQueue'
refiFactoryUniqueID = 'M27FactoryUniqueID'
refiFactoryNextID = 'M27FactoryNextID'
refiUnitCategoryToBuild = 'M27FactoryUnit'
refoFactory = 'M27FactoryObject'
refoLastUnitBuilt = 'M27FactoryLastUnitBuilt'
refiFactoryBuildCount = 'M27FactoryBuildCount' --Every time issuebuild order given to a factory this is increased by 1
local refFactoryIdleCount = 'M27FactoryIdleCount' --Used to check how long the factory has been idle for (so can implement override to fix)

local refiFactoryDistanceToStart = 'M27FactoryDistanceToStart'
local refbFactoryCanBuildEngis = 'M27FactoryCanBuildEngis'

--Tracker - unit preferences
local reftBlueprintPriorityOverride = 'M27FactoryPreferredBlueprintByCategory' --[x] is the blueprint ref, if there's a priority override it returns a numerical value (higher number = higher priority)

--Category quickrefs
local refCategoryLandFactory = M27UnitInfo.refCategoryLandFactory
refCategoryEngineer = M27UnitInfo.refCategoryEngineer
local refCategoryAttackBot = M27UnitInfo.refCategoryAttackBot
local refCategoryDFTank = M27UnitInfo.refCategoryDFTank --NOTE: Need to specify slowest (so dont pick LAB)
local refCategoryLandScout = M27UnitInfo.refCategoryLandScout
local refCategoryMAA = M27UnitInfo.refCategoryMAA
local refCategoryIndirect = M27UnitInfo.refCategoryIndirect
--Air
local refCategoryAirScout = M27UnitInfo.refCategoryAirScout
local refCategoryAirAA = M27UnitInfo.refCategoryAirAA
local refCategoryBomber = M27UnitInfo.refCategoryBomber
--Navy
local refCategoryFrigate = M27UnitInfo.refCategoryFrigate

--Other variables
iMaxCyclesBeforeOverride = 28


function GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, iOptionalCategoryThatMustBeAbleToBuild, bGetCheapest, bIgnoreTechDifferences)
    --returns nil if cant find any blueprints that can build
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetBlueprintsThatCanBuildOfCategory'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    --if GetGameTimeSeconds() >= 738 then bDebugMessages = true end

    local tBlueprints = EntityCategoryGetUnitList(iCategoryCondition)
    local tAllBlueprints = __blueprints
    local tValidBlueprints = {}
    local iValidBlueprints = 0
    local tBestBlueprints = {}
    local iBestBlueprints = 0
    local iHighestTech = 1
    local iCurrentTech = 1
    --if bGetSlowest == nil then bGetSlowest = false end
    --if bGetFastest == nil then bGetFastest = false end
    local iCurSpeed, iCurMass
    local tiLowestSpeedByTech = {1000, 1000, 1000}
    local tiLowestMassByTech = {100000000, 100000000, 100000000}
    local tiHighestSpeedByTech = {0,0,0}
    local oCurBlueprint
    local iHighestPriority = 0
    local bCanBuildRequiredCategory
    local iCategoriesThatBlueprintCanBuild
    local tsBlueprintsMeetingDesiredCategoriesToBuild
    if iOptionalCategoryThatMustBeAbleToBuild then
        tsBlueprintsMeetingDesiredCategoriesToBuild = EntityCategoryGetUnitList(iOptionalCategoryThatMustBeAbleToBuild)
        if bDebugMessages == true then LOG(sFunctionRef..': tsBlueprintsMeetingDesiredCategoriesToBuild='..repru(tsBlueprintsMeetingDesiredCategoriesToBuild)) end
    end





    if bDebugMessages == true then LOG(sFunctionRef..': reftBlueprintPriorityOverride='..repru(aiBrain[reftBlueprintPriorityOverride])) end
    if not(oFactory.CanBuild) then
        if oFactory.UnitId then
            M27Utilities.ErrorHandler('Factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..' doesnt have .canbuild')
        else
            M27Utilities.ErrorHandler('Factory has no UnitId and doesnt have .CanBuild')
        end
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        return nil
    else
        for _, sBlueprint in tBlueprints do
            if bDebugMessages == true then LOG(sFunctionRef..': About to see if factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..'; can build blueprint '..sBlueprint..'; CanBuild='..tostring(oFactory:CanBuild(sBlueprint))) end
            if oFactory:CanBuild(sBlueprint) == true then
                --Check we can build the desired category
                if not(iOptionalCategoryThatMustBeAbleToBuild) then bCanBuildRequiredCategory = true
                else
                    if bDebugMessages == true then LOG(sFunctionRef..': Have said we need to build a particualr category, will see if sBLueprint='..sBlueprint..' can build this') end
                    bCanBuildRequiredCategory = false
                    iCategoriesThatBlueprintCanBuild = nil
                    if tAllBlueprints[sBlueprint].Economy.BuildableCategory and not(M27Utilities.IsTableEmpty(tsBlueprintsMeetingDesiredCategoriesToBuild)) then
                        if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint has a buildablecategory set, will convert it into a category and see if it matches any of the blueprints we want to be able to build') end
                        for categoryIndex, category in tAllBlueprints[sBlueprint].Economy.BuildableCategory do
                            if categoryIndex == 1 then
                                iCategoriesThatBlueprintCanBuild = ParseEntityCategory(category)
                            else
                                iCategoriesThatBlueprintCanBuild = iCategoriesThatBlueprintCanBuild + ParseEntityCategory(category)
                            end
                        end

                        for iAltBlueprint, sAltBlueprint in tsBlueprintsMeetingDesiredCategoriesToBuild do
                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if sAltBlueprint='..sAltBlueprint..' has a category that matches with what sBLueprint can build') end
                            if EntityCategoryContains(iCategoriesThatBlueprintCanBuild, sAltBlueprint) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Can build the desired category') end
                                bCanBuildRequiredCategory = true
                                break
                            end
                        end
                    end
                end

                if bCanBuildRequiredCategory then
                    --if EntityCategoryContains(iCategoryCondition, sBlueprint) then --tBlueprints is already filtered to just those that meet the categories
                    iValidBlueprints = iValidBlueprints + 1
                    tValidBlueprints[iValidBlueprints] = sBlueprint
                    if bIgnoreTechDifferences then iCurrentTech = 1
                    else
                        if EntityCategoryContains(categories.TECH3 + categories.EXPERIMENTAL, sBlueprint) then iCurrentTech = 3
                        elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
                        else iCurrentTech = 1
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurrentTech='..iCurrentTech..'; iHighestTech='..iHighestTech) end
                    if iCurrentTech > iHighestTech then
                        iHighestTech = iCurrentTech
                        iHighestPriority = 0
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Considering if sBlueprint has a priority specified if we arent looking for slowest or fastest. sBlueprint='..sBlueprint..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)..'; bGetCheapest='..tostring((bGetCheapest or false))) end
                    if not(bGetSlowest) and not(bGetFastest) and not(bGetCheapest) and aiBrain[reftBlueprintPriorityOverride][sBlueprint] then
                        if bDebugMessages == true then LOG(sFunctionRef..': Have a priority specified='..aiBrain[reftBlueprintPriorityOverride][sBlueprint]..'; iHighestPriority='..iHighestPriority) end
                        iHighestPriority = math.max(aiBrain[reftBlueprintPriorityOverride][sBlueprint], iHighestPriority)
                    end
                    if bGetSlowest == true or bGetFastest == true then
                        oCurBlueprint = tAllBlueprints[sBlueprint]
                        iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                        if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurSpeed='..iCurSpeed) end
                        if bGetSlowest == true then
                            if iCurSpeed < tiLowestSpeedByTech[iCurrentTech] then tiLowestSpeedByTech[iCurrentTech] = iCurSpeed end
                        elseif bGetFastest == true then
                            if iCurSpeed > tiHighestSpeedByTech[iCurrentTech] then tiHighestSpeedByTech[iCurrentTech] = iCurSpeed end
                        end
                    elseif bGetCheapest then
                        oCurBlueprint = tAllBlueprints[sBlueprint]
                        iCurMass = oCurBlueprint.Economy.BuildCostMass
                        if iCurMass < tiLowestMassByTech[iCurrentTech] then tiLowestMassByTech[iCurrentTech] = iCurMass end
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to get cheapest; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiLowestMassByTech[iCurrentTech]='..tiLowestMassByTech[iCurrentTech]) end
                    end
                    --end
                end
            end
        end
        --Now get a list of blueprints that are this tech level and of the highest priority
        --if bDebugMessages == true then LOG(sFunctionRef..': iHighestTech='..iHighestTech..'; tiHighestSpeedByTech='..tiHighestSpeedByTech[iHighestTech]..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
        local bIsValid, iCurrentPriority
        local iMinTechToUse = iHighestTech
        local iFastestSpeed = tiHighestSpeedByTech[iHighestTech]
        if bGetFastest == true and iHighestTech >= 3 then
            --If cybran, want loyalist instead of bomb; if Aeon want blaze instead of harbinger or shield disrupter; If sera probably want hover tank instead of siege tank; if UEF want titan
            if tiHighestSpeedByTech[3] <= 3.5 and tiHighestSpeedByTech[2] - tiHighestSpeedByTech[3] >= 0.6 then
                iMinTechToUse = 2
                iFastestSpeed = math.max(tiHighestSpeedByTech[3], tiHighestSpeedByTech[2])
            end
        end

        for _, sBlueprint in tValidBlueprints do
            bIsValid = false
            if EntityCategoryContains(categories.TECH3 + categories.EXPERIMENTAL, sBlueprint) then iCurrentTech = 3
            elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
            else iCurrentTech = 1
            end
            if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..': Considering whether we have high enough tech to consider') end
            if iCurrentTech >= iMinTechToUse then
                if not(bGetFastest) and not(bGetSlowest) and not(bGetCheapest) then iCurrentPriority = aiBrain[reftBlueprintPriorityOverride][sBlueprint] end
                if iCurrentPriority == nil then iCurrentPriority = 0 end
                if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurrentTech='..iCurrentTech..'; considering priority, iCurrentPriority='..iCurrentPriority..'; iHighestPriority='..iHighestPriority) end
                if iCurrentPriority >= iHighestPriority then
                    bIsValid = true

                    if not(bGetSlowest) and not(bGetFastest) and not(bGetCheapest) then
                        if bDebugMessages == true then LOG(sFunctionRef..': Not interested in if slowest or fastest or cheapest so marking BP as valid') end
                        bIsValid = true
                    else
                        if bDebugMessages == true then LOG(sFunctionRef..': Want to get either the slowest, fastest or cheapest') end
                        bIsValid = false
                        if bGetSlowest or bGetFastest then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                            if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurSpeed='..iCurSpeed) end
                            if bGetSlowest == true then
                                if iCurSpeed <= tiLowestSpeedByTech[iHighestTech] then bIsValid = true end
                            elseif iCurSpeed >= iFastestSpeed then
                                if bDebugMessages == true then LOG(sFunctionRef..': Have the highest speed for tech levels being considered') end
                                bIsValid = true
                            end
                        elseif bGetCheapest then
                            oCurBlueprint = tAllBlueprints[sBlueprint]
                            iCurMass = oCurBlueprint.Economy.BuildCostMass
                            if iCurMass <= tiLowestMassByTech[iCurrentTech] then bIsValid = true end
                            if bDebugMessages == true then LOG(sFunctionRef..': Want to get cheapest; iCurMass='..iCurMass..'; iCurrentTech='..iCurrentTech..'; tiLowestMassByTech[iCurrentTech]='..tiLowestMassByTech[iCurrentTech]..'; bIsValid='..tostring(bIsValid)) end
                        else M27Utilities.ErrorHandler('Missing code')
                        end
                    end
                end
                if bIsValid == true then
                    iBestBlueprints = iBestBlueprints + 1
                    tBestBlueprints[iBestBlueprints] = sBlueprint
                    if bDebugMessages == true then LOG(sFunctionRef..': Have valid blueprint='..sBlueprint) end
                end
            end
        end

        local iBPToBuild = math.random(1, iBestBlueprints)
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        return tBestBlueprints[iBPToBuild]
    end


end

function RecordUnderConstruction(aiBrain, oFactory, iUnitCategoryToBuild)
    --Set iUnitCategoryToBuild to nil if factory has nothing to build
    local iFactoryID = oFactory[refiFactoryUniqueID]
    if iFactoryID == nil then
        if aiBrain[refiFactoryNextID] == nil then aiBrain[refiFactoryNextID] = 1 end
        iFactoryID = aiBrain[refiFactoryNextID]
        aiBrain[refiFactoryNextID] = aiBrain[refiFactoryNextID] + 1
        oFactory[refiFactoryUniqueID] = iFactoryID
    end
    if aiBrain[reftFactoryBuildQueue] == nil then aiBrain[reftFactoryBuildQueue] = {} end
    if aiBrain[reftFactoryBuildQueue][iFactoryID] == nil then
        aiBrain[reftFactoryBuildQueue][iFactoryID] = {}
        aiBrain[reftFactoryBuildQueue][iFactoryID][refoFactory] = oFactory
    end
    aiBrain[reftFactoryBuildQueue][iFactoryID][refiUnitCategoryToBuild] = iUnitCategoryToBuild
end

function GetPreferredArtiProportion(aiBrain, oFactory)
    --Returns the % of units that want to be indirect fire units; will be much higher when enemy has lots of point defence; also higher when we have access to t3
    local sFunctionRef = 'GetPreferredArtiProportion'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    local iArtiProportion = 0
    local iFactoryTechLevel = M27UnitInfo.GetUnitTechLevel(oFactory)
    if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] and iFactoryTechLevel == 1 and M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionSeraphim then
        iArtiProportion = 1
    else
        --Can we path to enemy with land? If not dont build spare arti
        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false then iArtiProportion = 0
        else
            local iOurStartPosition = aiBrain.M27StartPositionNumber
            local tOurStart = M27MapInfo.PlayerStartPoints[iOurStartPosition]
            local iRange = aiBrain[M27Overseer.refiDistanceToNearestEnemyBase]
            local tEnemyUnits = aiBrain:GetUnitsAroundPoint(categories.DIRECTFIRE + categories.INDIRECTFIRE, tOurStart, iRange, 'Enemy')
            local iEnemyTotalThreat = 0
            local iEnemyPDThreat = 0
            local tEnemyPD

            if tEnemyUnits then
                tEnemyPD = EntityCategoryFilterDown(M27UnitInfo.refCategoryPD, tEnemyUnits)

                        --GetCombatThreatRating(aiBrain, tUnits, bMustBeVisibleToIntelOrSight, iMassValueOfBlipsOverride, iSoloBlipMassOverride)
                if tEnemyPD then iEnemyPDThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyPD, true) end
                iEnemyTotalThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyUnits, true)
            end

            if iFactoryTechLevel == 2 and M27Utilities.IsTableEmpty(tEnemyPD) == false and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryT3PD, tEnemyPD)) == false then
                iArtiProportion = 0
            else



                if iEnemyPDThreat == 0 then iArtiProportion = 0.1
                elseif iEnemyPDThreat <= 500 then iArtiProportion = 0.15
                elseif iEnemyPDThreat <= 1500 then iArtiProportion = 0.2
                elseif iEnemyPDThreat <= 2500 then iArtiProportion = 0.3
                else iArtiProportion = 0.6 end
                --Reduce % based on proportion:
                if iArtiProportion > 0.1 and iEnemyPDThreat > 0 then
                    local iCap = 2 * iEnemyPDThreat / iEnemyTotalThreat
                    if iCap < 0.15 then iCap = 0.15 end
                    if iCap < iArtiProportion then iArtiProportion = iCap end
                end
                --Are we at tech 3 yet?  If so go for higher % of T3 arti; if at tech2 then go for lower % if no PD since MMLs arent as good
                if iFactoryTechLevel == 3 then
                    iArtiProportion = iArtiProportion + 0.1
                    --Does the enemy have sniper bots? if so increase the proportion some more
                    if M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategorySniperBot, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], 500, 'Enemy')) == false then
                        iArtiProportion = iArtiProportion + 0.2
                    end

                elseif iFactoryTechLevel == 2 and iEnemyPDThreat <= 100 then iArtiProportion = iArtiProportion - 0.025 end
            end
        end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return iArtiProportion
end

function GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, bEmergency)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetLandCombatCategory'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    --if bEmergency is true then will check the desired category can be buitl and if not will revert to a more general category
    local iCategoryToBuild = refCategoryDFTank --default
    --Aeon shield disruptor if nearest unit has a shield:
    if iFactoryTechLevel >= 3 and EntityCategoryContains(categories.AEON, oFactory.UnitId) and EntityCategoryContains(M27UnitInfo.refCategoryPersonalShield + M27UnitInfo.refCategoryMobileLandShield + M27UnitInfo.refCategoryFixedShield + categories.BUBBLESHIELDSPILLOVERCHECK, aiBrain[M27Overseer.refoNearestThreat].UnitId) and oFactory:CanBuild('dal0310') and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryShieldDisruptor) <= 0 then iCategoryToBuild = M27UnitInfo.refCategoryShieldDisruptor
    else

        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then
            iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
            if iFactoryTechLevel == 1 and not(bEmergency) then
                local iFactionIndex = M27UnitInfo.GetUnitFaction(oFactory)
                if iFactionIndex == M27UnitInfo.refFactionUEF or iFactionIndex == M27UnitInfo.refFactionCybran then iCategoryToBuild = nil end
            else
                --Can this factory build an amphibious unit?
                if bEmergency then
                    local sBlueprint = GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory)
                    if sBlueprint == nil then iCategoryToBuild = refCategoryDFTank end
                end
            end
        else
            if bDebugMessages == true then LOG(sFunctionRef..': oFactory='..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..'; Tech level='..iFactoryTechLevel..'; NeedIndirect='..tostring(aiBrain[M27Overseer.refbNeedIndirect])..'; Can path to enemy with land='..tostring(aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand])..'; Skirmisher mass kills='..(aiBrain[M27Overseer.refiSkirmisherMassKills] or 0)..'; Skirmisher mass built='..(aiBrain[M27Overseer.refiSkirmisherMassBuilt] or 0)..'; Skirmisher mass kills='..(aiBrain[M27Overseer.refiSkirmisherMassDeathsAll] or 0)) end
            --Can path with land; build Skirmishers if they're effective
            if iFactoryTechLevel > 1 and not(aiBrain[M27Overseer.refbNeedIndirect]) and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and (aiBrain[M27Overseer.refiSkirmisherMassKills] or 0) >= math.min((aiBrain[M27Overseer.refiSkirmisherMassBuilt] or 0), math.max(200, aiBrain[M27Overseer.refiSkirmisherMassDeathsAll] * 0.75, aiBrain[M27Overseer.refiSkirmisherMassDeathsFromLand], (aiBrain[M27Overseer.refiSkirmisherMassBuilt] or 0) * 0.2)) then
                --Can we actually build a skirmisher
                local iFactionIndex = M27UnitInfo.GetUnitFaction(oFactory)
                if (iFactionIndex == M27UnitInfo.refFactionUEF or iFactionIndex == M27UnitInfo.refFactionCybran) then
                    if iFactoryTechLevel == 2 then
                        --Build skirmisher; if already have lots of skirmishers then build nothing
                        local iSkirmisherCap = 30
                        if aiBrain[M27Overseer.refiOurHighestLandFactoryTech] >= 3 then iSkirmisherCap = 25 end
                        if aiBrain:GetCurrentUnits(M27UnitInfo.refCategorySkirmisher - categories.TECH1) < iSkirmisherCap then

                            iCategoryToBuild = M27UnitInfo.refCategorySkirmisher
                        else
                            iCategoryToBuild = nil
                        end
                    end
                else
                    --Aeon or Sera
                    if iFactoryTechLevel == 3 then
                        local iSkirmisherCap = 25
                        if aiBrain:GetCurrentUnits(M27UnitInfo.refCategorySkirmisher * categories.TECH3) < iSkirmisherCap then
                            iCategoryToBuild = M27UnitInfo.refCategorySkirmisher
                        else
                            --Build noraml T3 land (rather than nothing)
                        end
                    end
                end
            end
        end
    end
    if bDebugMessages == true then
        LOG(sFunctionRef..': Returning list of BPs that meet the category we want to build'..reprs(EntityCategoryGetUnitList(iCategoryCondition)))
    end

    --If have unit restrictions then check if can build anything for this category, if not then generalise to just a DF Tank
    if iCategoryToBuild and not(iCategoryToBuild == refCategoryDFTank) and M27Utilities.IsTableEmpty(ScenarioInfo.Options.RestrictedCategories) == false then
        if not(GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory)) then
            if bDebugMessages == true then LOG(sFunctionRef..': Have unit restrictions and cant build the desired category so will try and build any DF tank') end
            iCategoryToBuild = refCategoryDFTank
        end
    end

    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return iCategoryToBuild
end

function GetNavalAntiAirCategory(aiBrain, oFactory, iFactoryTechLevel)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetNavalAntiAirCategory'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    if iFactoryTechLevel == 1 then
        if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
            return M27UnitInfo.refCategoryNavalAA
        else
            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
            return M27UnitInfo.refCategoryFrigate
        end
    else
        if iFactoryTechLevel == 2 then
            return M27UnitInfo.refCategoryNavalAA
        else
            --T3+ - want to get mix of cruisers and aircraft carriers
            if EntityCategoryContains(categories.UEF, oFactory.UnitId) then
                M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                return M27UnitInfo.refCategoryNavalAA
            else
                local tT2PlusNavalAA = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalAA - categories.TECH1, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                if bDebugMessages == true then LOG(sFunctionRef..': Is table of existing tT2PlusNavy empty='..tostring(M27Utilities.IsTableEmpty(tT2PlusNavalAA))) end
                if M27Utilities.IsTableEmpty(tT2PlusNavalAA) == false then
                    local iCurCruisers = 0
                    local iCurT3AANavy = 0
                    local tCurT3AANavy = EntityCategoryFilterDown(categories.TECH3 + categories.EXPERIMENTAL, tT2PlusNavalAA)
                    if M27Utilities.IsTableEmpty(tCurT3AANavy) == false then
                        iCurT3AANavy = table.getn(tCurT3AANavy)
                    end
                    iCurCruisers = table.getn(tT2PlusNavalAA) - iCurT3AANavy
                    if bDebugMessages == true then LOG(sFunctionRef..': iCurCruisers='..iCurCruisers..'; iCurT3AANavy='..iCurT3AANavy) end
                    if EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) then
                        if iCurCruisers < iCurT3AANavy * 3 + 1 then
                            if bDebugMessages == true then LOG(sFunctionRef..': want more cybran cruisers') end
                            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                            return M27UnitInfo.refCategoryCruiser
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': Want aircraft carrier') end
                            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                            return M27UnitInfo.refCategoryNavalAA
                        end
                    elseif iCurCruisers < iCurT3AANavy * 2 + 1 then
                        if bDebugMessages == true then LOG(sFunctionRef..': Wnat more cruisers to go with aircraft carrier') end
                        return M27UnitInfo.refCategoryCruiser
                    else
                        if EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) then
                            --Dont want T3 subs
                            if bDebugMessages == true then LOG(sFunctionRef..': Want searpahim carrier or cruiser but not sub') end
                            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                            return M27UnitInfo.refCategoryCruiserCarrier
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': Want carrier/cruiser') end
                            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                            return M27UnitInfo.refCategoryNavalAA
                        end
                    end
                else
                    if bDebugMessages == true then LOG(sFunctionRef..': No T2+ navy so want cruiser') end
                    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                    return M27UnitInfo.refCategoryCruiser
                end
            end
        end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function GetNavalSurfaceCombatCategory(aiBrain, oFactory, iFactoryTechLevel)
    --Do we have unit restrictions active? If so then just build any naval unit possible in case some of the ones we want have been restricted
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'GetNavalSurfaceCombatCategory'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    if M27Utilities.IsTableEmpty(ScenarioInfo.Options.RestrictedCategories) == false then
        if bDebugMessages == true then LOG(sFunctionRef..': Unit restrictions active so getting direct fire navy') end
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        return M27UnitInfo.refCategoryFrigate + M27UnitInfo.refCategoryDestroyer + categories.TECH3 * categories.DIRECTFIRE * M27UnitInfo.refCategoryNavalSurface
    else
        if iFactoryTechLevel == 1 then
            if bDebugMessages == true then LOG(sFunctionRef..': T1 so getting frigate') end
            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
            return M27UnitInfo.refCategoryFrigate
        else
            local iCurFrigates = 0
            local iCurHigherTierCombat = 0
            if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                local tCurFrigates = EntityCategoryFilterDown(M27UnitInfo.refCategoryFrigate, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                local tCurHigherTierCombat = EntityCategoryFilterDown(categories.DESTROYER + categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                if M27Utilities.IsTableEmpty(tCurFrigates) == false then iCurFrigates = table.getn(tCurFrigates) end
                if M27Utilities.IsTableEmpty(tCurHigherTierCombat) == false then iCurHigherTierCombat = table.getn(tCurHigherTierCombat) end
            end


            --Special case - enemy has significant enemy hover threat and we are cybran - want to get more frigates (other factions can kite with destroyers better)
            if EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) then
                local tEnemyHoverCombat = EntityCategoryFilterDown(M27UnitInfo.refCategoryLandCombat * categories.HOVER, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                local iEnemyHoverThreat = 0
                if M27Utilities.IsTableEmpty(tEnemyHoverCombat) == false then
                    iEnemyHoverThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyHoverCombat, false, nil, nil, false, false, false, false, true, false, false)
                end
                if bDebugMessages == true then LOG(sFunctionRef..': iCurFrigates='..iCurFrigates..'; iCurHigherTierCombat='..iCurHigherTierCombat..'; iEnemyHoverThreat='..iEnemyHoverThreat) end
                if iEnemyHoverThreat >= 500 then
                    --Sera T2+ and UEF T3 - use normal logic (as destroyers and battlecruisers should be good
                    if iEnemyHoverThreat > iCurFrigates * 350 then
                        --Do we have any destroyers (as still want the range)
                        if iCurHigherTierCombat >= 1 and iCurHigherTierCombat * 8 > iCurFrigates then
                            if bDebugMessages == true then LOG(sFunctionRef..': Want more frigates to help with enemy hover force') end
                            M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                            return M27UnitInfo.refCategoryFrigate
                        end
                    end
                end
            end

            if iFactoryTechLevel == 2 then


                --Want 1 frigate for every destroyer unless are aeon (in which case just want destroyers)
                if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                    return M27UnitInfo.refCategoryDestroyer
                else

                    if iCurFrigates < iCurHigherTierCombat then
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryFrigate
                    else
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryDestroyer
                    end
                end
            elseif iFactoryTechLevel >= 3 then
                --T3+ factory - for uef just build battleships and battlecruisers, for other factions want a mix
                if EntityCategoryContains(categories.UEF, oFactory.UnitId) then
                    local iCurBattlecruisers = 0
                    local iCurBattleships = 0
                    if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                        local tCurBattlecruisers = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattlecruiser, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                        if M27Utilities.IsTableEmpty(tCurBattlecruisers) == false then
                            --No point checking number of battleships unless have >0 battlecruisers as want battlecruisers first
                            iCurBattlecruisers = table.getn(tCurBattlecruisers)
                            local tCurBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattleship, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                            if M27Utilities.IsTableEmpty(tCurBattleships) == false then
                                iCurBattleships = table.getn(tCurBattleships)
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': UEF T3, iCurBattlecruisers='..iCurBattlecruisers..'; iCurBattleships='..iCurBattleships) end
                    if iCurBattlecruisers <= iCurBattleships then
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryBattlecruiser
                    else
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryBattleship --this category excludes battlecruisers
                    end
                elseif EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                    --Aeon - only want to consider destroyers and battleships
                    local iCurDestroyers = 0
                    local iCurBattleships = 0
                    if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                        local tCurDestroyers = EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                        if M27Utilities.IsTableEmpty(tCurDestroyers) == false then
                            --Want destroyer before battleship so no point getting battleship numbers if empty
                            iCurDestroyers = table.getn(tCurDestroyers)
                            local tCurBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattleship, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                            if M27Utilities.IsTableEmpty(tCurBattleships) == false then
                                iCurBattleships = table.getn(tCurBattleships)
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Are aeon, cur destroyers='..iCurDestroyers..'; iCurBattleships='..iCurBattleships) end
                    if iCurDestroyers <= iCurBattleships then
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryDestroyer
                    else
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryBattleship
                    end
                else
                    --Sera and Cybran - mix of frigates, destroyers and battleships
                    local iCurFrigates = 0
                    local iCurDestroyers = 0
                    local iCurBattleships = 0
                    if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                        local tCurFrigates = EntityCategoryFilterDown(M27UnitInfo.refCategoryFrigate, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                        if M27Utilities.IsTableEmpty(tCurFrigates) == false then
                            iCurFrigates = table.getn(tCurFrigates)
                            local tCurDestroyers = EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                            if M27Utilities.IsTableEmpty(tCurDestroyers) == false then
                                --Want destroyer before battleship so no point getting battleship numbers if empty
                                iCurDestroyers = table.getn(tCurDestroyers)
                                local tCurBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattleship, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                if M27Utilities.IsTableEmpty(tCurBattleships) == false then
                                    iCurBattleships = table.getn(tCurBattleships)
                                end
                            end
                        end
                    end
                    if bDebugMessages == true then LOG(sFunctionRef..': Cybran T3 navy, iCurFrigates='..iCurFrigates..'; iCurDestroyers='..iCurDestroyers..'; iCurBattleships='..iCurBattleships) end
                    if iCurFrigates <= iCurDestroyers then
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryFrigate
                    elseif iCurDestroyers <= iCurBattleships then
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryDestroyer
                    else
                        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                        return M27UnitInfo.refCategoryBattleship
                    end
                end
            else
                M27Utilities.ErrorHandler('Unexpected tech level for factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory))
                M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
                return M27UnitInfo.refCategoryFrigate + M27UnitInfo.refCategoryDestroyer + categories.TECH3 * categories.DIRECTFIRE * M27UnitInfo.refCategoryNavalSurface
            end
        end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function DetermineWhatToBuild(aiBrain, oFactory)
    --Returns unit BP ID to be built
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'DetermineWhatToBuild'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    --if GetGameTimeSeconds() >= 1333 and aiBrain:GetArmyIndex() == 5 and EntityCategoryContains(categories.TECH3 * categories.LAND, oFactory.UnitId) then bDebugMessages = true end
    --if oFactory.UnitId == 'ueb0201' then bDebugMessages = true end

    --if EntityCategoryContains(M27UnitInfo.refCategoryAirFactory * categories.TECH2, oFactory.UnitId) and aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10 then bDebugMessages = true end
    --if oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory) == 'urb01013' then bDebugMessages = true end



    local sBPIDToBuild
    if not(oFactory.GetBlueprint) then M27Utilities.ErrorHandler('Factory doesnt have a blueprint')
    else
        local oFactoryBlueprint = oFactory:GetBlueprint()
        local sFactoryBP = oFactory.UnitId
        local iStrategy = aiBrain[M27Overseer.refiAIBrainCurrentStrategy]
        --local bGetSlowest, bGetFastest
        local bGetCheapest, bIgnoreTechDifferences

        if iStrategy == nil then
            iStrategy = aiBrain[M27Overseer.refiDefaultStrategy] or M27Overseer.refStrategyLandMain
            aiBrain[M27Overseer.refiAIBrainCurrentStrategy] = iStrategy
        end
        local iCategoryToBuild
        if oFactoryBlueprint then
            local iFactoryTechLevel = M27UnitInfo.GetUnitTechLevel(oFactory)
            --if iFactoryTechLevel >= 3 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.8 then bDebugMessages = true end

            local bNeedEngiOfTechLevel = false
            if oFactory[refbFactoryCanBuildEngis] == true then
                if iFactoryTechLevel > 2 then
                    if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * categories.TECH3) == 0 then bNeedEngiOfTechLevel = true end
                elseif iFactoryTechLevel == 2 then
                    if bDebugMessages == true then LOG(sFunctionRef..': Dealing with T2 factory. Count of engineers of this tech level='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer - M27UnitInfo.refCategoryEngineer * categories.TECH1)..'; if is 0 then will flag we need engi of this tech level') end
                    if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer - M27UnitInfo.refCategoryEngineer * categories.TECH1) == 0 then bNeedEngiOfTechLevel = true end
                end
            end
            if bDebugMessages == true then LOG(sFunctionRef..': iFactoryTechLevel='..iFactoryTechLevel..'; FactoryID='..sFactoryBP..M27UnitInfo.GetUnitLifetimeCount(oFactory)..'; Brain owner='..aiBrain.Nickname..'; Position='..repru(oFactory:GetPosition())..'; bNeedEngiOfTechLevel='..tostring(bNeedEngiOfTechLevel)..'; Plateau group if any='..(oFactory[M27Transport.refiAssignedPlateau] or 'nil')) end


            --local iBlueprintFactionNumber = M27UnitInfo.GetFactionFromBP(oFactoryBlueprint)
            --local iFactionCat = M27Utilities.FactionIndexToCategory(iBlueprintFactionNumber)
            local iMaxLoop = 100

            local iCurrentConditionToTry = 1
            local bConsiderUnderConstruction
            local iTotalWanted
            local iTotalLandFactories = aiBrain:GetCurrentUnits(refCategoryLandFactory)
            local bAlreadyBuildingEnough
            local iAlreadyBuilding
            if aiBrain[refiFactoryNextID] == nil then aiBrain[refiFactoryNextID] = 1 end
            local iFactoriesRecorded = aiBrain[refiFactoryNextID] - 1
            local oCurFactory
            local iEnemySearchRange = 60
            local tNearbyEnemies = aiBrain:GetUnitsAroundPoint(categories.LAND * categories.MOBILE, oFactory:GetPosition(), iEnemySearchRange, 'Enemy')
            local iNearbyEnemies = 0
            local bHavePowerForAir --only used if have air fac
            local iUnitCapCategory
            local iUnitToBuildTechLevel
            --Other
            local iMobileShields --Used to cap the number we have in action
            local oNearestPlatoonWantingStealth

            local iEngineers

            if M27Utilities.IsTableEmpty(tNearbyEnemies) == false then iNearbyEnemies = table.getn(tNearbyEnemies) end
            if bDebugMessages == true then
                if M27Utilities.IsTableEmpty(tNearbyEnemies) == true then LOG(sFunctionRef..': No nearby enemies')
                else
                    LOG(sFunctionRef..': iNearbyEnemies='..iNearbyEnemies..'; List of nearby enemies:')
                    for iEnemy, oEnemy in tNearbyEnemies do
                        LOG(oEnemy.UnitId..M27UnitInfo.GetUnitLifetimeCount(oEnemy))
                    end
                end
            end



            local bIsLandFactory = EntityCategoryContains(M27UnitInfo.refCategoryLandFactory, sFactoryBP)
            local bIsAirFactory = EntityCategoryContains(M27UnitInfo.refCategoryAirFactory, sFactoryBP)
            local bIsNavalFactory = EntityCategoryContains(M27UnitInfo.refCategoryNavalFactory, sFactoryBP)
            if bIsNavalFactory and not(oFactory[M27Navy.refiAssignedPond]) then M27Navy.UpdateUnitPond(oFactory, aiBrain.M27Team, false) end
            local bIsQuantumGateway = EntityCategoryContains(M27UnitInfo.refCategoryQuantumGateway, sFactoryBP)
            local bTemporaryPause = false
            local iT3AirFactories = 0
            local iT3LandFactories = 0
            local iCurT1Bombers = 0
            local iAvailableT3Bombers = 0
            if bIsAirFactory then
                iT3AirFactories = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory * categories.TECH3)
                iCurT1Bombers = aiBrain:GetCurrentUnits(refCategoryBomber * categories.TECH1) --used in so many places might as well always calculate
                if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableBombers]) == false then
                    local tAvailableT3Bombers = EntityCategoryFilterDown(categories.TECH3, aiBrain[M27AirOverseer.reftAvailableBombers])
                    if M27Utilities.IsTableEmpty(tAvailableT3Bombers) == false then
                        iAvailableT3Bombers = table.getn(tAvailableT3Bombers)
                    end
                end
            end
            if bIsLandFactory then iT3LandFactories = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory * categories.TECH3) end


            --if aiBrain:GetArmyIndex() == 4 and bIsLandFactory and iFactoryTechLevel == 2 then bDebugMessages = true end

            local bReachedLastOption
            local bUpgradeFactoryInstead = false

            --local bSeraphimT1LandFactory = EntityCategoryContains(M27UnitInfo.refCategoryLandFactory * categories.TECH1 * categories.SERAPHIM, sFactoryBP)


            local iCount = 0
            local bPlateauFactory = false
            if not((oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup]) then
                --Could cliffbuild naval fac so dont want to apply plateau logic or show error
                if not(bIsNavalFactory) then
                    bPlateauFactory = true
                end
            end

            --Plateau variables
            local iCurDFTanks = 0 --Used for plateau
            local iCurScouts = 0
            local iCurMAA = 0
            local iCurIndirect = 0
            local iEngis = 0

            --if bIsLandFactory and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMAA) >= 4 then bDebugMessages = true end

            function GetAntiSubmersibleCategoryToBuild()
                if iFactoryTechLevel == 1 then
                    --Upgrade if primary factory
                    local oPrimaryFactory = M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond])
                    if oFactory == oPrimaryFactory then
                        bUpgradeFactoryInstead = true
                    elseif oPrimaryFactory and EntityCategoryContains(categories.TECH1, oPrimaryFactory.UnitId) then
                        --Build subs
                        iCategoryToBuild = M27UnitInfo.refCategorySubmarine - M27UnitInfo.refCategoryMissileShip
                    end
                else
                    if EntityCategoryContains(categories.UEF, oFactory.UnitId) then
                        iCategoryToBuild = M27UnitInfo.refCategoryCooper
                    elseif EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) or (iFactoryTechLevel == 3 and EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId)) then
                        iCategoryToBuild = M27UnitInfo.refCategorySubmarine - M27UnitInfo.refCategoryMissileShip
                    else
                        iCategoryToBuild = M27UnitInfo.refCategoryDestroyer
                    end
                end
            end


            if bDebugMessages == true then LOG(sFunctionRef..': factory considering what to build at time '..GetGameTimeSeconds()..', bIsLandFactory='..tostring(bIsLandFactory)..'; iStrategy='..iStrategy..'; bIsQuantumGateway='..tostring(bIsQuantumGateway)) end
            if iFactoryTechLevel >= 3 or not(aiBrain[M27Overseer.refbCloseToUnitCap]) then
                if bPlateauFactory then
                    --Calculate number of certain units so arent recalculating each time
                    iCurDFTanks = 0
                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauLandCombatPlatoons]) == false then
                        for iPlatoon, oPlatoon in aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauLandCombatPlatoons] do
                            iCurDFTanks = iCurDFTanks + (oPlatoon[M27PlatoonUtilities.refiDFUnits] or 0)
                        end
                    end

                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauIndirectPlatoons]) == false then
                        for iPlatoon, oPlatoon in aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauIndirectPlatoons] do
                            iCurIndirect = iCurIndirect + (oPlatoon[M27PlatoonUtilities.refiIndirectUnits] or 0)
                        end
                    end

                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMAAPlatoons]) == false then
                        for iPlatoon, oPlatoon in aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMAAPlatoons] do
                            iCurMAA = iCurMAA + (oPlatoon[M27PlatoonUtilities.refiCurrentUnits] or 0)
                        end
                    end

                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauScoutPlatoons]) == false then
                        for iPlatoon, oPlatoon in aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauScoutPlatoons] do
                            iCurScouts = iCurScouts + (oPlatoon[M27PlatoonUtilities.refiCurrentUnits] or 0)
                        end
                    end

                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers]) == false then
                        for iEngi, oEngi in aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers] do
                            if not(M27UnitInfo.IsUnitValid(oEngi)) then
                                aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers][iEngi] = nil
                            else
                                iEngis = iEngis + 1
                            end
                        end
                    end
                end
                while sBPIDToBuild == nil do
                    bUpgradeFactoryInstead = false
                    iCount = iCount + 1 if iCount > 100 then M27Utilities.ErrorHandler('Infinite loop') break end
                    local bGetFastest = false
                    local bGetSlowest = false
                    bGetCheapest = false
                    bIgnoreTechDifferences = false

                    bReachedLastOption = false
                    iCategoryToBuild = nil
                    bConsiderUnderConstruction = true
                    iTotalWanted = 100
                    bAlreadyBuildingEnough = false
                    iAlreadyBuilding = 0

                    --=============Determine the next unit that want depending on factory type and  general strategy------
                    if bPlateauFactory and not(bIsLandFactory) then M27Utilities.ErrorHandler('Not expecting air or naval factory in plateau group. will use normal logic for them') end
                    if bPlateauFactory and bIsLandFactory then
                        if bDebugMessages == true then LOG(sFunctionRef..': Considering factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..' assigned to plateau '..oFactory[M27Transport.refiAssignedPlateau]..'; bIsLandFactory='..tostring(bIsLandFactory)..'; Our start point plateau='..M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])) end
                        local bHaveLowMass = M27Conditions.HaveLowMass(aiBrain)
                        local bHaveLowPower = false

                        --Backup variables for if we dont recognise the plateau:
                        local tPlateauMidpoint
                        local iPlateauRadius
                        local iPlateauMexCount
                        if M27Utilities.IsTableEmpty(M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]]) then
                            tPlateauMidpoint = oFactory:GetPosition()
                            iPlateauRadius = 30
                            iPlateauMexCount = 1
                        else
                            tPlateauMidpoint = {M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMidpoint][1], M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMidpoint][2], M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMidpoint][3]}
                            iPlateauRadius = M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauMaxRadius]
                            iPlateauMexCount = M27MapInfo.tAllPlateausWithMexes[oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauTotalMexCount]
                        end

                        if aiBrain:GetEconomyStoredRatio('ENERGY') <= 0.99 and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] < 1 then bHaveLowPower = true end




                        if bDebugMessages == true then LOG(sFunctionRef..': bHaveLowMass='..tostring(bHaveLowMass)..'; bHaveLowPower='..tostring(bHaveLowPower)..'; iStrategy='..iStrategy) end
                        if (iEngis == 0 and (not(bHaveLowMass) or aiBrain:GetEconomyStored('MASS') >= 50)) or (oFactory[refiFactoryBuildCount] or 0) <= 4 or M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers]) or iCurDFTanks == 0 or (not(bHaveLowPower) and not(aiBrain[M27Overseer.refbCloseToUnitCap]) and (not(bHaveLowMass)) or iStrategy == aiBrain[M27Overseer.refiDefaultStrategy] or (aiBrain:GetEconomyStored('MASS') > 10 and (oFactory[refiFactoryBuildCount] or 0) <= 7 and not(aiBrain[M27EconomyOverseer.refbStallingEnergy]))) then
                            if iCurrentConditionToTry == 1 then
                                if iCurMAA > 0 and iCurDFTanks >= 3 and iCurScouts > 0 and iCurIndirect > 0 and iEngis == 0 then
                                    iCategoryToBuild = refCategoryEngineer
                                    iTotalWanted = 1
                                end
                            elseif iCurrentConditionToTry == 2 then
                                --Emergency defence
                                local tNearbyLandAndAir = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryDangerousToLand, oFactory:GetPosition(), 60, 'Enemy')
                                if bDebugMessages == true then LOG(sFunctionRef..': Emergency defence - is table of nearby enemies empty='..tostring(M27Utilities.IsTableEmpty(tNearbyLandAndAir))) end
                                if M27Utilities.IsTableEmpty(tNearbyLandAndAir) == false then
                                    local iNearestValidThreat = 10000
                                    local oNearestValidThreat
                                    local iCurDist
                                    for iUnit, oUnit in tNearbyLandAndAir do
                                        if EntityCategoryContains(categories.AIR, oUnit.UnitId) then
                                            iCurDist = M27Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), oFactory:GetPosition())
                                            if iCurDist < iNearestValidThreat then
                                                iNearestValidThreat = iCurDist
                                                oNearestValidThreat = oUnit
                                            end
                                        else
                                            if M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oUnit:GetPosition()) == oFactory[M27Transport.refiAssignedPlateau] then
                                                iCurDist = M27Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), oFactory:GetPosition())
                                                if iCurDist < iNearestValidThreat then
                                                    iNearestValidThreat = iCurDist
                                                    oNearestValidThreat = oUnit
                                                end
                                            end
                                        end
                                    end
                                    if oNearestValidThreat then
                                        if EntityCategoryContains(categories.AIR, oNearestValidThreat.UnitId) then
                                            iCategoryToBuild = refCategoryMAA
                                        else
                                            iCategoryToBuild = refCategoryDFTank
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 3 then --first tank should be T1 arti in case have enemies outside plateau firing at us

                                if iCurIndirect == 0 then
                                    iCategoryToBuild = refCategoryIndirect * categories.TECH1
                                    iTotalWanted = 1
                                end
                            elseif (not(aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental]) or not(bHaveLowMass)) then
                                if iCurrentConditionToTry == 4 then
                                    --DF tanks if have too few

                                    if bDebugMessages == true then LOG(sFunctionRef..': iCurDFTanks='..iCurDFTanks..'; will build more if <3') end
                                    if iCurDFTanks < 3 then
                                        iCategoryToBuild = refCategoryDFTank
                                    end
                                elseif iCurrentConditionToTry == 5 then --Land scouts
                                    if bDebugMessages == true then LOG(sFunctionRef..': Considering if need initial land scout; iCurScouts='..iCurScouts) end
                                    if iCurScouts == 0 and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then iCategoryToBuild = refCategoryLandScout end
                                elseif iCurrentConditionToTry == 6 then

                                    if bDebugMessages == true then LOG(sFunctionRef..': considering if need initial MAA; iCurMAA+'..iCurMAA) end
                                    if iCurMAA == 0 then iCategoryToBuild = refCategoryMAA end
                                elseif iCurrentConditionToTry == 7 then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Considering if need initial indirect unit; iCurIndirect='..iCurIndirect) end
                                    if iCurIndirect <= 1 then iCategoryToBuild = refCategoryIndirect end
                                elseif iCurrentConditionToTry ==8 then
                                    --Min 2 engineer on plateau wanted if have certain level of tanks and have lots of mexes
                                    if iPlateauMexCount >= 5 and iCurDFTanks > 0 and iCurIndirect > 0 and iCurMAA > 0 and (iCurDFTanks + iCurIndirect + iCurMAA) >= 5 and iEngis < 2 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 9 then
                                    --Closest enemy threat
                                    local tAllPlateauThreats = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryDangerousToLand, tPlateauMidpoint, iPlateauRadius, 'Enemy')
                                    if bDebugMessages == true then LOG(sFunctionRef..': Is table of all Plateau threats empty='..tostring(M27Utilities.IsTableEmpty(tAllPlateauThreats))) end
                                    if M27Utilities.IsTableEmpty(tAllPlateauThreats) == false then
                                        local iCurDist
                                        local iMinDist = 10000
                                        local iPlateauGroup = oFactory[M27Transport.refiAssignedPlateau]
                                        local sPathing = M27UnitInfo.refPathingTypeAmphibious
                                        local tFactoryPosition = oFactory:GetPosition()
                                        local oClosestThreat
                                        for iThreat, oThreat in tAllPlateauThreats do
                                            --Is the threat in the same pathing group?
                                            if iPlateauGroup == M27MapInfo.GetSegmentGroupOfLocation(sPathing, oThreat:GetPosition()) then
                                                iCurDist = M27Utilities.GetDistanceBetweenPositions(tFactoryPosition, oThreat:GetPosition())
                                                if iCurDist < iMinDist then
                                                    oClosestThreat = oThreat
                                                    iMinDist = iCurDist
                                                end
                                            end
                                        end
                                        if oClosestThreat then
                                            if bDebugMessages == true then LOG(sFunctionRef..': oClosestThreat='..oClosestThreat.UnitId..M27UnitInfo.GetUnitLifetimeCount(oClosestThreat)..'; iMinDist='..iMinDist) end
                                            if iCurIndirect <= 25 and EntityCategoryContains(categories.STRUCTURE, oClosestThreat.UnitId) then
                                                iCategoryToBuild = refCategoryIndirect
                                            elseif iCurMAA <= 30 and EntityCategoryContains(categories.AIR, oClosestThreat.UnitId) then
                                                iCategoryToBuild = refCategoryMAA
                                            elseif iCurDFTanks <= 50 then
                                                --Possible that DF tanks shots are blocked, so build arti if already have lots of tanks
                                                if iCurDFTanks >= iCurIndirect * 6 and iCurIndirect <= 25 then iCategoryToBuild = refCategoryIndirect
                                                else iCategoryToBuild = refCategoryDFTank
                                                end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 10 then
                                    --Unit ratios based on DF tanks
                                    if iCurDFTanks * 0.2 > iCurScouts and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then iCategoryToBuild = refCategoryLandScout
                                    elseif iCurDFTanks * 0.3 > iCurIndirect and iCurIndirect <= 25 then iCategoryToBuild = refCategoryIndirect
                                    end
                                elseif iCurrentConditionToTry == 11 then
                                    --Ensure we have at least 2 engineers on the plateau
                                    if bDebugMessages == true then LOG(sFunctionRef..': Checking have at least 1 engi on plateau; is table of engis empty='..tostring(M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers]))) end
                                    if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers]) or table.getsize(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauEngineers]) <= 1 then
                                        iCategoryToBuild = refCategoryEngineer
                                    end
                                elseif iCurrentConditionToTry == 12 then
                                    --Max number of units to defend preemtively if no threats
                                    local iMAAWanted = 1.5 * iPlateauMexCount
                                    if bDebugMessages == true then LOG(sFunctionRef..': Checking if have enough units to cover potential future threats. iCurMAA='..iCurMAA..'; Mex count='..iPlateauMexCount..'; iCurScouts='..iCurScouts..'; iCurDFTanks='..iCurDFTanks) end
                                    if iCurScouts < 2 and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                        iCategoryToBuild = refCategoryLandScout
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will get scout') end
                                    elseif iCurMAA < iMAAWanted and iCurMAA < iCurDFTanks then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will get MAA') end
                                        iCategoryToBuild = refCategoryMAA
                                    elseif iCurDFTanks < math.max(4, 1.5 * iPlateauMexCount) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will get tanks') end
                                        iCategoryToBuild = refCategoryDFTank
                                    elseif iCurScouts < 4 + math.min(5, math.floor(iPlateauMexCount * 0.3)) and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will get scouts') end
                                        iCategoryToBuild = refCategoryLandScout
                                    end
                                elseif iCurrentConditionToTry == 13 then
                                    --1 engi per 2 mexes, to a max of 3 engineers (we shouldve already dropped engineers via transport hence want to keep numbers low)

                                    if bDebugMessages == true then LOG(sFunctionRef..': iEngis='..iEngis..'; Number wanted='..math.min(3, math.ceil(iPlateauMexCount / 3))) end
                                    if iEngis < math.min(3, math.ceil(iPlateauMexCount / 3)) then
                                        iCategoryToBuild = refCategoryEngineer
                                    end
                                else
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': No more conditions to consider')
                                    end
                                    bReachedLastOption = true
                                end
                            else
                                if bDebugMessages == true then LOG(sFunctionRef..': Ignoring most conditions as want to save mass for t3 arti') end
                                bReachedLastOption = true
                            end
                        else
                            if bDebugMessages == true then LOG(sFunctionRef..': Low mass or power so wont build') end
                            bReachedLastOption = true
                        end
                    else
                        if bIsLandFactory then
                            --Land factory logic
                            --if aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and iFactoryTechLevel == 3 then bDebugMessages = true end
                            --v30 - merged eco and air strategies with landearly strategy given overlap (just added conditions for the strategy within the individual conditiontotry
                            if iStrategy == M27Overseer.refStrategyLandMain or iStrategy == M27Overseer.refStrategyLandRush or iStrategy == M27Overseer.refStrategyEcoAndTech or iStrategy == M27Overseer.refStrategyAirDominance or iStrategy == M27Overseer.refStrategyTurtle then
                                if bDebugMessages == true then LOG(sFunctionRef..': iCurrentConditionToTry='..iCurrentConditionToTry..'; iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27Overseer.refiOurHighestLandFactoryTech]='..aiBrain[M27Overseer.refiOurHighestLandFactoryTech]..'; iStrategy='..iStrategy..'; HaveLowMass='..tostring(M27Conditions.HaveLowMass(aiBrain))) end
                                if iCurrentConditionToTry == 1 then --Build tank if nearby enemies, unless have no engineers and already have 2 tanks
                                    if bDebugMessages == true then LOG(sFunctionRef..': Emergency defence - iNearbyEnemies='..iNearbyEnemies) end
                                    if iNearbyEnemies > 0 then iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                                elseif iCurrentConditionToTry == 2 then --Emergency MAA (want in priority to everything except really near tank
                                    if bDebugMessages == true then LOG(sFunctionRef..': refbEmergencyMAANeeded='..tostring(aiBrain[M27Overseer.refbEmergencyMAANeeded])..'; aiBrain[M27Overseer.refiMAAShortfallBase]='..(aiBrain[M27Overseer.refiMAAShortfallBase] or 0)) end
                                    if aiBrain[M27Overseer.refbEmergencyMAANeeded] == true then
                                        iCategoryToBuild = refCategoryMAA
                                        iTotalWanted = math.max(1, aiBrain[M27Overseer.refiMAAShortfallBase])
                                    end
                                elseif iCurrentConditionToTry == 3 then --High priority for small number of mobile shields if we have decent power and multiple land facs
                                    if iFactoryTechLevel >= 2 and (iFactoryTechLevel == 2 or M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryEngineer * categories.TECH3) > 3) then
                                        if aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 75 and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 17.5 then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if bDebugMessages == true then LOG(sFunctionRef..': iMobileShields='..iMobileShields..'; Cur T2+ land facs='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1)..'; Cur DF+Indirect units='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat + M27UnitInfo.refCategoryIndirect - categories.TECH1)) end
                                            if iMobileShields < 1 or (iMobileShields <= 10 and (iMobileShields <= 4 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1) >= 2) and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat + M27UnitInfo.refCategoryIndirect + M27UnitInfo.refCategoryT2PlusPD + M27UnitInfo.refCategoryFixedT2Arti - categories.TECH1) > iMobileShields * 2.5) then
                                                local iShieldsWanted = 0
                                                if iMobileShields == 0 then iShieldsWanted = 1 else
                                                    --Do we have priority units wanting shielding?
                                                    if M27Utilities.IsTableEmpty(aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding]) == false then
                                                        for iUnit, oUnit in aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding] do
                                                            if M27UnitInfo.IsUnitValid(oUnit) and not(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon] and aiBrain:PlatoonExists(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon])) then
                                                                iShieldsWanted = iShieldsWanted + 1
                                                                break
                                                            end
                                                        end
                                                    end
                                                end
                                                --Override for seraphim so we get sniperbots if we can path to enemy with land
                                                local bDontPrioritiseShields = false
                                                if iMobileShields >= 1 and iFactoryTechLevel >= 3 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and EntityCategoryContains(categories.SERAPHIM * categories.TECH3, oFactory.UnitId) and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory * categories.TECH3) < 3 then
                                                    --We dont have many T3 land factories, so only build mobile shield if we have 3 times as many T3 land combat units
                                                    local iCurT3LandCombat = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat * categories.TECH3)
                                                    if iCurT3LandCombat < 3 * iMobileShields then
                                                        bDontPrioritiseShields = true
                                                    end
                                                end

                                                if bDebugMessages == true then LOG(sFunctionRef..': iShieldsWanted='..iShieldsWanted) end
                                                if iShieldsWanted == 0 and iMobileShields < 4 and not(bDontPrioritiseShields) then
                                                    --Do any allies want mobile shields and have none?
                                                    for iBrain, oBrain in M27Team.tSubteamData[aiBrain.M27Subteam][M27Team.subreftoFriendlyBrains] do
                                                        if not(oBrain == aiBrain) and oBrain.M27AI and not(oBrain.M27IsDefeated) then
                                                            if (M27Utilities.IsTableEmpty(oBrain[M27PlatoonFormer.reftPriorityUnitsForShielding]) == false or (M27Utilities.GetACU(oBrain)[M27PlatoonTemplates.refbWantsShieldEscort] or M27Utilities.GetACU(oBrain).PlatoonHandle[M27PlatoonTemplates.refbWantsShieldEscort])) and oBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) == 0 then
                                                                iShieldsWanted = iShieldsWanted + 1
                                                            end
                                                        end
                                                    end
                                                end
                                                if iShieldsWanted > 0 and not(bDontPrioritiseShields) then
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Have units wanting shieldin, so will get mobile shield') end
                                                    iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                    iTotalWanted = 1
                                                end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 4 then --High priority indirect initial lifetime count when our base is under threat from a firebase
                                    if iFactoryTechLevel >= 2 and (aiBrain[M27Overseer.refiNearestEnemyT2PlusStructure] <= 180 or (iFactoryTechLevel == 2 and M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoLastNearestACU]) and aiBrain[M27Overseer.refoLastNearestACU]:HasEnhancement('AdvancedEngineering') and M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27Overseer.refoLastNearestACU]:GetPosition()) <= 200)) then
                                        --Nearby T2+ structure threat - get MML as a high priority if we havent already got some this game
                                        if M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryIndirect - categories.TECH1) <= 6 then
                                            iCategoryToBuild = M27UnitInfo.refCategoryIndirect - categories.TECH1
                                            iTotalWanted = 3
                                        end
                                    end
                                elseif iCurrentConditionToTry == 5 then --High priority skirmishers (UEF and Cybran only) - ahead of initial engineer, provided enemy not approaching with guncom
                                    if iFactoryTechLevel == 2 and EntityCategoryContains(categories.UEF + categories.CYBRAN, oFactory.UnitId) and (not(aiBrain[M27Overseer.refbEnemyGuncomApproachingBase]) or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer - categories.TECH1) >= 2) then
                                        --Get a few hoplites/gattling bots as a top priority if enemy base is nearby
                                        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] <= 400 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySkirmisher) < 2 then
                                            iCategoryToBuild = M27UnitInfo.refCategorySkirmisher
                                        end
                                    end
                                elseif iCurrentConditionToTry == 6 then --High priority engineers
                                    if bNeedEngiOfTechLevel == true then
                                        iCategoryToBuild = refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)
                                        iTotalWanted = 2
                                    elseif iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] and aiBrain:GetEconomyStored('MASS') > 0 and (aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 or (aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 and not(M27Conditions.HaveLowMass(aiBrain)))) and (iT3LandFactories >= 3 or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.3 and not(M27Conditions.HaveLowMass(aiBrain))) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.45) then
                                        iCategoryToBuild = refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)
                                        local iCurT3Factories = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAllFactories * categories.TECH3)

                                        if aiBrain:GetEconomyStoredRatio('MASS') >= 0.4 or (aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.1) then
                                            if aiBrain[M27Overseer.refiModDistFromStartNearestThreat] >= 150 and not(M27Conditions.HaveLowMass(aiBrain)) then
                                                iTotalWanted = math.max(3, math.ceil(iT3LandFactories * 0.75))
                                            else
                                                iTotalWanted = math.max(2, math.ceil(iT3LandFactories / 2))
                                            end
                                        else
                                            iTotalWanted = math.max(1, math.min(3, math.floor(iCurT3Factories / 3)))
                                        end
                                    end
                                elseif iCurrentConditionToTry == 7 then --First want 4 engis (or however many have specified in the initial build order)
                                    if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[refiInitialEngineersWanted]='..aiBrain[refiInitialEngineersWanted]..'; M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryEngineer,  aiBrain[refiInitialEngineersWanted] + 1)='..tostring(M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryEngineer,  aiBrain[refiInitialEngineersWanted] + 1))) end
                                    if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryEngineer,  aiBrain[refiInitialEngineersWanted] + 1) == true then
                                        --local tEngineers = aiBrain:GetListOfUnits(refCategoryEngineer, false, true)
                                        --if M27Utilities.IsTableEmpty(tEngineers) == true then iEngineers = 0
                                        --else iEngineers = table.getn(tEngineers) end
                                        if not(iEngineers) then iEngineers = aiBrain:GetCurrentUnits(refCategoryEngineer) end
                                        if iEngineers < aiBrain[refiInitialEngineersWanted] then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = aiBrain[refiInitialEngineersWanted] - iEngineers
                                            if bDebugMessages == true then LOG(sFunctionRef..': Will build more engineers as dont have the initial number wanted') end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 8 then --Want 2 microbots initially (overseer will change to 0 for water based maps) (check both no. constructed cumulatively, and the total number owned):
                                    if iStrategy == M27Overseer.refStrategyLandMain or iStrategy == M27Overseer.refStrategyTurtle then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef..': iStrategy='..iStrategy..': iCurrentConditionToTry='..iCurrentConditionToTry..': M27Overseer.refiInitialRaiderPlatoonsWanted='..M27Overseer.refiInitialRaiderPlatoonsWanted..'; LifetimeBuildCount<2='..tostring(M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryAttackBot, aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted]))..'; no. of microbots:')
                                            if aiBrain:GetListOfUnits(refCategoryAttackBot, false, true) then LOG('No. of microbots='..table.getn(aiBrain:GetListOfUnits(refCategoryAttackBot, false, true)))
                                            else LOG('No. of microbots = 0') end
                                        end
                                        if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryAttackBot, aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted]) == true then
                                            local iMicrobots = aiBrain:GetCurrentUnits(refCategoryAttackBot)
                                            if bDebugMessages == true then LOG(sFunctionRef..': Will produce bots unless already have that number in existence. iMicrobots='..iMicrobots) end
                                            if iMicrobots < aiBrain[M27Overseer.refiInitialRaiderPlatoonsWanted] then
                                                iCategoryToBuild = refCategoryAttackBot
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 9 then --Scouts for initial raiders and ACU
                                    if aiBrain[M27Overseer.refiScoutShortfallInitialRaiderOrSkirmisher] > 0 or aiBrain[M27Overseer.refiScoutShortfallACU] > 0 then
                                        iCategoryToBuild = refCategoryLandScout
                                        bConsiderUnderConstruction = false
                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallInitialRaiderOrSkirmisher] + aiBrain[M27Overseer.refiScoutShortfallACU]
                                    end
                                elseif iCurrentConditionToTry == 10 then --High priority T2 MAA for ACU if it doesnt have any and we dont have any to give it, and/or experimental needing MAA when enemy has large air threat, and/or imminent base attack from air
                                    if iFactoryTechLevel >= 2 then
                                        local oACU = M27Utilities.GetACU(aiBrain)
                                        if M27Utilities.GetDistanceBetweenPositions(oACU:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) >= 100 and not(M27UnitInfo.IsUnitUnderwater(oACU)) then
                                            local iCurT2MAA = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMAA * categories.TECH2)
                                            if iCurT2MAA == 0 or (iCurT2MAA < 3 and aiBrain[M27AirOverseer.refbFarBehindOnAir] and aiBrain[M27AirOverseer.refiHighestEnemyAirThreat] >= 400) or (iCurT2MAA < 2 and not(aiBrain[M27AirOverseer.refbHaveAirControl])) then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMAA * categories.TECH2
                                                iTotalWanted = 1
                                            end
                                        end
                                    end
                                    if bDebugMessages == true then LOG(sFunctionRef..': High priority MAA builder, is iCategoryToBuild nil='..tostring(iCategoryToBuild == nil)..'; Have air control='..tostring(aiBrain[M27AirOverseer.refbHaveAirControl])..'; Far behind on air='..tostring(aiBrain[M27AirOverseer.refbFarBehindOnAir])..'; Highest enemy air threat='..aiBrain[M27AirOverseer.refiHighestEnemyAirThreat]..'; Is emergency MAA needed='..tostring(aiBrain[M27Overseer.refbEmergencyMAANeeded])..'; Nearest enemy air threat='..aiBrain[M27AirOverseer.refiNearestEnemyAirThreatActualDist]..'; MAA shortfall for large platoons='..aiBrain[M27Overseer.refiMAAShortfallLargePlatoons]..'; Cur land experimentals='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandExperimental)) end
                                    if not(iCategoryToBuild) and not(aiBrain[M27AirOverseer.refbHaveAirControl]) and (aiBrain[M27AirOverseer.refbFarBehindOnAir] or aiBrain[M27AirOverseer.refiHighestEnemyAirThreat] >= 15000) and ((aiBrain[M27Overseer.refbEmergencyMAANeeded] and aiBrain[M27AirOverseer.refiNearestEnemyAirThreatActualDist] <= 110) or (aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] > 0 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandExperimental) > 0)) then
                                        iCategoryToBuild = refCategoryMAA
                                        --Change to only build T2+ if no imminent threat and alreayd have lots of T1 MAA
                                        if iFactoryTechLevel == 1 and aiBrain[M27AirOverseer.refiNearestEnemyAirThreatActualDist] >= 170 and aiBrain:GetCurrentUnits(refCategoryMAA) >= 10 and aiBrain[M27Overseer.refiOurHighestLandFactoryTech] >= 2 then
                                            iCategoryToBuild = refCategoryMAA - categories.TECH1
                                        end
                                        if aiBrain:GetEconomyStoredRatio('MASS') <= 0.4 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * categories.TECH3) > 10 then
                                            iTotalWanted = math.max(1, aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1))
                                        else
                                            iTotalWanted = math.max(1, aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1) - 1)
                                        end
                                    end
                                elseif iCurrentConditionToTry == 11 then --Base level of engineers for base if early game, and/or engineers later game if getting close to overflowing, provided either no REALLY close enemy, or we have multiple air factories and this is a T2+ land (in which case engis could build PD while air fac builds bombers to defend)
                                    if bDebugMessages == true then LOG(sFunctionRef..': Deciding if want to build engineers as high priority. aiBrain[M27Overseer.refiPercentageOutstandingThreat]='..(aiBrain[M27Overseer.refiPercentageOutstandingThreat] or 0)..'; aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat]='..(aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] or 'nil')..'; Engi lifetime build count='..(M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryEngineer) or 'nil')..'; iFactoryTechLevel='..(iFactoryTechLevel or 'nil')..'; aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]='..(aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] or 'nil')..'; aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]='..(aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] or 'nil')..'; aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted]='..(aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] or 'nil')..'; Current air facs='..(aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory) or 'nil')) end
                                    if (aiBrain[M27Overseer.refiPercentageOutstandingThreat] > 0.15 and aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] > 50 and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryEngineer, 7)) or (iFactoryTechLevel >= 2 and aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.3 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory) >= 2) then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = math.max(1, (aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] or 0))
                                    end
                                    --if aiBrain[M27Overseer.refbNeedScoutsBuilt] == true then iCategoryToBuild = refCategoryLandScout end
                                elseif iCurrentConditionToTry == 12 then --Emergency defence - enemies are within 27% of our base (or 160 if lower) and we dont think we can beat them
                                    if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence. aiBrain[M27Overseer.refiPercentageOutstandingThreat]='..aiBrain[M27Overseer.refiPercentageOutstandingThreat]..'; aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted]='..aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted]..'; aiBrain[M27Overseer.refiModDistFromStartNearestThreat]='..aiBrain[M27Overseer.refiModDistFromStartNearestThreat]) end
                                    if (aiBrain[M27Overseer.refiPercentageOutstandingThreat] < math.min(aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted], 0.275) and (aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] < 175 or not(aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental]) or not(M27Conditions.HaveLowMass(aiBrain))) and M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.reftLocationFromStartNearestThreat]) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])) or (aiBrain:GetCurrentUnits(refCategoryDFTank) <= aiBrain[refiMinimumTanksWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and not(aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyEcoAndTech) and not(aiBrain[M27Overseer.refbNeedIndirect])) then
                                        if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                            iCategoryToBuild = refCategoryIndirect
                                        else iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true) end
                                    end
                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 5 end
                                elseif iCurrentConditionToTry == 13 then --High priority ACU MAA builder
                                    if not(aiBrain[M27AirOverseer.refbHaveAirControl]) and aiBrain[M27Overseer.refiMAAShortfallACUCore] >= 2 and aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat] >= 200 and M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27Utilities.GetACU(aiBrain):GetPosition()) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) then
                                        --If ACU has notable assigned MAA already then only request T2+ MAA
                                        if iFactoryTechLevel > 1 or (M27Utilities.GetACU(aiBrain)[M27Overseer.refoUnitsMAAHelper][M27PlatoonUtilities.refiPlatoonMassValue] or 0) <= 250 then
                                            iCategoryToBuild = refCategoryMAA
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 14 then --Emergency defence where enemy near our base, even if we think we can beat them
                                    local iImmediateRange = math.min(aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted], math.max(math.min(aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.35, 180), aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.25))
                                    if (aiBrain[M27EngineerOverseer.refbNeedResourcesForMissile] or aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental]) and M27Conditions.HaveLowMass(aiBrain) and iImmediateRange >= 125 then
                                        iImmediateRange = 125
                                        if aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= iImmediateRange and M27Utilities.GetDistanceBetweenPositions(aiBrain[M27Overseer.refoNearestThreat]:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) >= 175 then
                                            iImmediateRange = 50
                                        end
                                    end
                                    if aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= iImmediateRange and M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.reftLocationFromStartNearestThreat]) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) then
                                        if aiBrain[M27Overseer.refbNeedIndirect] == true then
                                            iCategoryToBuild = refCategoryIndirect
                                        else
                                            --Does the enemy have dangerous structures within this range? If so then have 50% of our units being indirect fire
                                            if math.random(0, 1) == 1 then --assuming more efficient to generate random coin flip than to get all nearby units
                                                local tNearbyEnemyStructures = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryStructure * categories.ANTIAIR + M27UnitInfo.refCategoryStructure * categories.DIRECTFIRE + M27UnitInfo.refCategoryStructure * categories.INDIRECTFIRE, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iImmediateRange, 'Enemy')
                                                if M27Utilities.IsTableEmpty(tNearbyEnemyStructures) == false then
                                                    iCategoryToBuild = refCategoryIndirect
                                                else
                                                    iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true)
                                                end
                                            else
                                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true)
                                            end
                                        end
                                    end
                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 5 end
                                elseif iCurrentConditionToTry == 15 then --Build engineer if have just gained a new tech level or have engis waiting for transport
                                    if M27Utilities.IsTableEmpty(aiBrain[M27Transport.reftTransportsWaitingForEngi]) == false then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 1
                                    end
                                    if iFactoryTechLevel > 2 then
                                        --Do we have any T3 engis already?
                                        local iCurT3Engis = aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH3)
                                        if iCurT3Engis <= 3 or iCurT3Engis + aiBrain:GetCurrentUnits(refCategoryEngineer * categories.TECH2) <= 5 then
                                            iCategoryToBuild = refCategoryEngineer * categories.TECH3
                                            iTotalWanted = math.max(1, 4 - iCurT3Engis)
                                        end
                                    elseif iFactoryTechLevel == 2 then
                                        --Do we have any T2+ engis already?
                                        local iT2PlusEngis = aiBrain:GetCurrentUnits(refCategoryEngineer - categories.TECH1)
                                        if iT2PlusEngis <= 3 then
                                            iTotalWanted = 4 - iT2PlusEngis
                                            iCategoryToBuild = refCategoryEngineer * categories.TECH2 --avoids treating a factory building t1 engi as satisfying this
                                        end
                                    end
                                    --Want to always be building at least 1 engi if are about to overflow mass, as in some scenarios can end up with all engis assisting air factory and no new engis being built
                                    if not(iCategoryToBuild) and aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and (aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > 0 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.75) and aiBrain:GetEconomyStoredRatio('ENERGY') >= 1 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 16 then --Emergency amphibious response
                                    if bDebugMessages == true then LOG(sFunctionRef..': Seeing if want amphibious to combat emergency naval threat.  refbT2NavyNearOurBase='..tostring(aiBrain[M27Overseer.refbT2NavyNearOurBase])) end
                                    if aiBrain[M27Overseer.refbT2NavyNearOurBase] then
                                        --Do we have enemy cruisers that can fire missiles near our base, and they lack a decent destroyer/frigate escort?
                                        local tNearbyEnemyMissileShips = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryMissileShip - categories.SUBMERSIBLE, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], 250, 'Enemy')
                                        if bDebugMessages == true then LOG(sFunctionRef..': Is table of enemy missile ships empty='..tostring(M27Utilities.IsTableEmpty(tNearbyEnemyMissileShips))) end
                                        if M27Utilities.IsTableEmpty(tNearbyEnemyMissileShips) == false then
                                            local oNearestMissileShip = M27Utilities.GetNearestUnit(tNearbyEnemyMissileShips, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])
                                            --Can we path to the nearest missile ship?
                                            if bDebugMessages == true then LOG(sFunctionRef..': Nearest missile ship='..oNearestMissileShip.UnitId..M27UnitInfo.GetUnitLifetimeCount(oNearestMissileShip)..'; Our pating group='..M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oFactory:GetPosition())..'; Missile ship pathing group='..M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oNearestMissileShip:GetPosition())) end
                                            if M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oNearestMissileShip:GetPosition()) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oFactory:GetPosition()) then
                                                local iNearestMissileShip = M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], oNearestMissileShip:GetPosition())
                                                local tNearbyEnemyDFNavy = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryNavalSurface * categories.DIRECTFIRE, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iNearestMissileShip + 20, 'Enemy')
                                                local iNearbyDFThreat = 0
                                                if M27Utilities.IsTableEmpty(tNearbyEnemyDFNavy) == false then
                                                    iNearbyDFThreat = M27Logic.GetCombatThreatRating(aiBrain, tNearbyEnemyDFNavy)
                                                end
                                                local iMaxThreatToConsiderAmphibious = math.min(1500, 600 * aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1))

                                                if bDebugMessages == true then LOG(sFunctionRef..': iNearbyDFThreat for surface navy DF='..iNearbyDFThreat..'; iMaxThreatToConsiderAmphibious='..iMaxThreatToConsiderAmphibious) end
                                                if iNearbyDFThreat <= iMaxThreatToConsiderAmphibious then
                                                    iCategoryToBuild = M27UnitInfo.refCategorySurfaceAmphibiousCombat
                                                    iTotalWanted = 4
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Will build anti-surface navy tanks') end
                                                end
                                            end
                                        end
                                    end


                                    --Reduce what is built from T1 factories if we are at T3:
                                elseif iFactoryTechLevel > 1 or aiBrain[M27Overseer.refiOurHighestLandFactoryTech] < 3 then
                                    if iCurrentConditionToTry == 17 then --High priority MAA for experimentals
                                        if bDebugMessages == true then LOG(sFunctionRef..': High mass shortfall='..aiBrain[M27Overseer.refiMAAShortfallHighMass]) end
                                        if iFactoryTechLevel > 1 and aiBrain[M27Overseer.refiMAAShortfallHighMass] > 0 and (aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory - categories.TECH1) >= 3 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandExperimental) > 0) then --High priority MAA builder for experimentals
                                            iCategoryToBuild = refCategoryMAA
                                            iTotalWanted = math.min(3, aiBrain[M27Overseer.refiMAAShortfallHighMass])
                                        end
                                    elseif iCurrentConditionToTry == 18 then --Initial engis
                                        if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 and (not(iStrategy == M27Overseer.refStrategyLandMain or iStrategy == M27Overseer.refStrategyLandRush) or aiBrain[M27Overseer.refiModDistFromStartNearestThreat] >= 200 or aiBrain:GetCurrentUnits(refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(aiBrain[M27Overseer.refiOurHighestLandFactoryTech]))) <= 8 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 1
                                        end
                                    elseif iCurrentConditionToTry == 19 then
                                        if bDebugMessages == true then LOG(sFunctionRef..': early t1 arti builder: aiBrain[M27Overseer.refiModDistFromStartNearestThreat]='..aiBrain[M27Overseer.refiModDistFromStartNearestThreat]..'; aiBrain[M27Overseer.refiDistanceToNearestEnemyBase]*0.5='..aiBrain[M27Overseer.refiDistanceToNearestEnemyBase]..'; M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryIndirect)='..M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryIndirect)..'; Need indirect='..tostring(aiBrain[M27Overseer.refbNeedIndirect])) end
                                        if iFactoryTechLevel == 1 and aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.5 and M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryIndirect) <= 8 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then --Nearest threat is a structure
                                            iCategoryToBuild = refCategoryIndirect
                                            iTotalWanted = 1
                                        end
                                    elseif iCurrentConditionToTry == 20 then --Mobile shields similar to below but for smaller numberes
                                        if iFactoryTechLevel >= 2 then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields < 2 or (iMobileShields <= 4 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory) > 2) then
                                                local iShieldsWanted = 0
                                                if iMobileShields == 0 then iShieldsWanted = 1 else
                                                    --Do we have priority units wanting shielding, and our ACU is on our side of the map (so less likely to risk shields suiciding on way to acu)?
                                                    if M27Utilities.IsTableEmpty(aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding]) == false and M27Utilities.GetDistanceBetweenPositions(M27Utilities.GetACU(aiBrain):GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) < M27Utilities.GetDistanceBetweenPositions(M27Utilities.GetACU(aiBrain):GetPosition(), M27MapInfo.GetPrimaryEnemyBaseLocation(aiBrain)) then
                                                        for iUnit, oUnit in aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding] do
                                                            if M27UnitInfo.IsUnitValid(oUnit) and not(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon] and aiBrain:PlatoonExists(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon])) then
                                                                iShieldsWanted = iShieldsWanted + 1
                                                                break
                                                            end
                                                        end
                                                    end
                                                end
                                                if iShieldsWanted > 0 then
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Have priority units wanting shielding and ACU is on our side of map, so will get mobile shield') end
                                                    iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                    iTotalWanted = 1
                                                end
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 21 then --Furhter priority MML if enemy nearby firebase
                                        if iFactoryTechLevel >= 2 and (aiBrain[M27Overseer.refiNearestEnemyT2PlusStructure] <= 180 or (iFactoryTechLevel == 2 and M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoLastNearestACU]) and aiBrain[M27Overseer.refoLastNearestACU]:HasEnhancement('AdvancedEngineering') and M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27Overseer.refoLastNearestACU]:GetPosition()) <= 200)) then
                                            --Nearby T2+ structure threat - get MML as a high priority if we havent already got some this game
                                            if M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryIndirect - categories.TECH1) <= 16 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryIndirect - categories.TECH1) < 10 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryIndirect - categories.TECH1
                                                iTotalWanted = 3
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 22 then --Further initialEngiBO, and also Engis if small number of land factories (land attack mode) so engis can get more factories
                                        if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 or ((iStrategy == M27Overseer.refStrategyLandMain or iStrategy == M27Overseer.refStrategyLandRush) and aiBrain:GetListOfUnits(refCategoryLandFactory, false, true) < math.min(4, aiBrain[M27Overseer.reftiMaxFactoryByType][M27Overseer.refFactoryTypeLand]) and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and (aiBrain:GetEconomyStored('MASS') > 0 or aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > -0.3)) then
                                            if aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                                if not(iStrategy == M27Overseer.refStrategyLandRush) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.25 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer) < math.max(5, aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat)) then
                                                    iCategoryToBuild = refCategoryEngineer
                                                    iTotalWanted = aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                                end
                                            end
                                        end
                                        --Also build engineers if are upgrading lots of mexes or have lots of mass
                                        if not(iCategoryToBuild) and ((aiBrain[M27EconomyOverseer.refiMexesUpgrading] >= 4 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.05) or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.4)) and (aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > 0 or aiBrain:GetEconomyStored('MASS') >= 1500) then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = math.min(2, math.max(aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted], 1))
                                        end
                                    elseif iCurrentConditionToTry == 23 then --Mobile shields if have small number and have priority units near base wanting shielding
                                        if iFactoryTechLevel >= 2 then
                                            if aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] then
                                                if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                                if iMobileShields < 5 or (iMobileShields <= 10 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory) > 1) then
                                                    local iShieldsWanted = 0
                                                    if iMobileShields == 0 then iShieldsWanted = 1 else
                                                        --Do we have priority units wanting shielding, and our ACU is on our side of the map (so less likely to risk shields suiciding on way to acu)?
                                                        if M27Utilities.IsTableEmpty(aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding]) == false and M27Utilities.GetDistanceBetweenPositions(M27Utilities.GetACU(aiBrain):GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) < M27Utilities.GetDistanceBetweenPositions(M27Utilities.GetACU(aiBrain):GetPosition(), M27MapInfo.GetPrimaryEnemyBaseLocation(aiBrain)) then
                                                            for iUnit, oUnit in aiBrain[M27PlatoonFormer.reftPriorityUnitsForShielding] do
                                                                if M27UnitInfo.IsUnitValid(oUnit) and not(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon] and aiBrain:PlatoonExists(oUnit[M27PlatoonUtilities.refoSupportingShieldPlatoon])) then
                                                                    iShieldsWanted = iShieldsWanted + 1
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                    if iShieldsWanted > 0 then
                                                        if bDebugMessages == true then LOG(sFunctionRef..': Have priority units wanting shielding and ACU is on our side of map, so will get mobile shield') end
                                                        iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                        iTotalWanted = 1
                                                    end
                                                end
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 24 then --High priority sniper bots if enemy has land experimental approaching us
                                        if iFactoryTechLevel == 3 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and (iStrategy == M27Overseer.refStrategyLandMain or not(M27Conditions.HaveLowMass(aiBrain))) then
                                            local iFactionIndex = M27UnitInfo.GetUnitFaction(oFactory)
                                            if (iFactionIndex == M27UnitInfo.refFactionAeon or iFactionIndex == M27UnitInfo.refFactionSeraphim) then
                                                if M27Conditions.HaveApproachingLandExperimentalThreat(aiBrain) and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryFatboy + M27UnitInfo.refCategoryMegalith,aiBrain[M27Overseer.reftEnemyLandExperimentals])) then
                                                    if aiBrain:GetCurrentUnits(M27UnitInfo.refCategorySniperBot) < 8 or M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySniperBot) < 15 then
                                                        iCategoryToBuild = M27UnitInfo.refCategorySniperBot
                                                        iTotalWanted = 1
                                                        if aiBrain:GetEconomyStored('MASS') > 0 then iTotalWanted = 2 end
                                                    end
                                                end
                                            end
                                        end

                                    elseif (aiBrain[M27EngineerOverseer.refbNeedResourcesForMissile] == false and not(aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental])) or M27Conditions.HaveLowMass(aiBrain) == false then
                                        if iCurrentConditionToTry == 25 then --If enemy has firebase near us, then try and build a minimum level of mobile indirect for our current tech level
                                            if iFactoryTechLevel >= 2 then
                                                local tNearbyEnemyFirebaseUnits = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryT2PlusPD + M27UnitInfo.refCategoryFixedShield + M27UnitInfo.refCategoryFixedT2Arti, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], math.min(250, math.max(170, aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.35)), 'Enemy')
                                                if M27Utilities.IsTableEmpty(tNearbyEnemyFirebaseUnits) == false and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryIndirect * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) <= 4 * (iFactoryTechLevel - 1) then
                                                    --Can we path to the nearest enemy building?
                                                    local oNearestBuilding
                                                    if not(aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand]) then
                                                        oNearestBuilding = M27Utilities.GetNearestUnit(tNearbyEnemyFirebaseUnits, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])
                                                    end
                                                    if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] or (oNearestBuilding and M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, oNearestBuilding:GetPosition()) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])) then
                                                        iCategoryToBuild = refCategoryIndirect
                                                        iTotalWanted = 6
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 26 then --Escort units
                                            if aiBrain[M27PlatoonUtilities.refbNeedEscortUnits] == true and (iStrategy == M27Overseer.refStrategyLandMain or not(M27Conditions.HaveLowMass(aiBrain))) then
                                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                            end
                                            if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 5 end

                                        elseif iCurrentConditionToTry == 27 then --MAA initial
                                            if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27Overseer.refbNeedMAABuilt]='..tostring(aiBrain[M27Overseer.refbNeedMAABuilt])..'; Current MAA+'..aiBrain:GetCurrentUnits(refCategoryMAA)) end
                                            if aiBrain[M27Overseer.refbNeedMAABuilt] == true and aiBrain:GetCurrentUnits(refCategoryMAA) < 1 then
                                                iCategoryToBuild = refCategoryMAA
                                                iTotalWanted = math.max(1, aiBrain[M27Overseer.refiMAAShortfallACUCore])
                                            end
                                        elseif iCurrentConditionToTry == 28 then --Emergency defence - enemies are within 32.5% of our base
                                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if need emergency defence') end
                                            local iImmediateRange = math.min(0.325, aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted])
                                            if aiBrain[M27Overseer.refiPercentageOutstandingThreat] < iImmediateRange and M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.reftLocationFromStartNearestThreat]) == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) then
                                                if iCurIndirect <= 25 and aiBrain[M27Overseer.refbNeedIndirect] == true then
                                                    iCategoryToBuild = refCategoryIndirect

                                                else
                                                    --Does the enemy have dangerous structures within this range? If so then have 50% of our units being indirect fire
                                                    if math.random(0, 1) == 1 then --assuming more efficient to generate random coin flip than to get all nearby units
                                                        local tNearbyEnemyStructures = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryStructure * categories.ANTIAIR + M27UnitInfo.refCategoryStructure * categories.DIRECTFIRE + M27UnitInfo.refCategoryStructure * categories.INDIRECTFIRE, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iImmediateRange, 'Enemy')
                                                        if iCurIndirect <= 30 and M27Utilities.IsTableEmpty(tNearbyEnemyStructures) == false then
                                                            iCategoryToBuild = refCategoryIndirect
                                                        else
                                                            iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true)
                                                        end
                                                    else
                                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, true)
                                                    end
                                                end
                                            end
                                            if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 6 end
                                        elseif iCurrentConditionToTry == 29 then --Min of 3 engineers of the current tech level
                                            if iFactoryTechLevel >= 2 and iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < 3 then
                                                iCategoryToBuild = refCategoryEngineer
                                                iTotalWanted = 1
                                            end
                                        elseif iCurrentConditionToTry == 30 then --High priority mobile stealth
                                            if iFactoryTechLevel >= 2 and not(aiBrain[M27AirOverseer.refbEnemyHasOmniVision]) then
                                                oNearestPlatoonWantingStealth = M27PlatoonFormer.GetClosestPlatoonWantingMobileStealth(aiBrain, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], M27UnitInfo.refPathingTypeLand)
                                                if oNearestPlatoonWantingStealth and ((oNearestPlatoonWantingStealth[M27PlatoonUtilities.refiPlatoonMassValue] or 0) >= 2000 or oNearestPlatoonWantingStealth[M27PlatoonUtilities.refbACUInPlatoon]) then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryMobileLandStealth
                                                    iTotalWanted = 1
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 31 then --High priority mobile shields for ACU, and increased limit if have units wanting priority shield still
                                            local iPowerWanted = 10
                                            if iFactoryTechLevel > 2 then iPowerWanted = 30 end
                                            if bDebugMessages == true then LOG(sFunctionRef..': Considering whether to build mobile shield for ACU; iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]='..aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]..'; iPowerWanted='..iPowerWanted..'; aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons='..tostring(aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons])..'; Energy storage='..aiBrain:GetEconomyStoredRatio('ENERGY')) end
                                            if aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and (aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 or aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > iPowerWanted * 2) then
                                                local oPlatoonWithACU = M27Utilities.GetACU(aiBrain).PlatoonHandle
                                                if oPlatoonWithACU and M27PlatoonFormer.DoesPlatoonOrUnitWantAnotherMobileShield(oPlatoonWithACU, 200) then
                                                    if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                                    if iMobileShields <= 5 then
                                                        iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                        iTotalWanted = 1
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 32 then --Mobile shields for navy
                                            if iFactoryTechLevel >= 2 and EntityCategoryContains(categories.AEON + categories.SERAPHIM * categories.TECH2, oFactory.UnitId) then
                                                if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                                    local iShieldBoatsWanted = M27Navy.GetShieldBoatsWanted(aiBrain, oFactory)
                                                    local iExistingShieldBoats = 0
                                                    local tExistingShieldBoats = EntityCategoryFilterDown(M27UnitInfo.refCategoryShieldBoat, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                    if M27Utilities.IsTableEmpty(tExistingShieldBoats) == false then
                                                        iExistingShieldBoats = table.getn(tExistingShieldBoats)
                                                    end
                                                    if iShieldBoatsWanted < iExistingShieldBoats then
                                                        iCategoryToBuild = M27UnitInfo.refCategoryShieldBoat
                                                        iTotalWanted = math.min(iTotalWanted, iShieldBoatsWanted - iExistingShieldBoats)
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 33 then --T3 mobile artillery if are turtling and havent tried building any and enemy has significant mobile threat
                                            if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyTurtle and iFactoryTechLevel >= 3 then
                                                --Only want if enemy has mobile short range threat, but no land experimental
                                                if (aiBrain[M27Overseer.refiTotalEnemyShortRangeThreat] >= 5000 or aiBrain[M27Overseer.refiTotalEnemyLongRangeThreat] >= 200) and (M27Utilities.IsTableEmpty(aiBrain[M27Overseer.reftEnemyLandExperimentals]) or aiBrain[M27Overseer.refiTotalEnemyLongRangeThreat] >= 400) then
                                                    local iT3MobileArtiBuilt = M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryIndirectT3 * categories.ARTILLERY)
                                                    if iT3MobileArtiBuilt <= 4 or (iT3MobileArtiBuilt <= 7 and aiBrain[M27Overseer.refiTotalEnemyShortRangeThreat] >= 8000 and (aiBrain:GetEconomyStored('MASS') >= 10 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10)) or (not(M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27Overseer.refiTotalEnemyShortRangeThreat] >= 5000 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * categories.TECH3) >= 8) then
                                                        iTotalWanted = 1
                                                        iCategoryToBuild = M27UnitInfo.refCategoryIndirectT3 * categories.ARTILLERY
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 34 then --Higher priority land scouts for intel path based on lifetime count
                                            if aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority] + aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                                if M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryLandScout) <= 12 then
                                                    if aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority] > 0 then
                                                        iCategoryToBuild = refCategoryLandScout
                                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority]
                                                    elseif aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory) > 1 then
                                                        iCategoryToBuild = refCategoryLandScout
                                                        iTotalWanted = 1
                                                    end
                                                end
                                            end
                                        elseif aiBrain:GetEconomyStored('MASS') > 10 then
                                            if iCurrentConditionToTry == 35 then
                                                --Nearest enemy isn't structure, and either in land attack, or dont have low mass
                                                if bDebugMessages == true then LOG(sFunctionRef..': Considering high priority skirmisher production.  aiBrain[M27Overseer.refbNeedIndirect]='..tostring(aiBrain[M27Overseer.refbNeedIndirect])..'; iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand]='..tostring(aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand])..'; iStrategy='..iStrategy..'; Have low mass='..tostring(M27Conditions.HaveLowMass(aiBrain))) end
                                                if not(aiBrain[M27Overseer.refbNeedIndirect]) and iFactoryTechLevel > 1 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and (iStrategy == M27Overseer.refStrategyLandMain or not(M27Conditions.HaveLowMass(aiBrain))) then
                                                    local iFactionIndex = M27UnitInfo.GetUnitFaction(oFactory)
                                                    local bHaveRightTechLevel = false
                                                    if (iFactionIndex == M27UnitInfo.refFactionUEF or iFactionIndex == M27UnitInfo.refFactionCybran) then
                                                        if iFactoryTechLevel == 2 then
                                                            bHaveRightTechLevel = true
                                                        end
                                                    else
                                                        --Aeon or Sera
                                                        if iFactoryTechLevel == 3 then
                                                            bHaveRightTechLevel = true
                                                        end
                                                    end
                                                    if bDebugMessages == true then LOG(sFunctionRef..': bHaveRightTechLevel='..tostring(bHaveRightTechLevel)) end
                                                    if bHaveRightTechLevel then
                                                        local iMaxSkirmishersWanted = 4
                                                        if aiBrain[M27Overseer.refiSkirmisherMassKills] >= math.max(400, aiBrain[M27Overseer.refiSkirmisherMassDeathsAll] * 1.25) then
                                                            iMaxSkirmishersWanted = 8
                                                        end
                                                        --If enemy has land experimental but not mega or fatboy and we are dealing with T3 factory for sniperbots then increase this number further
                                                        if iFactoryTechLevel == 3 and M27Utilities.IsTableEmpty(aiBrain[M27Overseer.reftEnemyLandExperimentals]) == false and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryFatboy + M27UnitInfo.refCategoryMegalith,aiBrain[M27Overseer.reftEnemyLandExperimentals])) then
                                                            iMaxSkirmishersWanted = iMaxSkirmishersWanted + 6
                                                        end

                                                        if bDebugMessages == true then LOG(sFunctionRef..': iMaxSkirmishersWanted='..iMaxSkirmishersWanted..'; aiBrain[M27Overseer.refiSkirmisherMassDeathsAll]='..aiBrain[M27Overseer.refiSkirmisherMassDeathsAll]..'; aiBrain[M27Overseer.refiSkirmisherMassKills]='..aiBrain[M27Overseer.refiSkirmisherMassKills]..'; aiBrain[M27Overseer.refiSkirmisherMassDeathsFromLand]='..aiBrain[M27Overseer.refiSkirmisherMassDeathsFromLand]..'; Lifetime build count='..M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySkirmisher)) end

                                                        if M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySkirmisher) < iMaxSkirmishersWanted then
                                                            iCategoryToBuild = M27UnitInfo.refCategorySkirmisher
                                                            iTotalWanted = 1
                                                        end
                                                    end
                                                end

                                            elseif iCurrentConditionToTry == 36 then--Mobile shields
                                                if iStrategy == M27Overseer.refStrategyLandMain then
                                                    local iPowerWanted = 25
                                                    if iFactoryTechLevel > 2 then iPowerWanted = 120 end
                                                    if aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > iPowerWanted and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and aiBrain:GetEconomyStoredRatio('ENERGY') > 0.9 then
                                                        if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                                        if iMobileShields <= 30 then
                                                            iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                            iTotalWanted = 1
                                                        end
                                                    end
                                                end
                                            elseif iCurrentConditionToTry == 37 then --mobile stealth (lower priority)
                                                --Have already got the nearest platoon wanting stealth earlier, but may have ignored if it had low mass value
                                                if bDebugMessages == true then
                                                    if oNearestPlatoonWantingStealth then
                                                        LOG(sFunctionRef..': iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]='..aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]..'; oNearestPlatoonWantingStealth='..oNearestPlatoonWantingStealth:GetPlan()..oNearestPlatoonWantingStealth[M27PlatoonUtilities.refiPlatoonCount]..'; mass value='..oNearestPlatoonWantingStealth[M27PlatoonUtilities.refiPlatoonMassValue])
                                                    else
                                                        LOG(sFunctionRef..': Dont have a nearby platoon wanting stealth')
                                                    end
                                                end
                                                if iFactoryTechLevel >= 2 and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 5 and not(aiBrain[M27AirOverseer.refbEnemyHasOmniVision]) then
                                                    if oNearestPlatoonWantingStealth and ((oNearestPlatoonWantingStealth[M27PlatoonUtilities.refiPlatoonMassValue] or 0) >= 800 or not(M27Conditions.HaveLowMass(aiBrain)) or oNearestPlatoonWantingStealth:GetPlan() == 'M27Skirmisher' or M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryMobileLandStealth) == 0) then
                                                        iCategoryToBuild = M27UnitInfo.refCategoryMobileLandStealth
                                                        iTotalWanted = 1
                                                    end
                                                end
                                            elseif iCurrentConditionToTry == 38 then --Intel line scouts and large platoons if multiple land factories
                                                if aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority] + aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                                    if aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority] > 0 then
                                                        iCategoryToBuild = refCategoryLandScout
                                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallIntelLine] + aiBrain[M27Overseer.refiScoutShortfallPriority]
                                                    elseif aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory) > 1 then
                                                        iCategoryToBuild = refCategoryLandScout
                                                        iTotalWanted = 1
                                                    end
                                                end
                                            elseif iCurrentConditionToTry == 39 then --Core engis
                                                if aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                                    if not(iStrategy == M27Overseer.refStrategyLandRush) or aiBrain:GetEconomyStored('MASS') >= 50 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer) < math.max(5, aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat)) then
                                                        iCategoryToBuild = refCategoryEngineer
                                                        iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                                    end
                                                end
                                            elseif iCurrentConditionToTry == 40 then --MAA main
                                                if bDebugMessages == true then LOG(sFunctionRef..': Main MAA builder. bNeedMAABuild='..tostring(aiBrain[M27Overseer.refbNeedMAABuilt])..'; refiMAAShortfallACUCore='..aiBrain[M27Overseer.refiMAAShortfallACUCore]..'; aiBrain[M27Overseer.refiMAAShortfallACUPrecaution]='..aiBrain[M27Overseer.refiMAAShortfallACUPrecaution]..'; aiBrain[M27Overseer.refiMAAShortfallLargePlatoons]='..aiBrain[M27Overseer.refiMAAShortfallLargePlatoons]..'; aiBrain[M27Overseer.refiMAAShortfallHighMass]='..aiBrain[M27Overseer.refiMAAShortfallHighMass]) end
                                                if aiBrain[M27Overseer.refbNeedMAABuilt] == true and (iFactoryTechLevel > 1 or aiBrain[M27Overseer.refiOurHighestLandFactoryTech] == 1) then
                                                    iCategoryToBuild = refCategoryMAA
                                                    local iMAARatioWanted = 0.2
                                                    if iStrategy == M27Overseer.refStrategyLandMain then iMAARatioWanted = 0.25 end
                                                    if aiBrain[M27AirOverseer.refiAirAAWanted] >= 10 or aiBrain[M27AirOverseer.refiAirAANeeded] >= 3 then iMAARatioWanted = 0.3 end


                                                    iTotalWanted = math.max(1, aiBrain[M27Overseer.refiMAAShortfallACUCore] + aiBrain[M27Overseer.refiMAAShortfallACUPrecaution] + math.ceil(aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] * iMAARatioWanted) + aiBrain[M27Overseer.refiMAAShortfallHighMass])
                                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = math.min(2, iTotalWanted) end
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Will build MAA. iTotalWanted='..iTotalWanted) end
                                                end

                                            elseif iCurrentConditionToTry == 41 then --Scouts for large platoons
                                                if aiBrain[M27Overseer.refiScoutShortfallLargePlatoons] > 0 then
                                                    iCategoryToBuild = refCategoryLandScout
                                                    iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallLargePlatoons]
                                                end
                                            elseif iCurrentConditionToTry == 42 then --Pre-spare engis
                                                if aiBrain[M27Overseer.refiPercentageOutstandingThreat] >= 0.4 and aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                                    if not(iStrategy == M27Overseer.refStrategyLandRush) or aiBrain:GetEconomyStored('MASS') >= 150 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer) < math.max(5, aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandCombat)) then
                                                        iCategoryToBuild = refCategoryEngineer
                                                        if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then
                                                            iTotalWanted = 1
                                                        else
                                                            iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                                        end

                                                    end
                                                end
                                            elseif iCurrentConditionToTry == 43 then --Threat range
                                                if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= math.min(0.5, aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted]) then
                                                    if iCurIndirect <= 25 and aiBrain[M27Overseer.refbNeedIndirect] == true then
                                                        iCategoryToBuild = refCategoryIndirect

                                                    else
                                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                                        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat end
                                                    end
                                                end
                                                if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 6 end

                                            elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                                if iCurrentConditionToTry == 44 then --Skirmishers if are effective
                                                    if iFactoryTechLevel > 1 and not(aiBrain[M27Overseer.refbNeedIndirect]) and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and aiBrain[M27Overseer.refiSkirmisherMassKills] > math.max(400, aiBrain[M27Overseer.refiSkirmisherMassDeathsAll], aiBrain[M27Overseer.refiSkirmisherMassDeathsFromLand] * 1.5, aiBrain[M27Overseer.refiSkirmisherMassBuilt] * 0.25) then
                                                        local iFactionIndex = M27UnitInfo.GetUnitFaction(oFactory)
                                                        local bHaveRightTechLevel = false
                                                        if (iFactionIndex == M27UnitInfo.refFactionUEF or iFactionIndex == M27UnitInfo.refFactionCybran) then
                                                            if iFactoryTechLevel == 2 then
                                                                bHaveRightTechLevel = true
                                                            end
                                                        else
                                                            --Aeon or Sera
                                                            if iFactoryTechLevel == 3 then
                                                                bHaveRightTechLevel = true
                                                            end
                                                        end
                                                        if bHaveRightTechLevel then
                                                            iCategoryToBuild = M27UnitInfo.refCategorySkirmisher
                                                            iTotalWanted = 3
                                                        end
                                                    end
                                                elseif iCurrentConditionToTry == 45 then --More MAA
                                                    if aiBrain[M27Overseer.refbNeedMAABuilt] == true and (iFactoryTechLevel > 1 or aiBrain[M27Overseer.refiOurHighestLandFactoryTech] == 1) then
                                                        iCategoryToBuild = refCategoryMAA


                                                        if iStrategy == M27Overseer.refStrategyLandMain then
                                                            iTotalWanted = aiBrain[M27Overseer.refiMAAShortfallBase] + aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] + aiBrain[M27Overseer.refiMAAShortfallACUCore] + aiBrain[M27Overseer.refiMAAShortfallACUPrecaution]
                                                        else
                                                            iTotalWanted = math.ceil(aiBrain[M27Overseer.refiMAAShortfallBase] * 0.5 + aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] * 0.5 + aiBrain[M27Overseer.refiMAAShortfallACUCore] + aiBrain[M27Overseer.refiMAAShortfallACUPrecaution])
                                                            if iStrategy == M27Overseer.refStrategyLandRush then
                                                                iTotalWanted = math.min(2, iTotalWanted)
                                                            end
                                                        end

                                                    end
                                                elseif iCurrentConditionToTry == 46 then --Engis if lots of mass stored
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Engi mass overflow builder. Mass stored%='..aiBrain:GetEconomyStoredRatio('MASS')..'; Mass stored='..aiBrain:GetEconomyStored('MASS')..'; Energy stored%='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; Nearest threat dist='..aiBrain[M27Overseer.refiModDistFromStartNearestThreat]..'; 50% of enemy base dist='..aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.5) end
                                                    if aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and aiBrain:GetEconomyStored('MASS') >= 1000 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.9 and aiBrain[M27Overseer.refiModDistFromStartNearestThreat] >= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.5 then
                                                        iCategoryToBuild = refCategoryEngineer
                                                        iTotalWanted = 100
                                                    end
                                                elseif iCurrentConditionToTry == 47 then --Arti ratio provided not building experimental or have high mass
                                                    if iCurIndirect <= 35 and iStrategy == M27Overseer.refStrategyLandMain then
                                                        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] and aiBrain:GetEconomyStored('MASS') >= 3000 or M27Utilities.IsTableEmpty(aiBrain[M27EngineerOverseer.reftEngineerAssignmentsByActionRef][M27EngineerOverseer.refActionBuildExperimental]) then
                                                            local iCurrentArti = aiBrain:GetCurrentUnits(refCategoryIndirect)
                                                            local iCurrentTanks = aiBrain:GetCurrentUnits(refCategoryDFTank)
                                                            local iArtiProportion = GetPreferredArtiProportion(aiBrain, oFactory)
                                                            local iCurProportion = 0
                                                            if iCurrentTanks > 0 then iCurProportion = iCurrentArti / (iCurrentArti + iCurrentTanks) end
                                                            if iCurProportion < iArtiProportion then
                                                                iCategoryToBuild = refCategoryIndirect
                                                            end
                                                        end
                                                        if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyLandRush then iTotalWanted = 3 end
                                                    end
                                                elseif iCurrentConditionToTry == 48 then --Lots of mass or arent building an experimental
                                                    if aiBrain:GetEconomyStored('MASS') >= 3000 or M27Utilities.IsTableEmpty(aiBrain[M27EngineerOverseer.reftEngineerAssignmentsByActionRef][M27EngineerOverseer.refActionBuildExperimental]) then
                                                        if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted]='..aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted]..'; aiBrain[M27Overseer.refiPercentageOutstandingThreat]='..aiBrain[M27Overseer.refiPercentageOutstandingThreat]) end
                                                        if aiBrain[M27Overseer.refiPercentageOutstandingThreat] <= aiBrain[M27Overseer.refiMaxDefenceCoveragePercentWanted] and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then
                                                            if iCurIndirect <= 30 and aiBrain[M27Overseer.refbNeedIndirect] == true and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then
                                                                iCategoryToBuild = refCategoryIndirect

                                                            else
                                                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                                                if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat end
                                                            end
                                                        else
                                                            iCategoryToBuild = M27UnitInfo.refCategoryEngineer
                                                        end
                                                        iTotalWanted = 5
                                                    end
                                                elseif iCurrentConditionToTry == 49 then --Want at least 2 spare engis
                                                    if iStrategy == M27Overseer.refStrategyLandMain or iStrategy == M27Overseer.refStrategyTurtle or (iStrategy == M27Overseer.refStrategyLandRush and aiBrain:GetEconomyStored('MASS') >= 300) then
                                                        if aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                                            iCategoryToBuild = refCategoryEngineer
                                                            iTotalWanted = 2 - aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                                            if iTotalWanted <= 0 then iCategoryToBuild = nil end
                                                        end
                                                    end
                                                elseif iCurrentConditionToTry == 50 then --Scouts for small platoons
                                                    if iStrategy == M27Overseer.refStrategyLandMain then
                                                        if aiBrain[M27Overseer.refiScoutShortfallAllPlatoons] > 0 then
                                                            iCategoryToBuild = refCategoryLandScout
                                                            iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallAllPlatoons]
                                                        end
                                                    end
                                                elseif iCurrentConditionToTry == 51 then --Landrush tanks
                                                    if iStrategy == M27Overseer.refStrategyLandRush then
                                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                                        iTotalWanted = 20
                                                    end
                                                elseif iCurrentConditionToTry == 52 then --Scouts for mexes
                                                    if aiBrain[M27Overseer.refiScoutShortfallMexes] > 0 then
                                                        iCategoryToBuild = refCategoryLandScout
                                                        iTotalWanted = aiBrain[M27Overseer.refiScoutShortfallMexes]
                                                    end
                                                elseif iCurrentConditionToTry == 53 then --Spare engis
                                                    if aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 5 then
                                                        iCategoryToBuild = refCategoryEngineer
                                                        iTotalWanted = 5 - aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                                        if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] < 2 then iTotalWanted = iTotalWanted - aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] end
                                                    end
                                                else
                                                    bReachedLastOption = true

                                                    --Are we about to overflow mass?
                                                    if (iStrategy == M27Overseer.refStrategyLandRush and aiBrain:GetEconomyStored('MASS') >= 400 and aiBrain:GetEconomyStoredRatio('MASS') >= 0.4 and aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > -0.1) or (aiBrain:GetEconomyStored('MASS') >= 3000 and M27Utilities.IsTableEmpty(aiBrain[M27EngineerOverseer.reftEngineerAssignmentsByActionRef][M27EngineerOverseer.refActionBuildExperimental])) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.9 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200 or (aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 and aiBrain:GetEconomyStored('MASS') >= 1000 and aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > 0.1) then
                                                        iCategoryToBuild = refCategoryEngineer
                                                        iTotalWanted = 100
                                                    else
                                                        if M27Utilities.IsTableEmpty(aiBrain[M27EngineerOverseer.reftEngineerAssignmentsByActionRef][M27EngineerOverseer.refActionBuildExperimental]) or aiBrain[refiLastPriorityCategoryToBuild] == M27UnitInfo.refCategoryEngineer then
                                                            iCategoryToBuild = aiBrain[refiLastPriorityCategoryToBuild]
                                                        else iCategoryToBuild = nil end
                                                        bTemporaryPause = true
                                                    end
                                                end
                                            else
                                                bReachedLastOption = true
                                                break
                                            end
                                        else
                                            bReachedLastOption = true
                                            break
                                        end
                                    else
                                        bReachedLastOption = true
                                        break
                                    end
                                else
                                    bReachedLastOption = true
                                    break
                                end
                            elseif aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU then
                                bGetFastest = true
                                --If our ACU is near base then dont get fastest
                                if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU and M27Utilities.GetDistanceBetweenPositions(M27Utilities.GetACU(aiBrain):GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) <= 75 then
                                    bGetFastest = false
                                end


                                --If trying to kill enemy or protect our ACU and already have a decent number of microbots and are at tech 1, then will stop trying to get the fastest unit
                                if iFactoryTechLevel == 1 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAttackBot) >= 15 then bGetFastest = false end
                                if bDebugMessages == true then LOG(sFunctionRef..': Are doing ACUKill or ACUProtect strategy, decide what to build') end
                                if iCurrentConditionToTry == 1 then --Mobile shields if protecting ACU
                                    if bDebugMessages == true then LOG(sFunctionRef..': Deciding if ACU wants more mobile shields.  iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]='..aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]..'; aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons]='..tostring(aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons])..'; aiBrain:GetEconomyStoredRatio(ENERGY)='..aiBrain:GetEconomyStoredRatio('ENERGY')) end
                                    if iFactoryTechLevel >= 2 and aiBrain[M27PlatoonFormer.refbUsingMobileShieldsForPlatoons] and (aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > 10 or (aiBrain:GetEconomyStoredRatio('ENERGY') > 0.6 or aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > 3)) then
                                        local oPlatoonWithACU = M27Utilities.GetACU(aiBrain).PlatoonHandle
                                        if oPlatoonWithACU and M27PlatoonFormer.DoesPlatoonOrUnitWantAnotherMobileShield(oPlatoonWithACU, 200) then
                                            if iMobileShields == nil then iMobileShields = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryMobileLandShield) end
                                            if iMobileShields <= 20 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryMobileLandShield
                                                iTotalWanted = 1
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 2 then --Anti-air for ACU if there are enemy air units near it and we want to protect our ACU
                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU and aiBrain[M27Overseer.refiMAAShortfallACUCore] > 0 and M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirNonScout, M27Utilities.GetACU(aiBrain):GetPosition(), 100, 'Enemy')) == false then
                                        --want MAA for ACU
                                        --Can we path to ACU with amphib but not land? If so then only build MAA if it is amphibious
                                        local iOurBaseAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.refoLastNearestACU]:GetPosition())
                                        local iOurBaseLandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.refoLastNearestACU]:GetPosition())
                                        local iACUAmphibGroup, iACULandGroup
                                        iACUAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, M27Utilities.GetACU(aiBrain):GetPosition())
                                        iACULandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27Utilities.GetACU(aiBrain):GetPosition())
                                        if not(iOurBaseLandGroup == iACULandGroup) and iOurBaseAmphibGroup == iACUAmphibGroup then
                                            iCategoryToBuild = M27UnitInfo.refCategoryAllAmphibiousAndNavy * refCategoryMAA
                                            iTotalWanted = aiBrain[M27Overseer.refiMAAShortfallACUCore]
                                        else
                                            iCategoryToBuild = refCategoryMAA
                                            iTotalWanted = aiBrain[M27Overseer.refiMAAShortfallACUCore]
                                        end
                                    end
                                elseif iCurrentConditionToTry == 3 then --Antinavy because enemy ACU/our ACU is underwater
                                    if (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill and M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoACUKillTarget]) and M27UnitInfo.IsUnitUnderwater(aiBrain[M27Overseer.refoACUKillTarget])) or (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU and M27UnitInfo.IsUnitUnderwater(M27Utilities.GetACU(aiBrain))) then
                                        iCategoryToBuild = M27UnitInfo.refCategoryAntiNavy
                                        iTotalWanted = 5
                                    end
                                elseif iCurrentConditionToTry == 4 then --Amphibious if cant path with land to enemy base or ACU
                                    if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] == false and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] == true then
                                        iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
                                        iTotalWanted = 5
                                    else
                                        --Can we path to ACU with amphib but not with land?
                                        --GetSegmentGroupOfLocation(sPathing, tLocation)
                                        local iOurBaseAmphibGroup, iOurBaseLandGroup

                                        local iACUAmphibGroup, iACULandGroup
                                        if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill and M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoACUKillTarget]) then
                                            iOurBaseAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.refoACUKillTarget]:GetPosition())
                                            iOurBaseLandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.refoACUKillTarget]:GetPosition())
                                            iACUAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.refoACUKillTarget]:GetPosition())
                                            iACULandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.refoACUKillTarget]:GetPosition())
                                        else
                                            iOurBaseAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, aiBrain[M27Overseer.refoLastNearestACU]:GetPosition())
                                            iOurBaseLandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, aiBrain[M27Overseer.refoLastNearestACU]:GetPosition())
                                            iACUAmphibGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, M27Utilities.GetACU(aiBrain):GetPosition())
                                            iACULandGroup = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeLand, M27Utilities.GetACU(aiBrain):GetPosition())
                                        end
                                        --Get amphibious units if cant path with land to the ACU
                                        if not(iOurBaseLandGroup == iACULandGroup) and iOurBaseAmphibGroup == iACUAmphibGroup then
                                            --Cant path with alnd but can with amphibious
                                            iCategoryToBuild = M27UnitInfo.refCategoryAmphibiousCombat
                                            iTotalWanted = 5
                                        elseif iOurBaseLandGroup == iACULandGroup then
                                            --Can path with land
                                            iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                            iTotalWanted = 5
                                        end
                                    end
                                elseif iCurrentConditionToTry == 5 then --1 engineer if we are overflowing mass (in case our attack isnt successful)
                                    if aiBrain:GetEconomyStoredRatio('MASS') >= 0.4 then
                                        iCategoryToBuild = M27UnitInfo.refCategoryEngineer
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 5 then --Land combat if protecting our ACU and its near our base, even if cant path to it yet
                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU and M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27Utilities.GetACU(aiBrain):GetPosition()) <= 150 then
                                        iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                        iTotalWanted = 5
                                    end
                                elseif iCurrentConditionToTry == 6 then --Antiair
                                    if iFactoryTechLevel > 1 or aiBrain[M27Overseer.refiOurHighestLandFactoryTech] == 1 then
                                        if aiBrain[M27Overseer.refbNeedMAABuilt] or aiBrain[M27Overseer.refiMAAShortfallBase] + aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] + aiBrain[M27Overseer.refiMAAShortfallACUCore] + aiBrain[M27Overseer.refiMAAShortfallACUPrecaution] > 0 then
                                            iCategoryToBuild = refCategoryMAA
                                            iTotalWanted = math.max(1, aiBrain[M27Overseer.refiMAAShortfallBase] + aiBrain[M27Overseer.refiMAAShortfallLargePlatoons] + aiBrain[M27Overseer.refiMAAShortfallACUCore] + aiBrain[M27Overseer.refiMAAShortfallACUPrecaution])
                                        end
                                    end
                                elseif iCurrentConditionToTry == 7 then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Will build engineers if we have lots of mass') end
                                    if M27Conditions.HaveLowMass(aiBrain) == false and aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                        iCategoryToBuild = M27UnitInfo.refCategoryEngineer
                                        iTotalWanted = math.max(1, aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted])
                                    end
                                elseif iCurrentConditionToTry == 8 and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then
                                    --Even if cant path to ACU, can path to enemy base, so build land combat as ACU may just be in water near land
                                    iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                                    iTotalWanted = 1000
                                else
                                    bReachedLastOption = true
                                    if not(M27Conditions.HaveLowMass(aiBrain)) then
                                        iCategoryToBuild = M27UnitInfo.refCategoryEngineer
                                        iTotalWanted = 5
                                    else
                                        if bDebugMessages == true then LOG(sFunctionRef..': Cant build anything when in protect ACU mode') end
                                        if aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand] then M27Utilities.ErrorHandler('Somehow cant build anything despite enemy base being land pathable') end
                                        break
                                    end
                                end
                            else
                                bReachedLastOption = true
                                M27Utilities.ErrorHandler('Dont have a strategy for factory, will build engineers')
                                iCategoryToBuild = refCategoryEngineer
                            end


                            --=======AIR FACTORY------------------
                        elseif bIsAirFactory then
                            --if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableAirAA]) == false and table.getsize(aiBrain[M27AirOverseer.reftAvailableAirAA]) >= 20 then bDebugMessages = true end


                            if iCurrentConditionToTry == 1 and bDebugMessages == true then LOG(sFunctionRef..': About to determine what to build for an air factory, mass stored ratio='..aiBrain:GetEconomyStoredRatio('MASS')..'; GameTime='..GetGameTimeSeconds()..'; Defending from arti='..tostring(aiBrain[M27Overseer.refbDefendAgainstArti])..'; Have low mass='..tostring(M27Conditions.HaveLowMass(aiBrain))) end
                            local iMinPowerPerTickWantedForAir = 8
                            if iFactoryTechLevel == 2 then iMinPowerPerTickWantedForAir = 13
                            elseif iFactoryTechLevel == 3 then iMinPowerPerTickWantedForAir = 45 end --Actually need 50 for strat bomber
                            bHavePowerForAir = false
                            if aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= iMinPowerPerTickWantedForAir then
                                bHavePowerForAir = true
                                if aiBrain[M27EconomyOverseer.refbStallingEnergy] or (iFactoryTechLevel == 3 and aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] <= 275) then
                                    bHavePowerForAir = false
                                    if  aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyAirDominance or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU then
                                        if aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.5 then
                                            bHavePowerForAir = true
                                        end
                                    end
                                end
                            elseif aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyAirDominance or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU or aiBrain[M27Overseer.refbT2NavyNearOurBase] then
                                if iFactoryTechLevel == 1 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.5 and not(aiBrain[M27Overseer.refbT2NavyNearOurBase]) then
                                    bHavePowerForAir = true
                                elseif iFactoryTechLevel == 2 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.9 then bHavePowerForAir = true
                                elseif aiBrain[M27Overseer.refbT2NavyNearOurBase] and iFactoryTechLevel >= 2 and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.5 then bHavePowerForAir = true
                                end
                            end
                            --Still try and build air if we have low power if we havent built any (as important to get early bomber and scout)
                            if bHavePowerForAir == false and aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 18 and aiBrain:GetEconomyStored('ENERGY') > 200 then
                                if (M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryAirScout, 1) == true and not(aiBrain[M27AirOverseer.refbHaveOmniVision])) or M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryBomber, 1) == true then
                                    bHavePowerForAir = true
                                end
                            end
                            if bDebugMessages == true then LOG('bHavePowerForAir='..tostring(bHavePowerForAir)..'; iFactoryTechLevel='..iFactoryTechLevel..'; iMinPowerPerTickWantedForAir='..iMinPowerPerTickWantedForAir..'; aiBrain[M27EconomyOverseer.refbStallingEnergy]='..tostring(aiBrain[M27EconomyOverseer.refbStallingEnergy])..'; aiBrain[M27Overseer.refiAIBrainCurrentStrategy]='..aiBrain[M27Overseer.refiAIBrainCurrentStrategy]..'; aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]='..aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]..'; aiBrain:GetEconomyStoredRatio(ENERGY)='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome]='..aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome]..'; AvailableAirAA empty='..tostring(aiBrain[M27AirOverseer.reftAvailableAirAA])..'; Enemy has T2 navy near our base='..tostring(aiBrain[M27Overseer.refbT2NavyNearOurBase])) end


                            if (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill or aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU) and bHavePowerForAir then
                                --Build AirAA if are air units near our ACU, and we are either in 'protect ACU' mode, or we need more than 2 AirAA (as otherwise likely to just be suiciding bombers)
                                if M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirNonScout, M27Utilities.GetACU(aiBrain):GetPosition(), 110, 'Enemy')) == false and (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU or aiBrain[M27AirOverseer.refiAirAANeeded] >= 3) then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Air units near our ACU so want to build airAA') end
                                    iCategoryToBuild = M27UnitInfo.refCategoryAirAA
                                else
                                    bReachedLastOption = true
                                    local bWantTorps = false
                                    if (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyACUKill and M27UnitInfo.IsUnitUnderwater(aiBrain[M27Overseer.refoACUKillTarget])) then
                                        bWantTorps = true
                                    elseif aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyProtectACU then
                                        local oACU = M27Utilities.GetACU(aiBrain)
                                        if M27UnitInfo.IsUnitUnderwater(oACU) then
                                            local iCurPond = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeNavy, oACU:GetPosition())
                                            if M27Navy.tPondDetails[iCurPond] and M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] then
                                                --Does the enemy have any naval units in the pond, or is it a large pond?
                                                if M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] > M27Navy.iMinPondSize * 5 then
                                                    bWantTorps = true
                                                else
                                                    --Does enemy have naval units in this pond?
                                                    if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond]) == false and M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][iCurPond]) == false then
                                                        bWantTorps = true
                                                    end
                                                end
                                            end
                                        end

                                    end
                                    if bWantTorps then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': ACU is underwater so will get torp bombers')
                                        end
                                        iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                        bGetCheapest = true
                                        bIgnoreTechDifferences = true
                                    else
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': No air units near acu so build bombers')
                                        end
                                        iCategoryToBuild = M27UnitInfo.refCategoryBomber
                                    end
                                end
                                iTotalWanted = 100
                            else
                                if iCurrentConditionToTry == 1 then
                                    --High priority engineer builder
                                    if bNeedEngiOfTechLevel == true then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Need engi at this tech level') end
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 2
                                    elseif iFactoryTechLevel >= 3 and iT3AirFactories >= 3 and aiBrain:GetEconomyStored('MASS') > 0 and (aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 or (aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 and not(M27Conditions.HaveLowMass(aiBrain))) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200) then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 1
                                        if not(aiBrain[M27Overseer.refbT2NavyNearOurBase]) and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAllFactories * categories.TECH3) >= 6 then iTotalWanted = 2 end
                                        if not(aiBrain[M27Overseer.refbT2NavyNearOurBase]) and (aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200) then
                                            if aiBrain[M27Overseer.refiModDistFromStartNearestThreat] >= 150 then iTotalWanted = math.max(iTotalWanted, math.ceil(iT3AirFactories * 0.5))
                                            else
                                                iTotalWanted = math.max(iTotalWanted, math.ceil(iT3AirFactories / 3))
                                            end
                                        end
                                    elseif iFactoryTechLevel >= 3 and (aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 or (aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 and not(M27Conditions.HaveLowMass(aiBrain)))) and (aiBrain:GetEconomyStoredRatio('MASS') >= 0.4 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.2 and aiBrain[M27Overseer.refiOurHighestLandFactoryTech] <= 2) and (aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 or aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > 0 or aiBrain[M27EconomyOverseer.refiMexesUpgrading] >= 4) then
                                        iCategoryToBuild = refCategoryEngineer * categories.TECH3
                                        if aiBrain:GetEconomyStoredRatio('MASS') >= 0.6 or aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] > 0 or aiBrain[M27EconomyOverseer.refiMexesUpgrading] >= 4 then
                                            iTotalWanted = math.max(1, math.floor(iT3AirFactories * 0.6))
                                        else
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 2 then
                                    if iFactoryTechLevel < 3 and aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 then
                                        if not(iEngineers) then iEngineers = aiBrain:GetCurrentUnits(refCategoryEngineer) end
                                        if iEngineers < aiBrain[refiInitialEngineersWanted] and (iEngineers <= 2 or M27Conditions.GetLifetimeBuildCount(aiBrain, categories.ENGINEER) < aiBrain[refiInitialEngineersWanted]) then
                                            if bDebugMessages == true then LOG(sFunctionRef..': Want to build engineers for initial build order') end
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 3 then  --Emergency defence bombers (get T1 bombers even if can get higher tech unless enemy flak detected), to max of 20% of base and s.t. overall cap on numbers
                                    local iEmergencyRange
                                    if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyTurtle and aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] >= 2 then
                                        --Bomber defence range will be focused on defending firebase from experimentals and indirect threats so will rely on this
                                        local iDistToChokepoint = M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27MapInfo.reftChokepointBuildLocation])
                                        iEmergencyRange = math.min(130 + iDistToChokepoint, math.max(125, aiBrain[M27AirOverseer.refiBomberDefenceModDistance] - 20, iDistToChokepoint + 50))
                                        if bDebugMessages == true then LOG(sFunctionRef..': iDistToChokepoint='..iDistToChokepoint..'; aiBrain[M27AirOverseer.refiBomberDefenceModDistance]='..aiBrain[M27AirOverseer.refiBomberDefenceModDistance]..'; iEmergencyRange='..iEmergencyRange) end
                                    else
                                        iEmergencyRange = math.min(math.max(125, aiBrain[M27AirOverseer.refiBomberDefenceModDistance] - 20), (math.max(aiBrain[M27Overseer.refiDistanceToNearestEnemyBase]*0.225, math.min(225,aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.33))))
                                    end
                                    if bDebugMessages == true then LOG(sFunctionRef..': iEmergencyRange='..iEmergencyRange..'; refiModDistFromStartNearestOutstandingThreat='..aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat]..'; bHavePowerForAir='..tostring(bHavePowerForAir)..'; Energy stored='..aiBrain:GetEconomyStoredRatio('ENERGY')..'; aiBrain[M27AirOverseer.refiBomberDefenceModDistance]='..aiBrain[M27AirOverseer.refiBomberDefenceModDistance]..'; aiBrain[refiOurMassInAirAA]='..aiBrain[M27AirOverseer.refiOurMassInAirAA]..'; aiBrain[M27AirOverseer.refiHighestEnemyAirThreat]='..aiBrain[M27AirOverseer.refiHighestEnemyAirThreat]) end
                                    if aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] <= iEmergencyRange  and (bHavePowerForAir or aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.8) then
                                        --Limit emergency defence if we want to save mass for T3 arti
                                        if iCurT1Bombers <= 70 and iAvailableT3Bombers <= 5 and (iCurT1Bombers <= 30 or not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and (iCurT1Bombers <= 40 or not(aiBrain[M27AirOverseer.refbFarBehindOnAir]) or M27Utilities.GetDistanceBetweenPositions(aiBrain[M27Overseer.reftLocationFromStartNearestThreat], M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) <= math.min(iEmergencyRange, 150)) then

                                            --Does the enemy have air units within a similar distance? If so then build AA first if the AA is closer than the nearest tank
                                            if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27AirOverseer.refiAirAANeeded]='..aiBrain[M27AirOverseer.refiAirAANeeded]..'; Nearby non-scout air units table empty?='..tostring(M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirNonScout, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange - 15, 'Enemy')))) end
                                            local tNearbyEnemyAir = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirNonScout, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange - 15, 'Enemy')
                                            if aiBrain[M27AirOverseer.refiAirAANeeded] > 0 and M27Utilities.IsTableEmpty(tNearbyEnemyAir) == false then
                                                if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] > 0 then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryAirAA
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Will build emergency air aa') end
                                                else
                                                    --Have enemy land and air threats near our base, pick the one that is closest
                                                    local oNearestAir = M27Utilities.GetNearestUnit(tNearbyEnemyAir, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain)
                                                    if M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27Overseer.reftLocationFromStartNearestThreat]) > M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], oNearestAir:GetPosition()) then
                                                        iCategoryToBuild = M27UnitInfo.refCategoryAirAA
                                                        if bDebugMessages == true then LOG(sFunctionRef..': Will build emergency air aa as their air unit is closer than their ground unit') end
                                                    end
                                                end
                                            end

                                            if not(iCategoryToBuild) then
                                                --Do we have any idle bombers? If so then check for if we need torp bombers or AA
                                                if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27AirOverseer.refiPreviousAvailableBombers]='..aiBrain[M27AirOverseer.refiPreviousAvailableBombers]..'; aiBrain[M27AirOverseer.refiTorpBombersWanted]='..aiBrain[M27AirOverseer.refiTorpBombersWanted]..'; iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27Overseer.refbEmergencyMAANeeded]='..tostring(aiBrain[M27Overseer.refbEmergencyMAANeeded])) end
                                                if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] >= 4 or (aiBrain[M27Overseer.refbT2NavyNearOurBase] and aiBrain[M27AirOverseer.refiPreviousAvailableBombers] >= 1) then
                                                    if bDebugMessages == true then LOG(sFunctionRef..'Have at least 4 idle bombers in last cycle or an emergency naval threat with 1 available bomber, Will consider if we want emergency defence torps, airaa, or bombers. aiBrain[M27AirOverseer.refiPreviousAvailableBombers]='..aiBrain[M27AirOverseer.refiPreviousAvailableBombers]..'; aiBrain:GetCurrentUnits(refCategoryBomber)='..aiBrain:GetCurrentUnits(refCategoryBomber)) end
                                                    if (aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0 or aiBrain[M27Overseer.refbT2NavyNearOurBase]) and iFactoryTechLevel >= 2 then
                                                        --Build torp bombers, unless we have more torp bombers than AirAA units and need AirAA units

                                                        iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                                        bGetCheapest = true
                                                        bIgnoreTechDifferences = true
                                                        if bDebugMessages == true then
                                                            LOG(sFunctionRef .. ': Will build emergency torp bomber')
                                                        end
                                                    elseif aiBrain[M27Overseer.refbEmergencyMAANeeded] and aiBrain[M27AirOverseer.refiAirAANeeded] > 0 then
                                                        iCategoryToBuild = refCategoryAirAA
                                                        iTotalWanted = aiBrain[M27AirOverseer.refiAirAANeeded]
                                                        if not (bHavePowerForAir) then
                                                            iTotalWanted = 1
                                                        end
                                                    elseif aiBrain[M27AirOverseer.refiPreviousAvailableBombers] < 80 and (aiBrain[M27AirOverseer.refiPreviousAvailableBombers] < 15 or (aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] <= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.15 and (aiBrain[M27AirOverseer.refiPreviousAvailableBombers] < 25 or aiBrain:GetCurrentUnits(refCategoryBomber) < 80)) or aiBrain:GetCurrentUnits(refCategoryBomber) < 40) then
                                                        --Does the enemy have T2 MAA near our base? If so then want to build higher tech bombers
                                                        local tNearbyT2MAA = aiBrain:GetUnitsAroundPoint(refCategoryMAA * categories.TECH2, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange, 'Enemy')
                                                        if iCurT1Bombers < 80 and M27Utilities.IsTableEmpty(tNearbyT2MAA) or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryBomber * categories.TECH1) <= 10 then
                                                            if bDebugMessages == true then LOG(sFunctionRef..': Will build T1 bombers as <80 prev available and no T2 flak') end
                                                            iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                        else
                                                            local bWantStrat = false
                                                            if iCurT1Bombers >= 80 then bWantStrat = true
                                                            else
                                                                --Are we already building a strat?
                                                                if bDebugMessages == true then LOG(sFunctionRef..': T2 flak nearby so will build t1 bomber but if we dont have a strat building will switch to building a strat') end
                                                                iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                                bWantStrat = true
                                                                if iFactoriesRecorded > 1 then
                                                                    for iFactory = 1, iFactoriesRecorded do
                                                                        oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                                                        if oCurFactory and not (oCurFactory.Dead) then
                                                                            if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == refCategoryBomber and M27UnitInfo.GetUnitTechLevel(oCurFactory) >= 3 then
                                                                                bWantStrat = false
                                                                                break
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                                if bDebugMessages == true then LOG(sFunctionRef..': We either have T2AA nearby or at least 10 T1 bombers so if we arent already building a strat then will build one. bWantStrat='..tostring(bWantStrat)) end
                                                            end
                                                            if bWantStrat then
                                                                if bDebugMessages == true then LOG(sFunctionRef..': Will build highest tech bomber') end
                                                                iCategoryToBuild = refCategoryBomber
                                                            end
                                                        end
                                                    end

                                                    --[[if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] >= 80 then
                                                        if iFactoryTechLevel >= 2 and aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= 80 then
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef .. ': Will build T2 bomber')
                                                            end
                                                            iCategoryToBuild = refCategoryBomber * categories.TECH2
                                                        else
                                                            if aiBrain:GetCurrentUnits(refCategoryBomber) < 250 then
                                                                if bDebugMessages == true then
                                                                    LOG(sFunctionRef .. ': Will build highest tech bomber')
                                                                end
                                                                iCategoryToBuild = refCategoryBomber
                                                            end
                                                        end
                                                    end--]]
                                                else
                                                    --No idle bombers, so decide if we need torps more than we need normal bombers
                                                    if iFactoryTechLevel >= 2 and aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0 then
                                                        if M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryNavalSurface, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange - 15, 'Enemy')) == false then
                                                            iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                                            bGetCheapest = true
                                                            bIgnoreTechDifferences = true
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef .. ': Will build torp bomber')
                                                            end
                                                        end
                                                    end
                                                end
                                                if not(iCategoryToBuild) then
                                                    --Does the enemy have T2 MAA near our base? If so then want to build higher tech bombers
                                                    local tNearbyT2MAA = aiBrain:GetUnitsAroundPoint(refCategoryMAA * categories.TECH2, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange, 'Enemy')
                                                    if bDebugMessages == true then LOG(sFunctionRef..': iCurT1Bombers='..iCurT1Bombers..'; Is nearbyT2MAA empty='..tostring(M27Utilities.IsTableEmpty(tNearbyT2MAA))) end
                                                    if iCurT1Bombers <= 80 and (M27Utilities.IsTableEmpty(tNearbyT2MAA) or iCurT1Bombers <= 10) then
                                                        if bDebugMessages == true then LOG(sFunctionRef..': Will build T1 bomber') end
                                                        iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                    else
                                                        local bWantStrat = false
                                                        if iCurT1Bombers >= 80 then bWantStrat = true
                                                        else
                                                            if bDebugMessages == true then LOG(sFunctionRef..': Will build bomber of our cur tech level='..iFactoryTechLevel..' unless we area lready building a strat') end
                                                            --Are we already building a strat?
                                                            iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                            bWantStrat = true
                                                            if iFactoriesRecorded > 1 then
                                                                for iFactory = 1, iFactoriesRecorded do
                                                                    oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                                                    if oCurFactory and not (oCurFactory.Dead) then
                                                                        if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == refCategoryBomber and M27UnitInfo.GetUnitTechLevel(oCurFactory) >= 3 then
                                                                            bWantStrat = false
                                                                            break
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                        if bDebugMessages == true then LOG(sFunctionRef..': Increased range emergency def: We either have T2AA nearby or at least 10 T1 bombers so if we arent already building a strat then will build one. bWantStrat='..tostring(bWantStrat)) end
                                                        if bWantStrat then
                                                            if bDebugMessages == true then LOG(sFunctionRef..': Will build highest tech bomber possible') end
                                                            iCategoryToBuild = refCategoryBomber
                                                        end
                                                    end
                                                end
                                            end
                                            if bHavePowerForAir then
                                                iTotalWanted = 3 + iFactoryTechLevel
                                            else
                                                iTotalWanted = iFactoryTechLevel
                                            end
                                            if iCategoryToBuild == refCategoryBomber * categories.TECH1 and iFactoryTechLevel >= 3 and iCurT1Bombers >= 3 then
                                                local bWantStrat = false
                                                if iCurT1Bombers >= 80 then bWantStrat = true
                                                else
                                                    local tNearbyT2AA = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryGroundAA * categories.TECH2, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange, 'Enemy')
                                                    if M27Utilities.IsTableEmpty(tNearbyT2AA) == false then
                                                        --Are we not building a strat bomber?
                                                        bWantStrat = true
                                                        if iFactoriesRecorded > 1 then
                                                            for iFactory = 1, iFactoriesRecorded do
                                                                oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                                                if oCurFactory and not (oCurFactory.Dead) then
                                                                    if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == refCategoryBomber and M27UnitInfo.GetUnitTechLevel(oCurFactory) >= 3 then
                                                                        bWantStrat = false
                                                                        break
                                                                    end
                                                                end
                                                            end
                                                        end
                                                        if bDebugMessages == true then
                                                            LOG(sFunctionRef .. ': Have nearby T2AA, if we arent already building a strat then will build one. bWantStrat=' .. tostring(bWantStrat))
                                                        end
                                                    end
                                                end
                                                if bWantStrat then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Will build highest tech bomber possible')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber
                                                end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 4 then --Torp bombers if enemy navy near base
                                    if aiBrain[M27Overseer.refbT2NavyNearOurBase] and (not(aiBrain[M27AirOverseer.refbFarBehindOnAir]) or aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0) and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTorpBomber) < 80 then
                                        iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                        bGetCheapest = true
                                        bIgnoreTechDifferences = true
                                        iTotalWanted = 10
                                    end
                                elseif iCurrentConditionToTry == 5 then --Upgrade air factory regardless of the separate overseer if we are far behind on air and arent mass stalling
                                    if iFactoryTechLevel < 3 and aiBrain[M27Overseer.refiOurHighestAirFactoryTech] >= 3 and (not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and bHavePowerForAir and not(aiBrain[M27EconomyOverseer.refbStallingMass]) and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 300 then
                                        local iCurT3Air = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory * categories.TECH3)
                                        local iNonT3Air = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory - categories.TECH3)
                                        local iAirFactoryUpgrading, iAirFactoryAvailable, bAlreadyUpgradingAirHQ = M27EconomyOverseer.GetTotalUnitsCurrentlyUpgradingAndAvailableForUpgrade(aiBrain, M27UnitInfo.refCategoryAirFactory)
                                        if iNonT3Air == 1 or iCurT3Air >= 3 or (iCurT3Air >= 1 and iAirFactoryUpgrading == 0 and not(M27Conditions.HaveLowMass(aiBrain))) then
                                            bUpgradeFactoryInstead = true
                                        end
                                    end
                                elseif iCurrentConditionToTry == 5 then
                                    --Emergency AA needed, or AirAA due to ACU air snipe concern, or 1-off intie if enemy has air and we dont
                                    if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27Overseer.refbEmergencyMAANeeded]='..tostring(aiBrain[M27Overseer.refbEmergencyMAANeeded])..'; aiBrain[M27AirOverseer.refiAirAANeeded]='..aiBrain[M27AirOverseer.refiAirAANeeded]..'; iFactoryTechLevel='..iFactoryTechLevel..'; aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]='..aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]) end
                                    if (aiBrain[M27Overseer.refbACUVulnerableToAirSnipe] and not(aiBrain[M27AirOverseer.refbHaveAirControl]) and aiBrain[M27AirOverseer.refiOurMassInAirAA] <= 2000) or (aiBrain[M27Overseer.refbEmergencyMAANeeded] and aiBrain[M27AirOverseer.refiAirAANeeded] > 0) or (iFactoryTechLevel == 1 and aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] == 1 and aiBrain[M27AirOverseer.refiHighestEnemyAirThreat] > 0 and M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryAirAA) <= 1) then
                                        iCategoryToBuild = refCategoryAirAA
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Need emergency AA so will build some')
                                        end
                                        iTotalWanted = math.max(1, aiBrain[M27AirOverseer.refiAirAANeeded])
                                        if not (bHavePowerForAir) then
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 6 then --Enemy land experimental - build up bombers to deal with it
                                    if iAvailableT3Bombers <= 7 and (iCurT1Bombers + iAvailableT3Bombers * 15) <= 125 and (iCurT1Bombers <= 50 or not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and M27Conditions.HaveApproachingLandExperimentalThreat(aiBrain) then
                                        iTotalWanted = 5
                                        --Is the experimental underwater?
                                        if M27UnitInfo.IsUnitUnderwater(aiBrain[M27Overseer.refoNearestRangeAdjustedLandExperimental]) and aiBrain[M27Overseer.refiNearestRangeAdjustedLandExperimental] >= 100 then
                                            if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableTorpBombers]) == false and table.getn(aiBrain[M27AirOverseer.reftAvailableTorpBombers]) >= 30 then
                                                --Have enough torp bombers, get some t1 bombers for if it makes it to land
                                                if iCurT1Bombers < 40 then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryBomber * categories.TECH1
                                                end
                                            else
                                                --Only get torp bombers if it's in a big pond (no point if it's in a verysmall river)
                                                local iCurPond = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeNavy, aiBrain[M27Overseer.refoNearestRangeAdjustedLandExperimental]:GetPosition())
                                                local bWantTorpBomber = false
                                                if M27Navy.tPondDetails[iCurPond] and M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] then
                                                    if M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] > math.min(M27Navy.iMinPondSize * 0.5, 150) then
                                                        bWantTorpBomber = true
                                                    end
                                                end
                                                if bWantTorpBomber then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                                    bGetCheapest = true
                                                    bIgnoreTechDifferences = true
                                                else
                                                    if iCurT1Bombers < 80 then
                                                        iCategoryToBuild = M27UnitInfo.refCategoryBomber * categories.TECH1
                                                    end
                                                end
                                            end
                                        else
                                            --Get t1 bombers if dont have many already, or T3 bombers otherwise
                                            if iCurT1Bombers <= 80 then
                                                iCategoryToBuild = M27UnitInfo.refCategoryBomber * categories.TECH1
                                            else
                                                --Get strats if we have fewer than 3
                                                if iFactoryTechLevel >= 3 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryBomber * categories.TECH3) <= 2 then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryBomber
                                                    iTotalWanted = 1
                                                end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 7 then --High priority transport if we have plateaus to expand to and it has been a while and we have reasonabler eco, or we havent built any transports yet and there are lots of high value plateaus
                                    if bDebugMessages == true then LOG(sFunctionRef..': High priority transport builder: iFactoryTechLevel='..iFactoryTechLevel..'; Is plateaus of interest empty='..tostring(M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest]))..'; Time since last had available transport='..GetGameTimeSeconds() - (aiBrain[M27Transport.refiTimeSinceLastHadAvailableTransport] or -300)..'; aiBrain[M27AirOverseer.refiOurMassInAirAA]='..aiBrain[M27AirOverseer.refiOurMassInAirAA]..'; Current transport='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTransport)..'; Is nearest enemy air threat valid='..tostring(M27UnitInfo.IsUnitValid(aiBrain[M27AirOverseer.refoNearestEnemyAirThreat]))..'; Dist to nearest enemy threat='..M27Utilities.GetDistanceBetweenPositions(aiBrain[M27AirOverseer.reftNearestEnemyAirThreat] or {0,0,0}, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])) end
                                    if iFactoryTechLevel >= 3 and M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest]) == false and GetGameTimeSeconds() - (aiBrain[M27Transport.refiTimeSinceLastHadAvailableTransport] or 0) >= 480 and aiBrain[M27AirOverseer.refiOurMassInAirAA] >= 2500 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTransport) == 0 and (not(M27UnitInfo.IsUnitValid(aiBrain[M27AirOverseer.refoNearestEnemyAirThreat])) or M27Utilities.GetDistanceBetweenPositions(aiBrain[M27AirOverseer.reftNearestEnemyAirThreat], M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) >= 150) then
                                        iTotalWanted = 1
                                        iCategoryToBuild = M27UnitInfo.refCategoryTransport - categories.TECH3
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will build T2 transport') end
                                    elseif iFactoryTechLevel == 1 and M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest]) == false and (aiBrain[M27Transport.refiTimeSinceLastHadAvailableTransport] or 0) == 0 then
                                        local iMexesInPlateaus = 0
                                        for iPathingGroup, tNearestMex in aiBrain[M27MapInfo.reftPlateausOfInterest] do
                                            if M27MapInfo.tAllPlateausWithMexes[iPathingGroup][M27MapInfo.subrefPlateauTotalMexCount] >= 4 or M27Utilities.GetDistanceBetweenPositions(tNearestMex, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) <= 300 then
                                                iMexesInPlateaus = iMexesInPlateaus + M27MapInfo.tAllPlateausWithMexes[iPathingGroup][M27MapInfo.subrefPlateauTotalMexCount]
                                            end
                                        end
                                        if iMexesInPlateaus >= 4 then
                                            iTotalWanted = 1
                                            iCategoryToBuild = M27UnitInfo.refCategoryTransport - categories.TECH3
                                            if bDebugMessages == true then LOG(sFunctionRef..': Will build T1 transport as top priority, iMexesInPlateaus='..iMexesInPlateaus) end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 8 then --far behidn on air so little point trying to e.g. rush a strat bomber if we only have the 1 air factory
                                    if aiBrain[M27AirOverseer.refbFarBehindOnAir] then
                                        iCategoryToBuild = refCategoryAirAA
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 9 then
                                    --1-off air scout and air bomber at start of game as top-priority; torp bombers are a top priority if ACU is underwater or torp bombers are needed
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': About to see if in our lifetime we ahve built 0 scouts, bombers, or spy planes. iFactoryTechLevel=' .. iFactoryTechLevel .. '; bomber lifetimecount=' .. M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryBomber * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)))
                                    end
                                    if M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryAirScout, 1) == true and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Never built air scout so building as high priority')
                                        end
                                        iCategoryToBuild = refCategoryAirScout
                                        iTotalWanted = 1
                                    elseif (aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0 or aiBrain[M27Overseer.refbT2NavyNearOurBase]) and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryTorpBomber, 2) then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Lifetime torp bomber count is <2 so will build torp bomber as want torp bombers or have navy near our base')
                                        end
                                        iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                        bGetCheapest = true
                                        bIgnoreTechDifferences = true
                                        iTotalWanted = 2
                                    else
                                        --Torp bombers on standby if not built before and ACU in large body of water (so are prepared for e.g. enemy subs)
                                        local bWantTorpBomber = false
                                        if M27UnitInfo.IsUnitUnderwater(M27Utilities.GetACU(aiBrain)) and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryTorpBomber, 2) then
                                            local oACU = M27Utilities.GetACU(aiBrain)
                                            local iCurPond = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeNavy, oACU:GetPosition())
                                            if M27Navy.tPondDetails[iCurPond] and M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] then
                                                if M27Navy.tPondDetails[iCurPond][M27Navy.subrefPondSize] > M27Navy.iMinPondSize * 5 then
                                                    bWantTorpBomber = true
                                                end
                                            end
                                        end
                                        if bWantTorpBomber then
                                            iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                            bGetCheapest = true
                                            bIgnoreTechDifferences = true
                                            iTotalWanted = 2
                                        else
                                            if M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryBomber, 1) == true then
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': Never built bomber so building as high priority')
                                                end
                                                iCategoryToBuild = refCategoryBomber
                                                iTotalWanted = 1
                                            elseif iFactoryTechLevel >= 3 then
                                                --Want either c. 1 T3 or 5 T2 power before try building these ahead of engineers
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': T3 factory so considering if want a first T3 spy plane or strat')
                                                end
                                                --If enemy has T3 air factory then build asf as top priority in case they try rushing a strat
                                                if (bHavePowerForAir or aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 300) and aiBrain[M27AirOverseer.reftEnemyAirFactoryByTech][3] > 0 and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryAirAA * categories.TECH3, 1) then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryAirAA * categories.TECH3
                                                    iTotalWanted = 1
                                                elseif (bHavePowerForAir or aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 250) and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryAirScout * categories.TECH3, 1) == true and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Never built spy plane so building as high priority')
                                                    end
                                                    iCategoryToBuild = refCategoryAirScout * categories.TECH3
                                                    iTotalWanted = 1
                                                elseif (bHavePowerForAir or aiBrain[M27EconomyOverseer.refiGrossEnergyBaseIncome] >= 275) and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryBomber * categories.TECH3, 1) == true and (aiBrain[M27AirOverseer.refiAirAAWanted] <= 1 or M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirAA * categories.TECH3, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27AirOverseer.refiMaxScoutRadius], 'Enemy'))) then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Never built strat bomber so building as high priority')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber * categories.TECH3
                                                    iTotalWanted = 1
                                                end
                                                if bDebugMessages == true then
                                                    if not (iCategoryToBuild) then
                                                        LOG('Dont have anything to build after doing lifetime build check; lifetime build check for bomer=' .. tostring(M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryBomber * categories.TECH3, 1)) .. '; DOes the enemy have T3 air=' .. tostring(M27Utilities.IsTableEmpty(aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryAirAA * categories.TECH3 + M27UnitInfo.refCategoryGroundAA * categories.TECH3, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27AirOverseer.refiMaxScoutRadius], 'Enemy'))))
                                                    else
                                                        LOG('Have a category to build')
                                                    end
                                                end
                                            elseif iFactoryTechLevel == 1 and aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] >= 500 then
                                                --Increase high priority air scout and t1 bomber to 2 (as engis will be more important for expanding)
                                                if M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryAirScout, 2) == true and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                                    iCategoryToBuild = refCategoryAirScout
                                                elseif aiBrain[M27AirOverseer.refiHighestEnemyAirThreat] <= 0 and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryBomber, 2) == true then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Will build highest tech bomber possible; however as factory tech level is 1 this means we will just build T1 bombers')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber
                                                end
                                            end
                                        end
                                    end


                                elseif iCurrentConditionToTry == 10 then
                                    --Initial engis
                                    if bDebugMessages == true then LOG(sFunctionRef..': iFactoryTech='..iFactoryTechLevel..'; Highest air or land fac='..math.max(aiBrain[M27Overseer.refiOurHighestAirFactoryTech], aiBrain[M27Overseer.refiOurHighestLandFactoryTech])..'; Cur engis of this tech='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))..'; Lifetime engis of htis tech='..M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))) end
                                    if iFactoryTechLevel >= math.min(3, math.max(aiBrain[M27Overseer.refiOurHighestAirFactoryTech], aiBrain[M27Overseer.refiOurHighestLandFactoryTech])) then
                                        local iEngisOfTechBuiltEver = M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel))
                                        if iEngisOfTechBuiltEver <= 5 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < 3 then
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': Lifetime or current engi build count too low, will build engi')
                                            end
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 11 then
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Emergyency air AA check; aiBrain[M27AirOverseer.refiAirAANeeded]=' .. aiBrain[M27AirOverseer.refiAirAANeeded] .. '; aiBrain[M27AirOverseer.refiOurMassInAirAA]=' .. aiBrain[M27AirOverseer.refiOurMassInAirAA] .. '; bHavePowerForAir=' .. tostring(bHavePowerForAir) .. '; aiBrain:GetEconomyStoredRatio(ENERGY)=' .. aiBrain:GetEconomyStoredRatio('ENERGY'))
                                    end
                                    if aiBrain[M27AirOverseer.refiAirAANeeded] > 0 and (aiBrain[M27AirOverseer.refiOurMassInAirAA] <= 50 or (aiBrain[M27AirOverseer.refiOurMassInAirAA] <= 250 * aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] and aiBrain[M27AirOverseer.refiAirAANeeded] >= 3)) and (bHavePowerForAir or aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.8) then
                                        --<=1 interceptor
                                        iCategoryToBuild = refCategoryAirAA
                                        if bHavePowerForAir then
                                            iTotalWanted = aiBrain[M27AirOverseer.refiAirAANeeded]
                                        else
                                            iTotalWanted = math.min(aiBrain[M27AirOverseer.refiAirAANeeded], 2)
                                        end
                                        if aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain) then iTotalWanted = math.min(iTotalWanted, 2) end
                                    end
                                elseif iCurrentConditionToTry == 12 then --No living air scouts - get more if have certain level of mass
                                    if bHavePowerForAir and ((aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 5 and not(aiBrain[M27Overseer.refbDefendAgainstArti])) or not(M27Conditions.HaveLowMass(aiBrain))) and aiBrain[M27AirOverseer.refiOurMassInAirAA] > 75 then
                                        local iCurAirScouts = aiBrain:GetCurrentUnits(refCategoryAirScout)
                                        if not(aiBrain[M27AirOverseer.refbHaveOmniVision]) and (iCurAirScouts == 0 or (iCurAirScouts <= 3 and aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10 and (iCurAirScouts <= 1 or aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] >= 5 or iCurAirScouts < aiBrain:GetCurrentUnits(categories.EXPERIMENTAL) + 1))) then
                                            iCategoryToBuild = refCategoryAirScout
                                            iTotalWanted = 1
                                        end
                                    end

                                elseif iCurrentConditionToTry == 13 then --Signifcant AirAA shortfall
                                    if bDebugMessages == true then LOG(sFunctionRef..': aiBrain[M27AirOverseer.refiAirAANeeded]='..aiBrain[M27AirOverseer.refiAirAANeeded]..'; aiBrain[M27AirOverseer.refiAirAAWanted]='..aiBrain[M27AirOverseer.refiAirAAWanted]..'; M27Team.tSubteamData[aiBrain.M27Subteam][M27Team.subrefiFriendlyAirAAThreat]='..M27Team.tSubteamData[aiBrain.M27Subteam][M27Team.subrefiFriendlyAirAAThreat]..'; aiBrain[M27AirOverseer.refiHighestEnemyAirThreat]='..aiBrain[M27AirOverseer.refiHighestEnemyAirThreat]) end
                                    if bHavePowerForAir and (aiBrain[M27AirOverseer.refiAirAANeeded] >= 2 or (aiBrain[M27AirOverseer.refiAirAAWanted] >= 10 and M27Team.tSubteamData[aiBrain.M27Subteam][M27Team.subrefiFriendlyAirAAThreat] / math.max(aiBrain[M27AirOverseer.refiHighestEnemyAirThreat], 1) < 0.7)) then
                                        --Do we have at least 2 air factories? Then ensure we are always building at least 1 AA unit from one of them
                                        if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirFactory) >= 2 then
                                            iCategoryToBuild = refCategoryAirAA
                                            if iT3AirFactories >= 3 then
                                                iTotalWanted = math.floor(iT3AirFactories * 0.67)
                                                if aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain) then iTotalWanted = math.min(iTotalWanted, 2) end
                                            else iTotalWanted = 1
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 14 then --Gunship higher priority builder
                                    if bHavePowerForAir and aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.5 then
                                        if iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestAirFactoryTech] then
                                            --Have gunships proven very effective?
                                            local iLCWanted = 2
                                            local iMinLevel = 0
                                            if aiBrain[M27AirOverseer.refiGunshipMassKilled] * 0.65 > aiBrain[M27AirOverseer.refiGunshipMassLost] then
                                                iLCWanted = 5
                                                iMinLevel = 1
                                                if aiBrain[M27AirOverseer.refiGunshipMassKilled] * 0.4 > aiBrain[M27AirOverseer.refiGunshipMassLost] then
                                                    iLCWanted = 8
                                                end
                                                if iFactoryTechLevel >= 3 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                                    iLCWanted = iLCWanted * 1.2
                                                    iMinLevel = iMinLevel + 1
                                                end
                                            elseif iFactoryTechLevel >= 3 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                                iLCWanted = iLCWanted + 1
                                            end
                                            if (iLCWanted >= 6 or iMinLevel > 1) and (aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) then
                                                iLCWanted = math.min(iLCWanted, 6)
                                                iMinLevel = math.min(iMinLevel, 1)
                                            end
                                            local iGunshipTechLevel
                                            if EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) then iGunshipTechLevel = 2 else iGunshipTechLevel = iFactoryTechLevel end
                                            if iLCWanted > M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryGunship * M27UnitInfo.ConvertTechLevelToCategory(iGunshipTechLevel)) or (iMinLevel > 0 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryGunship) < iMinLevel) then
                                                iCategoryToBuild = M27UnitInfo.refCategoryGunship
                                                iTotalWanted = 1
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 15 then --2nd strat bomber if first not died yet and dont have any idle bombers; also build 2nd/3rd strat if have more AA than enemy and they lack T3 AA
                                    if iFactoryTechLevel >= 3 and (not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and (M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftBomberEffectiveness][3]) or M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftBomberEffectiveness][3][1]) or M27UnitInfo.IsUnitValid(aiBrain[M27AirOverseer.reftBomberEffectiveness][3][1][M27AirOverseer.subrefoBomber])) then
                                        if iAvailableT3Bombers == 0 or (iAvailableT3Bombers <= 2 and aiBrain[M27AirOverseer.refbHaveAirControl] and not(aiBrain[M27AirOverseer.refbEnemyHasHadCruisersOrT3AA])) then
                                            --1st Bomber still alive - check have lifetime build count <=2
                                            local iLifetimeStratBuildCount = M27Conditions.GetLifetimeBuildCount(aiBrain, refCategoryBomber * categories.TECH3)

                                            if iLifetimeStratBuildCount <= 1 or (iLifetimeStratBuildCount <= 4 and not(aiBrain[M27AirOverseer.refbEnemyHasHadCruisersOrT3AA])) then
                                                iCategoryToBuild = refCategoryBomber
                                                iTotalWanted = 1
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 16 then
                                    --Emergency bomber defence but with less of a unit limitation and with an increased range %
                                    if (iAvailableT3Bombers <= 7 and (iCurT1Bombers + iAvailableT3Bombers * 15) <= 130) and (iCurT1Bombers <= 30 or not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) then
                                        local iEmergencyRange
                                        if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyTurtle and aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] >= 2 then
                                            --Bomber defence range will be focused on defending firebase from experimentals and indirect threats so will rely on this
                                            local iDistToChokepoint = M27Utilities.GetDistanceBetweenPositions(M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27MapInfo.reftChokepointBuildLocation])
                                            iEmergencyRange = math.min(150 + iDistToChokepoint, math.max(140, aiBrain[M27AirOverseer.refiBomberDefenceModDistance], iDistToChokepoint + 95))
                                            if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] >= 5 * aiBrain[M27Overseer.refiEnemyHighestTechLevel] then iEmergencyRange = math.min(iEmergencyRange, iDistToChokepoint + 95) end
                                            if bDebugMessages == true then LOG(sFunctionRef..': iDistToChokepoint='..iDistToChokepoint..'; aiBrain[M27AirOverseer.refiBomberDefenceModDistance]='..aiBrain[M27AirOverseer.refiBomberDefenceModDistance]..'; iEmergencyRange='..iEmergencyRange) end
                                        else
                                            iEmergencyRange = math.min(math.max(125, aiBrain[M27AirOverseer.refiBomberDefenceModDistance] - 20), aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.35)
                                            if aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyEcoAndTech and aiBrain[M27AirOverseer.refiPreviousAvailableBombers <= 3] then
                                                iEmergencyRange = math.min(iEmergencyRange, aiBrain[M27AirOverseer.refiBomberDefenceCriticalThreatDistance])
                                            end
                                        end
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': iEmergencyRange=' .. iEmergencyRange .. '; refiModDistFromStartNearestOutstandingThreat=' .. aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] .. '; bHavePowerForAir=' .. tostring(bHavePowerForAir) .. '; Energy stored=' .. aiBrain:GetEconomyStoredRatio('ENERGY'))
                                        end
                                        if aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] <= iEmergencyRange and (bHavePowerForAir or aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.8) then
                                            --Dont build more bombers for defence if we already have lots available, unless enemy has a land experimental nearby
                                            if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= math.min(15 * aiBrain[M27Overseer.refiEnemyHighestTechLevel], math.max(5 * aiBrain[M27Overseer.refiEnemyHighestTechLevel], aiBrain[M27Overseer.refiHighestEnemyGroundUnitHealth] / 250)) then
                                                --if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] >= 80 then
                                                --[[if iFactoryTechLevel >= 2 and aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= 80 then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Will build T2 bomber')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber * categories.TECH2
                                                else--]]
                                                if iCurT1Bombers >= 100 then
                                                    --Dont want a cap on strat bombers being built
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Will build highest tech bomber')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber
                                                end
                                                --end
                                            else
                                                --Already have lots of bombers so dont want to get more unless enemy has land experimental nearby
                                                if aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= 100 and M27Utilities.IsTableEmpty(aiBrain[M27Overseer.reftEnemyLandExperimentals]) == false then
                                                    local iDistFromExperimentalToBase = 10000
                                                    local iCurDist
                                                    for iUnit, oUnit in aiBrain[M27Overseer.reftEnemyLandExperimentals] do
                                                        if M27UnitInfo.IsUnitValid(oUnit) then
                                                            iCurDist = M27Utilities.GetDistanceBetweenPositions(oUnit:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])
                                                            if iCurDist < iDistFromExperimentalToBase then
                                                                iDistFromExperimentalToBase = iCurDist
                                                            end
                                                        end
                                                    end
                                                    if iDistFromExperimentalToBase <= iEmergencyRange + 40 then
                                                        if iCurT1Bombers <= 80 then
                                                            iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                        else
                                                            iCategoryToBuild = refCategoryBomber
                                                        end
                                                    end
                                                end
                                                --[[
                                                if iFactoryTechLevel >= 2 then
                                                    if iCurT1Bombers <= 80 then
                                                        if bDebugMessages == true then
                                                            LOG(sFunctionRef .. ': <=100 bombers so will buidl T1 bombers')
                                                        end
                                                        iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                    else
                                                        iCategoryToBuild = refCategoryBomber
                                                        if bDebugMessages == true then
                                                            LOG(sFunctionRef .. ': >150 bombers so will build highest tech possible')
                                                        end
                                                    end
                                                else
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Factory tech level is 1 so will just build bombers (so t1 bombers)')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber
                                                end--]]
                                            end
                                        end
                                        if iCategoryToBuild == refCategoryBomber * categories.TECH1 and iFactoryTechLevel >= 3 and iCurT1Bombers >= 3 then
                                            local bWantStrat = false
                                            if iCurT1Bombers >= 80 then bWantStrat = true
                                            else
                                                local tNearbyT2AA = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryGroundAA * categories.TECH2, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], iEmergencyRange, 'Enemy')
                                                if M27Utilities.IsTableEmpty(tNearbyT2AA) == false then
                                                    --Are we not building a strat bomber?
                                                    bWantStrat = true
                                                    if iFactoriesRecorded > 1 then
                                                        for iFactory = 1, iFactoriesRecorded do
                                                            oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                                            if oCurFactory and not (oCurFactory.Dead) then
                                                                if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == refCategoryBomber and M27UnitInfo.GetUnitTechLevel(oCurFactory) >= 3 then
                                                                    bWantStrat = false
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Have nearby T2AA within the increased emergency range, if we arent already building a strat then will build one. bWantStrat=' .. tostring(bWantStrat))
                                                    end
                                                end
                                            end
                                            if bWantStrat then
                                                iCategoryToBuild = refCategoryBomber
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': Will build highest tech bomber possible')
                                                end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 17 then --AirAA needed
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': aiBrain[M27AirOverseer.refiAirAANeeded]=' .. aiBrain[M27AirOverseer.refiAirAANeeded] .. ' so will build airAA if its >0')
                                    end
                                    if bHavePowerForAir and aiBrain[M27AirOverseer.refiAirAANeeded] > 0 then
                                        --will be set to >0 if we have an existing air target that we want to attack (e.g. its on our side of the map) but we can't crush with our airforce
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Need airAA')
                                        end
                                        iCategoryToBuild = refCategoryAirAA
                                        iTotalWanted = aiBrain[M27AirOverseer.refiAirAANeeded]
                                        if aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain) then iTotalWanted = math.min(iTotalWanted, 2) end
                                    end
                                elseif iCurrentConditionToTry == 18 then
                                    --First ever transport
                                    if bHavePowerForAir and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryTransport) <= 0 and M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest]) == false then
                                        iCategoryToBuild = M27UnitInfo.refCategoryTransport
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 19 then
                                    --Engi for first ever transport
                                    if M27Utilities.IsTableEmpty(aiBrain[M27Transport.reftTransportsWaitingForEngi]) == false then
                                        for iTransport, oTransport in aiBrain[M27Transport.reftTransportsWaitingForEngi] do
                                            if M27UnitInfo.GetUnitLifetimeCount(oTransport) == 1 then
                                                iCategoryToBuild = refCategoryEngineer
                                                iTotalWanted = 2
                                                break
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 20 then
                                    if not(aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27Navy.refbEnemyNavyPreventingBuildingNavy] and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTorpBomber) <= 10 then
                                        iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                        bGetCheapest = true
                                        bIgnoreTechDifferences = true
                                        iTotalWanted = 2
                                    end
                                elseif iCurrentConditionToTry == 21 then
                                    --Want 1 idle T1 bomber assuming have at least 30 gross mass income
                                    if not(aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 3 and bHavePowerForAir and aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= 0 and iCurT1Bombers < 150 then
                                        iCategoryToBuild = refCategoryBomber * categories.TECH1
                                        iTotalWanted = 1
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Want at least 1 idle T1 bomber so will build t1 bomber')
                                        end
                                    end
                                elseif iCurrentConditionToTry == 22 then
                                    --Torp bombers, unless need more AA and have more torps than AA
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; bHavePowerForAir=' .. tostring(bHavePowerForAir) .. '; aiBrain[M27AirOverseer.refiTorpBombersWanted]=' .. aiBrain[M27AirOverseer.refiTorpBombersWanted])
                                    end
                                    if not(aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) and bHavePowerForAir and aiBrain[M27AirOverseer.refiTorpBombersWanted] > 0 then
                                        if aiBrain[M27AirOverseer.refiAirAANeeded] > 0 then
                                            local iTorpBombersHave = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTorpBomber)
                                            local iAirAAHave = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirAA)
                                            if iTorpBombersHave > iAirAAHave then
                                                iCategoryToBuild = refCategoryAirAA
                                                iTotalWanted = aiBrain[M27AirOverseer.refiAirAANeeded]
                                            else
                                                iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                                bGetCheapest = true
                                                bIgnoreTechDifferences = true
                                            end
                                        else
                                            iCategoryToBuild = M27UnitInfo.refCategoryTorpBomber
                                            iTotalWanted = aiBrain[M27AirOverseer.refiTorpBombersWanted]
                                            bGetCheapest = true
                                            bIgnoreTechDifferences = true
                                        end
                                    end
                                elseif iCurrentConditionToTry == 23 then --Bombers for air domination
                                    if bHavePowerForAir and aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyAirDominance and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryBomber) < 10 then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Air domination - Want bombers for targets and have fewer than 10 bombers (or in air dominance mode) and condition is later tahn the one checking if airAA needed')
                                        end
                                        iCategoryToBuild = refCategoryBomber
                                        iTotalWanted = 2 --math.max(1, aiBrain[M27AirOverseer.refiBombersWanted])
                                        if aiBrain[M27AirOverseer.refbHaveAirControl] then iTotalWanted = 3 end
                                    end
                                elseif iCurrentConditionToTry == 24 then --More air scouts
                                    if not(aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) and bHavePowerForAir and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) and aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] > 0 then
                                        local iMinScoutsWanted = 2
                                        if aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 12 and M27MapInfo.rMapPlayableArea[3] - M27MapInfo.rMapPlayableArea[1] >= 500 then iMinScoutsWanted = 4 end
                                        if aiBrain:GetCurrentUnits(refCategoryAirScout) < iMinScoutsWanted then
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': Dont have any alive air scouts so will get air scout')
                                            end
                                            iCategoryToBuild = refCategoryAirScout
                                            iTotalWanted = math.min(2, aiBrain[M27AirOverseer.refiExtraAirScoutsWanted])
                                        end
                                    end
                                elseif iCurrentConditionToTry == 25 then --Engineers - initial BO or soon overflowing mass
                                    if not((aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental]) and M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] > 0 or ((aiBrain:GetEconomyStoredRatio('MASS') >= 0.5 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200) and aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] + aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0) then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = math.max(1, aiBrain[M27EngineerOverseer.refiBOInitialEngineersWanted])
                                    end
                                elseif iCurrentConditionToTry == 26 then
                                    --AirAA units if we already have bombers
                                    if not(aiBrain[M27Overseer.refbDefendAgainstArti] and M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27AirOverseer.refiOurMassInAirAA] < (aiBrain[M27Overseer.refiOurHighestAirFactoryTech] * aiBrain[M27Overseer.refiOurHighestAirFactoryTech] + 1) * 50 then
                                        --Dont have much airAA - build AirAA unless we have no bombers and no AirAA needed
                                        if aiBrain[M27AirOverseer.refiAirAANeeded] == 0 and aiBrain:GetCurrentUnits(refCategoryBomber * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < 2 and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] then
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': Bombers are effective at this tech level and no AirAA needed so will build highest tech bomber')
                                            end
                                            iCategoryToBuild = refCategoryBomber
                                        else
                                            iCategoryToBuild = refCategoryAirAA
                                        end
                                    end
                                elseif iCurrentConditionToTry == 27 then
                                    --Transport
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Considering if we want to build a transport. bHavePowerForAir=' .. tostring(bHavePowerForAir) .. '; aiBrain[M27AirOverseer.refiOurMassInAirAA]=' .. aiBrain[M27AirOverseer.refiOurMassInAirAA] .. '; Is table of transports waiting for engis empty=' .. tostring(M27Utilities.IsTableEmpty(aiBrain[M27Transport.reftTransportsWaitingForEngi])))
                                    end
                                    if not((aiBrain[M27Overseer.refbDefendAgainstArti] or aiBrain[M27Overseer.refbPrioritiseExperimental]) and M27Conditions.HaveLowMass(aiBrain)) and bHavePowerForAir and aiBrain[M27AirOverseer.refiOurMassInAirAA] >= 80 and M27Utilities.IsTableEmpty(aiBrain[M27Transport.reftTransportsWaitingForEngi]) then
                                        M27MapInfo.UpdatePlateausToExpandTo(aiBrain, false)
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Is table of plateaus of interest empty=' .. tostring(M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest])))
                                        end
                                        if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftPlateausOfInterest]) == false then
                                            local iTransportsWanted = 1
                                            local iPlateaus = 0
                                            for iPlateauGroup, tSubtable in aiBrain[M27MapInfo.reftPlateausOfInterest] do
                                                iPlateaus = iPlateaus + 1
                                            end
                                            if iPlateaus >= 4 then
                                                iTransportsWanted = 2
                                            end
                                            local iCurTransports = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryTransport)
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': iCurTransports=' .. iCurTransports .. '; iTransportsWanted=' .. iTransportsWanted)
                                            end
                                            if iCurTransports < iTransportsWanted then
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': Will build transport')
                                                end

                                                iCategoryToBuild = M27UnitInfo.refCategoryTransport
                                                iTotalWanted = iTransportsWanted - iCurTransports
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 28 then --Effective gunships - produce more
                                    if bHavePowerForAir and aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.6 then
                                        if iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestAirFactoryTech] then
                                            --Have gunships proven very effective?

                                            local iMinLevel = 0
                                            if aiBrain[M27AirOverseer.refiGunshipMassKilled] > aiBrain[M27AirOverseer.refiGunshipMassLost] then
                                                iMinLevel = 2
                                                if aiBrain[M27AirOverseer.refiGunshipMassKilled] > 500 and aiBrain[M27AirOverseer.refiGunshipMassKilled] * 0.7 > aiBrain[M27AirOverseer.refiGunshipMassLost] then
                                                    iMinLevel = math.max(4, math.min(aiBrain[M27AirOverseer.refiGunshipMassKilled] / 200 * aiBrain[M27Overseer.refiOurHighestAirFactoryTech], 3 * aiBrain[M27AirOverseer.refiGunshipMassKilled] / math.max(1, aiBrain[M27AirOverseer.refiGunshipMassLost])))
                                                end

                                            end
                                            if iMinLevel > 0 then
                                                local iGunshipTechLevel
                                                if EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) then iGunshipTechLevel = 2 else iGunshipTechLevel = iFactoryTechLevel end
                                                local iCurGunships = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryGunship * M27UnitInfo.ConvertTechLevelToCategory(iGunshipTechLevel))
                                                if (aiBrain[M27Overseer.refbDefendAgainstArti]  or aiBrain[M27Overseer.refbPrioritiseExperimental]) and M27Conditions.HaveLowMass(aiBrain) then iMinLevel = math.min(iMinLevel * 0.5, 4) end
                                                if iCurGunships < math.min(12, iMinLevel) then
                                                    iCategoryToBuild = M27UnitInfo.refCategoryGunship
                                                    iTotalWanted = 1
                                                end
                                            end

                                        end
                                    end
                                elseif iCurrentConditionToTry == 29 then --Effective bombers
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Will build bombers if they are effective or we are UEF T2+ factory that hasnt built many t1 bombers; bHavePowerForAir=' .. tostring(bHavePowerForAir) .. '; iFactoryTechLevel=' .. iFactoryTechLevel .. '; Are bombers effective=' .. tostring(aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel]) .. '; Are they really effective=' .. tostring(aiBrain[M27AirOverseer.refbBombersAreReallyEffective][iFactoryTechLevel]) .. '; Do we have low mass=' .. tostring(M27Conditions.HaveLowMass(aiBrain)) .. '; Number of bombers at cur tech level=' .. aiBrain:GetCurrentUnits(refCategoryBomber * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)))
                                    end
                                    if bHavePowerForAir and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true and (not((aiBrain[M27Overseer.refbDefendAgainstArti]  or aiBrain[M27Overseer.refbPrioritiseExperimental])) or not(M27Conditions.HaveLowMass(aiBrain))) and (aiBrain[M27AirOverseer.refbBombersAreReallyEffective][iFactoryTechLevel] or (iFactoryTechLevel == 3 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryBomber * categories.TECH3) <= 2) or (not (M27Conditions.HaveLowMass(aiBrain)) and aiBrain:GetCurrentUnits(refCategoryBomber * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) == 0)) then
                                        --If at T3 and already have 3 available T3 bombers, and have low mass, then dont build

                                        if iFactoryTechLevel < 3 or not(M27Conditions.HaveLowMass(aiBrain)) or iAvailableT3Bombers <= 2 then
                                            if iCurT1Bombers <= 5 and iFactoryTechLevel >= 2 and (M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionUEF or iFactoryTechLevel == 3) and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryBomber * categories.TECH1) <= 5 then
                                                iCategoryToBuild = refCategoryBomber * categories.TECH1
                                                if bDebugMessages == true then LOG(sFunctionRef..': Are either UEF (so want to try t1 bombers ahead of janus first) or are at t3 and havent built many t1 bombers at all (so want some to make sure the t1 mex raids will hapepn periodically)') end
                                            elseif iFactoryTechLevel == 1 then
                                                iCategoryToBuild = refCategoryBomber
                                            elseif iAvailableT3Bombers <= 2 or aiBrain:GetEconomyStoredRatio('MASS') >= 0.4 then
                                                iCategoryToBuild = refCategoryBomber
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': Will build highest tech bomber possible as they are effective')
                                                end
                                            end

                                            if aiBrain[M27AirOverseer.refbBombersAreReallyEffective][iFactoryTechLevel] then
                                                iTotalWanted = 8 - iFactoryTechLevel * 2
                                            else
                                                iTotalWanted = 1
                                                if aiBrain[M27AirOverseer.refbHaveAirControl] then iTotalWanted = 2 end
                                            end
                                        end
                                    end
                                elseif iCurrentConditionToTry == 30 then --AirAA builder
                                    if bHavePowerForAir then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': aiBrain[M27AirOverseer.refiAirAAWanted]=' .. aiBrain[M27AirOverseer.refiAirAAWanted] .. ' so will build airAA if its >0')
                                        end
                                        if (aiBrain[M27AirOverseer.refiAirAAWanted] > 2 and (iFactoryTechLevel >= 3 or not (aiBrain[M27Overseer.refiAIBrainCurrentStrategy] == M27Overseer.refStrategyEcoAndTech))) or (aiBrain[M27AirOverseer.refiAirAAWanted] > 0 and M27Conditions.HaveLowMass(aiBrain) == false) then
                                            iCategoryToBuild = refCategoryAirAA
                                            iTotalWanted = math.max(aiBrain[M27AirOverseer.refiAirAAWanted], 2)
                                            if (aiBrain[M27Overseer.refbDefendAgainstArti]) and M27Conditions.HaveLowMass(aiBrain) then iTotalWanted = math.min(iTotalWanted, 2) end
                                        elseif aiBrain:GetCurrentUnits(refCategoryAirAA) < 2 or iFactoryTechLevel == 3 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirAA * categories.TECH3) < 1 then
                                            iCategoryToBuild = refCategoryAirAA
                                            iTotalWanted = 1
                                        end
                                    end
                                elseif iCurrentConditionToTry == 31 then
                                    --Min of 3 engineers of the current tech level
                                    if iFactoryTechLevel >= 2 and iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) < 3 then
                                        iCategoryToBuild = refCategoryEngineer
                                        iTotalWanted = 1
                                    end
                                elseif iCurrentConditionToTry == 32 then
                                    if bHavePowerForAir and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) and (not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] > 0 and (aiBrain:GetEconomyStored('MASS') > 10 or aiBrain[M27AirOverseer.refiExtraAirScoutsWanted] > 5) then
                                        iCategoryToBuild = refCategoryAirScout
                                        iTotalWanted = aiBrain[M27AirOverseer.refiExtraAirScoutsWanted]
                                    end
                                elseif aiBrain:GetEconomyStored('MASS') > 100 and (not((aiBrain[M27Overseer.refbDefendAgainstArti]  or aiBrain[M27Overseer.refbPrioritiseExperimental])) or not(M27Conditions.HaveLowMass(aiBrain))) then
                                    if iCurrentConditionToTry == 33 then
                                        if bHavePowerForAir and aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted] > 0 then
                                            iCategoryToBuild = refCategoryEngineer
                                            iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreReclaimEngineersWanted]
                                        end
                                    elseif iCurrentConditionToTry == 34 then
                                        --Bomber defence
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Outstanding threat=' .. aiBrain[M27Overseer.refiPercentageOutstandingThreat] .. '; Bobmer defence range=' .. aiBrain[M27AirOverseer.refiBomberDefenceModDistance]..'; aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat]='..aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat])
                                        end
                                        if bHavePowerForAir and ((iFactoryTechLevel == 3 and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true and iAvailableT3Bombers <=2) or aiBrain[M27Overseer.refiModDistFromStartNearestOutstandingThreat] <= aiBrain[M27AirOverseer.refiBomberDefenceModDistance] or (aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] and aiBrain[M27AirOverseer.reftAvailableBombers] == 0 and not(iStrategy == M27Overseer.refStrategyEcoAndTech) and not(iStrategy == M27Overseer.refStrategyTurtle))) then
                                            --If we are dealing with a T2 or lower air factory, do we have many idle bombers?
                                            if iFactoryTechLevel >= 3 or aiBrain[M27AirOverseer.refiPreviousAvailableBombers] <= math.min(10 * aiBrain[M27Overseer.refiEnemyHighestTechLevel], math.max(5 * aiBrain[M27Overseer.refiEnemyHighestTechLevel], aiBrain[M27Overseer.refiHighestEnemyGroundUnitHealth] / 250)) then
                                                --T2 factory specific - want max of 2 idle T2 bombers unless ahve <=4 idle bombers generally
                                                if not(iFactoryTechLevel == 2) or aiBrain[M27AirOverseer.refiPreviousAvailableBombers] < 4 or M27Utilities.IsTableEmpty(EntityCategoryFilterDown(categories.TECH2, aiBrain[M27AirOverseer.reftAvailableBombers])) or table.getn(EntityCategoryFilterDown(categories.TECH2, aiBrain[M27AirOverseer.reftAvailableBombers])) <= 1 then
                                                    iCategoryToBuild = refCategoryBomber
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Want bombers for defence, will build highest tech bomber')
                                                    end
                                                    iTotalWanted = 1
                                                    if aiBrain[M27AirOverseer.refbHaveAirControl] then iTotalWanted = 3 end
                                                end
                                            end
                                        end
                                    elseif M27Conditions.HaveLowMass(aiBrain) == false then
                                        if iCurrentConditionToTry == 35 then
                                            if aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted] > 0 then
                                                iCategoryToBuild = refCategoryEngineer
                                                iTotalWanted = aiBrain[M27EngineerOverseer.refiBOPreSpareEngineersWanted]
                                            end
                                        elseif iCurrentConditionToTry == 36 then --Gunship lower priority builder
                                            if bHavePowerForAir and aiBrain[M27Overseer.refiModDistFromStartNearestThreat] <= aiBrain[M27Overseer.refiDistanceToNearestEnemyBase] * 0.6 then
                                                if iFactoryTechLevel >= aiBrain[M27Overseer.refiOurHighestAirFactoryTech] then
                                                    --Have gunships proven very effective?

                                                    local iMinLevel = 1
                                                    if aiBrain[M27AirOverseer.refiGunshipMassKilled] > aiBrain[M27AirOverseer.refiGunshipMassLost] then
                                                        iMinLevel = 2
                                                        if aiBrain[M27AirOverseer.refiGunshipMassKilled] > 500 then
                                                            iMinLevel = math.max(3, math.min(aiBrain[M27AirOverseer.refiGunshipMassKilled] / 200 * aiBrain[M27Overseer.refiOurHighestAirFactoryTech], 4 * aiBrain[M27AirOverseer.refiGunshipMassKilled] / math.max(1, aiBrain[M27AirOverseer.refiGunshipMassLost])))
                                                        end
                                                    end

                                                    if iMinLevel > 0 then
                                                        local iGunshipTechLevel
                                                        if EntityCategoryContains(categories.SERAPHIM, oFactory.UnitId) then iGunshipTechLevel = 2 else iGunshipTechLevel = iFactoryTechLevel end
                                                        local iCurGunships = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryGunship * M27UnitInfo.ConvertTechLevelToCategory(iGunshipTechLevel))
                                                        if iCurGunships < math.min(15, iMinLevel) then
                                                            iCategoryToBuild = M27UnitInfo.refCategoryGunship
                                                            iTotalWanted = 1
                                                        end
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 37 then
                                            if aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]] < 2 then
                                                iCategoryToBuild = refCategoryEngineer
                                                iTotalWanted = 2 - aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][aiBrain[M27Overseer.refiOurHighestFactoryTechLevel]]
                                            end
                                        elseif iCurrentConditionToTry == 38 then
                                            if bHavePowerForAir and not (iStrategy == M27Overseer.refStrategyEcoAndTech or iStrategy == M27Overseer.refStrategyTurtle) and not (M27Conditions.HaveLowMass(aiBrain)) and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true then
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': Dont have low mass and not ecoing so will build bombers if we have targets for them')
                                                end
                                                local iSpareBombers = iAvailableT3Bombers
                                                if iAvailableT3Bombers == 0 and M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableBombers]) == false then
                                                    iSpareBombers = table.getn(aiBrain[M27AirOverseer.reftAvailableBombers])
                                                end
                                                if iSpareBombers <= 1 then
                                                    --Do we have targets for the bombers?
                                                    if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftBomberTargetShortlist]) == false and (not (aiBrain[M27AirOverseer.refbShortlistContainsLowPriorityTargets]) or aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel]) then
                                                        iCategoryToBuild = refCategoryBomber
                                                        iTotalWanted = 2
                                                        if aiBrain[M27AirOverseer.refbHaveAirControl] then iTotalWanted = 3 end
                                                        if bDebugMessages == true then
                                                            LOG(sFunctionRef .. ': have targets for bombers so will build them, at highest tech possible')
                                                        end
                                                    end
                                                end
                                            end
                                        elseif iCurrentConditionToTry == 39 then
                                            --AirAA if dont ahve air control (rdundancy condition)
                                            if not(aiBrain[M27AirOverseer.refbHaveAirControl]) and bHavePowerForAir and not (iStrategy == M27Overseer.refStrategyEcoAndTech or iStrategy == M27Overseer.refStrategyTurtle) and not (M27Conditions.HaveLowMass(aiBrain)) then
                                                iCategoryToBuild = refCategoryAirAA
                                                iTotalWanted = 10
                                            end
                                        elseif iCurrentConditionToTry == 40 then
                                            --Build spare air scouts
                                            if not (iStrategy == M27Overseer.refStrategyEcoAndTech) and not(aiBrain[M27AirOverseer.refbHaveOmniVision]) then
                                                local iAvailableAirScouts = 0
                                                if M27Utilities.IsTableEmpty(aiBrain[M27AirOverseer.reftAvailableScouts]) == false then
                                                    iAvailableAirScouts = table.getn(aiBrain[M27AirOverseer.reftAvailableScouts])
                                                end
                                                if iAvailableAirScouts <= 2 then
                                                    iTotalWanted = 2 - iAvailableAirScouts
                                                    iCategoryToBuild = refCategoryAirScout
                                                end
                                            end
                                        else
                                            bReachedLastOption = true
                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': iFactoryTechLevel=' .. iFactoryTechLevel .. '; aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel]=' .. tostring(aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel]))
                                            end
                                            if iStrategy == M27Overseer.refStrategyEcoAndTech and aiBrain:GetEconomyStoredRatio('Mass') <= 0.7 then
                                                bTemporaryPause = true
                                                iCategoryToBuild = nil
                                            else
                                                if bHavePowerForAir and not(M27Conditions.HaveLowMass(aiBrain)) and ((aiBrain:GetEconomyStoredRatio('MASS') > 0.4 and aiBrain[M27AirOverseer.refbBombersAreEffective][iFactoryTechLevel] == true and iAvailableT3Bombers <= 7) or aiBrain:GetEconomyStoredRatio('MASS') >= 0.7) and aiBrain:GetEconomyStored('MASS') > 750 then
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': Bombers are effective at our current tech level and we have high mass so will build more even if are ecoing')
                                                    end
                                                    iCategoryToBuild = refCategoryBomber
                                                    iTotalWanted = 80
                                                else
                                                    if bDebugMessages == true then
                                                        LOG(sFunctionRef .. ': No more conditions to try so will stop')
                                                    end
                                                    break
                                                end
                                            end
                                        end
                                    else
                                        bReachedLastOption = true
                                        break
                                    end
                                else
                                    bReachedLastOption = true
                                    break
                                end
                            end

                            --=======NAVAL FACTORY------------------
                        elseif bIsNavalFactory then
                            if oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) then M27Team.tTeamData[aiBrain.M27Team][M27Team.refbHaveNavalShortfall][oFactory[M27Navy.refiAssignedPond]] = true end
                            iTotalWanted = 3 --As are looking at things on a team wide basis and this only checks on an aibrain basis will just try and build lots of the one category
                            if iCurrentConditionToTry == 1 then --Immediate threat to base
                                if M27UnitInfo.IsUnitValid(M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]]) then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Distance of closest enemy unit to our factory='..M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]]:GetPosition())) end
                                    if M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]]:GetPosition()) <= 100 then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Have a nearby threat, will get category appropriate counter. Nearest enemy unit='..M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]].UnitId..M27UnitInfo.GetUnitLifetimeCount(M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]])) end
                                        if EntityCategoryContains(M27UnitInfo.refCategoryNavalSurface + categories.HOVER - categories.ANTINAVY, M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]].UnitId) then
                                            iCategoryToBuild = M27UnitInfo.refCategoryFrigate
                                        else
                                            --If UEF T2+ build cooper otherwise build submersible
                                            if EntityCategoryContains(categories.UEF - categories.TECH1, oFactory.UnitId) then
                                                iCategoryToBuild = M27UnitInfo.refCategoryCooper
                                            else
                                                iCategoryToBuild = M27UnitInfo.refCategorySubmarine - M27UnitInfo.refCategoryMissileShip
                                            end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 2 then
                                if iFactoryTechLevel == 3 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryEngineer * categories.TECH3) == 0 then
                                    iCategoryToBuild = M27UnitInfo.refCategoryEngineer * categories.TECH3
                                    iTotalWanted = 1
                                end
                            elseif iCurrentConditionToTry == 3 then --Antiair if have very little
                                local iAirThreatWanted = aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat] * 0.7
                                local iOurNavalSurfaceThreat = M27Logic.GetCombatThreatRating(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, nil, nil, false, false, false, false, true, false, false)
                                iAirThreatWanted = math.min(iAirThreatWanted, 0.15 * iOurNavalSurfaceThreat)
                                if iOurNavalSurfaceThreat >= 5000 then iAirThreatWanted = math.max(iOurNavalSurfaceThreat * 0.08, iAirThreatWanted) end
                                if aiBrain[M27AirOverseer.refbHaveAirControl] then iAirThreatWanted = iAirThreatWanted * 0.5 end
                                if bDebugMessages == true then LOG(sFunctionRef..': iAirThreatWanted='..iAirThreatWanted..'; iOurNavalSurfaceThreat='..iOurNavalSurfaceThreat..'; Enemy air to ground threat='..aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat]) end
                                if iAirThreatWanted >= 150 then
                                    if iFactoryTechLevel == 1 then
                                        if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                            iAirThreatWanted = math.min(iAirThreatWanted, 300) --Aeon has better AA options
                                        else
                                            iAirThreatWanted = math.min(iAirThreatWanted, 250)
                                        end
                                    end

                                    local iAirThreatHave = M27Logic.GetAirThreatLevel(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, false, true, false, false, nil, nil, nil, nil, false, false)
                                    iAirThreatWanted = iAirThreatWanted - iAirThreatHave
                                    if bDebugMessages == true then LOG(sFunctionRef..': iAirThreatHave='..iAirThreatHave) end
                                    if iAirThreatWanted >= 150 then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will get some naval AA') end
                                        iCategoryToBuild = GetNavalAntiAirCategory(aiBrain, oFactory, iFactoryTechLevel)
                                    end
                                end
                            elseif iCurrentConditionToTry == 4 then --Upgrade to t2 naval fac
                                if bDebugMessages == true then LOG(sFunctionRef..': iFactoryTechLevel='..iFactoryTechLevel..'; Is this the primary factory='..tostring(oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]))..'; this factory='..(oFactory.UnitId or 'nil')..(M27UnitInfo.GetUnitLifetimeCount(oFactory) or 'nil')..'; Primary factory='..(M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]).UnitId or 'nil')..(M27UnitInfo.GetUnitLifetimeCount(M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond])) or 'nil')) end

                                if iFactoryTechLevel == 1 and oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) then
                                    if aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 3 and EntityCategoryContains(categories.AEON, oFactory.UnitId) and (not(M27UnitInfo.IsUnitValid(M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]])) or M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27Team.tTeamData[aiBrain.M27Team][M27Team.refoClosestEnemyNavalUnitByPond][oFactory[M27Navy.refiAssignedPond]]:GetPosition()) >= 350) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Aeon naval fac so want to upgrade factory') end
                                        bUpgradeFactoryInstead = true
                                    else
                                        local iT1LifetimeCountWanted = 8
                                        if EntityCategoryContains(categories.UEF, oFactory.UnitId) then iT1LifetimeCountWanted = 20
                                        elseif EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) then iT1LifetimeCountWanted = 40
                                        end
                                        local iLifetimeBuilt = M27Conditions.GetLifetimeBuildCount(aiBrain, categories.NAVAL)
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef..': iLifetimeBuilt for T1='..iLifetimeBuilt..'; Does enemy have units in the pond: is table of units empty='..tostring(M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])))
                                            if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                                LOG(sFunctionRef..': Does enemy have torp launchers in pond: Is table of units empty='..tostring(M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryTorpedoLauncher, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]))))
                                            end
                                        end

                                        if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                            if M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryTorpedoLauncher, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])) == false then
                                                iT1LifetimeCountWanted = iT1LifetimeCountWanted * 0.25
                                                if bDebugMessages == true then LOG(sFunctionRef..': Enemy has torp launchers so reducing T1 LC needed so can get T2 sooner') end
                                            else
                                                if iT1LifetimeCountWanted > 10 and iLifetimeBuilt < iT1LifetimeCountWanted then
                                                    local tEnemyCombat = EntityCategoryFilterDown(M27UnitInfo.refCategoryAllNavy * categories.DIRECTFIRE + M27UnitInfo.refCategoryAllNavy * categories.ANTINAVY, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                    local iEnemyCombatThreat = 0
                                                    if M27Utilities.IsTableEmpty(tEnemyCombat) == false then
                                                        iEnemyCombatThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemyCombat, false, nil, nil, false, false, false, false, true, false, false)
                                                    end
                                                    --If enemy naval threat minimal then also reduce lifetime count wanted
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Enemy combat threat='..iEnemyCombatThreat..'; If is too low then will reduce t1 lifetime count wanted. Our combat threat='..M27Logic.GetCombatThreatRating(aiBrain,M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])) end
                                                    if iEnemyCombatThreat <= 240 or iEnemyCombatThreat <= M27Logic.GetCombatThreatRating(aiBrain,M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) * 0.2  then
                                                        iT1LifetimeCountWanted = math.min(iT1LifetimeCountWanted * 0.5, 8)
                                                    end
                                                end
                                            end
                                        else
                                            --Enemy has no navy
                                            iT1LifetimeCountWanted = math.min(8, iT1LifetimeCountWanted * 0.35)
                                            if bDebugMessages == true then LOG(sFunctionRef..': Enemy has no navy so reducing T1 LC wanted to '..iT1LifetimeCountWanted) end
                                        end

                                        --Limit based on pond size
                                        iT1LifetimeCountWanted = math.min(iT1LifetimeCountWanted, math.ceil(M27Navy.tPondDetails[oFactory[M27Navy.refiAssignedPond]][M27Navy.subrefPondSize] / 2500))
                                        if bDebugMessages == true then LOG(sFunctionRef..': iT1LifetimeCountWanted='..iT1LifetimeCountWanted..'; Lifetime count='..M27Conditions.GetLifetimeBuildCount(aiBrain, categories.NAVAL)) end
                                        if iFactoryTechLevel < 3 and iLifetimeBuilt >= iT1LifetimeCountWanted then
                                            bUpgradeFactoryInstead = true
                                            if bDebugMessages == true then LOG(sFunctionRef..': Want to upgrade naval fac') end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 5 then --Build a few subs initially if not against aeon (who have torp defense on frigates)
                                if bDebugMessages == true then
                                    LOG(sFunctionRef..': Considering whether to get initial game subs. Factory tech='..iFactoryTechLevel..'; is table of enemy units empty='..tostring(M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]))..'; Is nearest enemy ACU valid='..tostring(M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoLastNearestACU]))..'; Is nearest enemy threat valid='..tostring(M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoNearestThreat])))
                                end
                                if iFactoryTechLevel <= 2 and (not(M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoLastNearestACU])) or not(EntityCategoryContains(categories.AEON, aiBrain[M27Overseer.refoLastNearestACU]))) and (not(M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoNearestThreat])) or not(EntityCategoryContains(categories.AEON, aiBrain[M27Overseer.refoNearestThreat]))) and (M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) or M27Utilities.IsTableEmpty(EntityCategoryFilterDown(categories.AEON, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]))) then
                                    if (iFactoryTechLevel == 2 and not(EntityCategoryContains(categories.UEF + categories.AEON, oFactory.UnitId))) or (iFactoryTechLevel == 1 and not(EntityCategoryContains(categories.CYBRAN, oFactory.UnitId))) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': LC of subs='..M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySubmarine)) end
                                        local iLifetimeBuildCount = M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategorySubmarine)
                                        if (iLifetimeBuildCount == 0 or iLifetimeBuildCount <= 2 and M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]] == false)) and (iFactoryTechLevel == 1 or M27Team.tTeamData[aiBrain.M27Team][M27Team.refiEnemyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] >= 200) then
                                            if bDebugMessages == true then LOG(sFunctionRef..': Have 2 or less lifetime subs so will build another') end
                                            iCategoryToBuild = M27UnitInfo.refCategorySubmarine - M27UnitInfo.refCategoryMissileShip
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 6 then
                                --Frigates if are at tech 1 and dont have min number wanted
                                if iFactoryTechLevel == 1 then
                                    local iCurrentFrigates = 0
                                    local tPondFrigates = EntityCategoryFilterDown(M27UnitInfo.refCategoryFrigate, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if M27Utilities.IsTableEmpty(tPondFrigates) == false then iCurrentFrigates = table.getn(tPondFrigates) end
                                    local iMinFrigatesWanted = math.min(4, math.ceil(M27Navy.tPondDetails[oFactory[M27Navy.refiAssignedPond]][M27Navy.subrefPondSize] / 2500))
                                    if bDebugMessages == true then LOG(sFunctionRef..': iCurrentFrigates='..iCurrentFrigates..'; iMinFrigatesWanted='..iMinFrigatesWanted) end
                                    if iCurrentFrigates <= iMinFrigatesWanted then iCategoryToBuild = M27UnitInfo.refCategoryFrigate end
                                end
                            elseif iCurrentConditionToTry == 7 then --Antisub
                                if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                    local tEnemySubs = EntityCategoryFilterDown(M27UnitInfo.refCategorySubmarine, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if bDebugMessages == true then LOG(sFunctionRef..': Is table of enemy subs empty='..tostring( M27Utilities.IsTableEmpty(tEnemySubs))) end
                                    if M27Utilities.IsTableEmpty(tEnemySubs) == false then
                                        local iEnemySubmersibleThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemySubs, false, nil, nil, false, false, false, false, false, true, false)
                                        if iEnemySubmersibleThreat > 0 then

                                            local iOurAntiNavyThreat = 0
                                            local tOurAntiNavy = EntityCategoryFilterDown(categories.ANTINAVY * categories.MOBILE, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])

                                            if M27Utilities.IsTableEmpty(tOurAntiNavy) == false then
                                                iOurAntiNavyThreat = M27Logic.GetCombatThreatRating(aiBrain, tOurAntiNavy, false, nil, nil, false, false, false, true, false, false, false)
                                            end

                                            if bDebugMessages == true then LOG(sFunctionRef..': iEnemy submersible threat='..iEnemySubmersibleThreat..'; Our antinavy threat='..iOurAntiNavyThreat) end
                                            if iEnemySubmersibleThreat > iOurAntiNavyThreat then
                                                if bDebugMessages == true then LOG(sFunctionRef..': Will build antisubmersible unit') end
                                                GetAntiSubmersibleCategoryToBuild()
                                            end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 8 then --Shield boat (UEF specific)
                                if bDebugMessages == true then LOG(sFunctionRef..': Considering if want shield boat. Factory Tech level='..iFactoryTechLevel..'; Energy net base income='..aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome]..'; Is factory uef='..tostring(EntityCategoryContains(categories.UEF, oFactory.UnitId))..' friendly naval threat in pond='..(M27Team.tTeamData[aiBrain.M27Team][M27Team.refiFriendlyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] or 'nil')) end
                                if iFactoryTechLevel >= 2 and EntityCategoryContains(categories.UEF, oFactory.UnitId) and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 18 then
                                    --Do we have enough surface threat to justify getting shield boat?
                                    if M27Team.tTeamData[aiBrain.M27Team][M27Team.refiFriendlyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] >= 2500 then
                                        local iShieldBoatsWanted = M27Navy.GetShieldBoatsWanted(aiBrain, oFactory)
                                        local iExistingShieldBoats = 0
                                        local tExistingShieldBoats = EntityCategoryFilterDown(M27UnitInfo.refCategoryShieldBoat, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                        if M27Utilities.IsTableEmpty(tExistingShieldBoats) == false then
                                            iExistingShieldBoats = table.getn(tExistingShieldBoats)
                                        end
                                        if bDebugMessages == true then LOG(sFunctionRef..': iExistingShieldBoats='..iExistingShieldBoats..'; iShieldBoatsWanted='..iShieldBoatsWanted) end
                                        if iShieldBoatsWanted > iExistingShieldBoats and iExistingShieldBoats <= 1 then
                                            iCategoryToBuild = M27UnitInfo.refCategoryShieldBoat
                                            iTotalWanted = math.min(iTotalWanted, iShieldBoatsWanted - iExistingShieldBoats)
                                            if bDebugMessages == true then LOG(sFunctionRef..': Will try and build shield boat. iTotalWanted='..iTotalWanted) end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 9 then --Stealth boat (cybran specific)
                                if iFactoryTechLevel >= 2 and EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 13 and not(aiBrain[M27AirOverseer.refbEnemyHasOmniVision]) then
                                    local tT2PlusNavy = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalSurface - categories.TECH1 - M27UnitInfo.refCategoryStealthBoat, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if M27Utilities.IsTableEmpty(tT2PlusNavy) == false then
                                        local iT2PlusNavy = table.getn(tT2PlusNavy)
                                        if bDebugMessages == true then LOG(sFunctionRef..': Considering if want to build stealth boat. iT2PlusNavy='..iT2PlusNavy) end
                                        if iT2PlusNavy >= 2 then
                                            local tExistingStealthBoats = EntityCategoryFilterDown(M27UnitInfo.refCategoryStealthBoat, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            if bDebugMessages == true then LOG(sFunctionRef..': Is table of existing stealth boats empty='..tostring(M27Utilities.IsTableEmpty(tExistingStealthBoats))) end
                                            if M27Utilities.IsTableEmpty(tExistingStealthBoats) then
                                                iCategoryToBuild = M27UnitInfo.refCategoryStealthBoat
                                                iTotalWanted = 1
                                            end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 10 then
                                --Insufficient surface threat
                                if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                    local tEnemySurfaceNavy = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalSurface, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if M27Utilities.IsTableEmpty(tEnemySurfaceNavy) == false then
                                        local iEnemySurfaceThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemySurfaceNavy, false, nil, nil, false, false, false, false, true, false, false)
                                        if bDebugMessages == true then LOG(sFunctionRef..': Enemy surface naval threat='..iEnemySurfaceThreat) end
                                        if iEnemySurfaceThreat >= 500 then
                                            local iOurNavalThreat =   M27Logic.GetCombatThreatRating(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, nil, nil, false, false, false, false, true, false, false)
                                            if bDebugMessages == true then LOG(sFunctionRef..': Considering if need surface production. iOurNavalThreat='..iOurNavalThreat) end
                                            if iOurNavalThreat < iEnemySurfaceThreat then
                                                iCategoryToBuild = GetNavalSurfaceCombatCategory(aiBrain, oFactory, iFactoryTechLevel)
                                            end
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 11 then --Cruisers if have none and lack air control
                                if iFactoryTechLevel >= 2 and not(aiBrain[M27AirOverseer.refbHaveAirControl]) and aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat] >= 400 and (aiBrain[M27AirOverseer.reftEnemyAirFactoryByTech][2] + aiBrain[M27AirOverseer.reftEnemyAirFactoryByTech][3]) > 0 and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryCruiserCarrier, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])) then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Dont have any cruisers or carriers so will build one') end
                                    iCategoryToBuild = M27UnitInfo.refCategoryCruiser
                                end
                            elseif iCurrentConditionToTry == 12 then --Destroyer if have none
                                if bDebugMessages == true then LOG(sFunctionRef..': Is table filtered to destroyers empty='..tostring(M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])))) end
                                if iFactoryTechLevel >= 2 and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])) then
                                    iCategoryToBuild = M27UnitInfo.refCategoryDestroyer
                                end
                            elseif iCurrentConditionToTry == 13 then --Cruiser if have none (previous condition was if dont ahve air control)
                                if iFactoryTechLevel >= 2 and aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat] >= 200 and (aiBrain[M27AirOverseer.reftEnemyAirFactoryByTech][2] + aiBrain[M27AirOverseer.reftEnemyAirFactoryByTech][3]) > 0 and M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27UnitInfo.refCategoryCruiserCarrier, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])) then
                                    if bDebugMessages == true then LOG(sFunctionRef..': Dont have any cruisers or carriers so will build one') end
                                    iCategoryToBuild = M27UnitInfo.refCategoryCruiser
                                end
                            elseif iCurrentConditionToTry == 14 then --Shield boat (UEF specific) - similar to above but removes the cap on shield boats wanted and reduces power requirement
                                if iFactoryTechLevel >= 2 and EntityCategoryContains(categories.UEF, oFactory.UnitId) and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 15 then
                                    local iShieldBoatsWanted = M27Navy.GetShieldBoatsWanted(aiBrain, oFactory)
                                    local iExistingShieldBoats = 0
                                    local tExistingShieldBoats = EntityCategoryFilterDown(M27UnitInfo.refCategoryShieldBoat, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if M27Utilities.IsTableEmpty(tExistingShieldBoats) == false then
                                        iExistingShieldBoats = table.getn(tExistingShieldBoats)
                                    end
                                    if iShieldBoatsWanted > iExistingShieldBoats and (iExistingShieldBoats < 3 or not(M27Conditions.HaveLowMass(aiBrain))) then
                                        iCategoryToBuild = M27UnitInfo.refCategoryShieldBoat
                                        iTotalWanted = math.min(iTotalWanted, iShieldBoatsWanted - iExistingShieldBoats)
                                    end
                                end
                            elseif iCurrentConditionToTry == 15 then --Build whichever we're furthest behind on - antisubmersible, or surface
                                if oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) then M27Team.tTeamData[aiBrain.M27Team][M27Team.refbHaveNavalShortfall][oFactory[M27Navy.refiAssignedPond]] = false end
                                local iMaxThreatRatioWanted = 2.5
                                if M27Conditions.HaveLowMass(aiBrain) then iMaxThreatRatioWanted = 1.5 end
                                --Decide which threat type has the greatest shortfall
                                local tEnemySurfaceNavy = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalSurface, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                local iEnemySurfaceThreat = 0
                                local iOurNavalThreat =   M27Logic.GetCombatThreatRating(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, nil, nil, false, false, false, false, true, false, false)
                                local iEnemySubmersibleThreat = 0
                                local iOurAntiNavyThreat = 0
                                local tOurAntiNavy = EntityCategoryFilterDown(categories.ANTINAVY * categories.MOBILE, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                local tEnemySubs = EntityCategoryFilterDown(M27UnitInfo.refCategorySubmarine, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])

                                --local iSurfaceCategoryToBuild = M27UnitInfo.refCategoryFrigate + M27UnitInfo.refCategoryDestroyer + categories.TECH3 * categories.DIRECTFIRE * M27UnitInfo.refCategoryNavalSurface

                                if M27Utilities.IsTableEmpty(tOurAntiNavy) == false then
                                    iOurAntiNavyThreat = M27Logic.GetCombatThreatRating(aiBrain, tOurAntiNavy, false, nil, nil, false, false, false, true, false, false, false)
                                end
                                if M27Utilities.IsTableEmpty(tEnemySurfaceNavy) == false then
                                    iEnemySurfaceThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemySurfaceNavy, false, nil, nil, false, false, false, false, true, false, false)
                                end
                                if M27Utilities.IsTableEmpty(tEnemySubs) == false then
                                    iEnemySubmersibleThreat = M27Logic.GetCombatThreatRating(aiBrain, tEnemySubs, false, nil, nil, false, false, false, false, false, true, false)
                                end

                                if bDebugMessages == true then LOG(sFunctionRef..': Will work out which threat we are furthest behind on. iMaxThreatRatioWanted='..iMaxThreatRatioWanted..'; iOurAntiNavyThreat='..iOurAntiNavyThreat..'; iEnemySubmiersibleThreat='..iEnemySubmersibleThreat..'; iOurNavalThreat='..iOurNavalThreat..'; iEnemySurfaceThreat='..iEnemySurfaceThreat) end
                                if iMaxThreatRatioWanted * iEnemySurfaceThreat < iOurNavalThreat and iMaxThreatRatioWanted * iEnemySubmersibleThreat < iOurAntiNavyThreat then
                                    --We have enough of each threat type so dont need to build any more
                                    if bDebugMessages == true then LOG(sFunctionRef..': Have enough of each threat type so wont build something based on this') end
                                else
                                    if iOurNavalThreat == 0 or iMaxThreatRatioWanted * iEnemySubmersibleThreat < iOurAntiNavyThreat then
                                        --Want to build surface category
                                        if bDebugMessages == true then LOG(sFunctionRef..': Getting naval surface combat category') end
                                        iCategoryToBuild = GetNavalSurfaceCombatCategory(aiBrain, oFactory, iFactoryTechLevel)
                                    elseif iOurAntiNavyThreat == 0 or iMaxThreatRatioWanted * iEnemySurfaceThreat < iOurNavalThreat then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Need antinavy combat') end
                                        GetAntiSubmersibleCategoryToBuild()
                                    else
                                        --Work out which one has the greatest shortfall
                                        if (iMaxThreatRatioWanted * iEnemySubmersibleThreat) / iOurAntiNavyThreat > (iMaxThreatRatioWanted * iEnemySurfaceThreat) / iOurNavalThreat then
                                            --Have greater submersible shortfall than surface shortfall
                                            if bDebugMessages == true then LOG(sFunctionRef..': Antinavy shortfall so getting antinavy combat category') end
                                            GetAntiSubmersibleCategoryToBuild()
                                        else
                                            if bDebugMessages == true then LOG(sFunctionRef..': Bigger surface shortafall tahn antinavy so getting naval surface combat category') end
                                            iCategoryToBuild = GetNavalSurfaceCombatCategory(aiBrain, oFactory, iFactoryTechLevel)
                                        end
                                    end
                                end
                            elseif iCurrentConditionToTry == 16 then --2 destroyers or 1 battlecruiser even if low on mass (unless want t3 arti)
                                if (not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) then
                                    if iFactoryTechLevel >= 2 and M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                        local tCurDestroyers = EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                        local iCurDestroyers = 0
                                        if M27Utilities.IsTableEmpty(tCurDestroyers) == false then
                                            iCurDestroyers = table.getn(tCurDestroyers)
                                        end
                                        if iCurDestroyers < 2 then
                                            iCategoryToBuild = M27UnitInfo.refCategoryDestroyer
                                            iTotalWanted = 1
                                        end
                                    end
                                end
                            elseif not(M27Conditions.HaveLowMass(aiBrain)) and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] > 3 then
                                if iCurrentConditionToTry == 17 then
                                    --Upgrade to T3 in some cases: Do we have control of the pond, and are Aeon or Cybran (who need T3 for better range), or alternatively already have 6 cruisers?
                                    local iCurCruisers = 0
                                    local tCurCruisers = EntityCategoryFilterDown(M27UnitInfo.refCategoryCruiserCarrier, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                    if M27Utilities.IsTableEmpty(tCurCruisers) == false then iCurCruisers = table.getn(tCurCruisers) end

                                    if iFactoryTechLevel < 3 and (oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) or aiBrain:GetEconomyStored('MASS') >= 2000 * iFactoryTechLevel or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10 * iFactoryTechLevel) and
                                            (M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftEnemyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) or iCurCruisers >= 6) and
                                            (aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 8 or (aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 7 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryAllNavy * categories.TECH2) >= 8)) and
                                            (iFactoryTechLevel == 1 or not(EntityCategoryContains(categories.SERAPHIM + categories.UEF, oFactory.UnitId)) or iCurCruisers >= 4 or (iCurCruisers >= 2 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryAllNavy - categories.TECH2) >= 10)) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Enemy has no navy or we have built lots of T2 navy, and we have lots of mass so will upgrade to T2 or T3') end
                                        bUpgradeFactoryInstead = true
                                    end
                                elseif iCurrentConditionToTry == 18 then
                                    --T1 factory - only build if our primary factory is T1 or we are about to overflow
                                    if iFactoryTechLevel == 1 then
                                        if aiBrain:GetEconomyStoredRatio('MASS') >= 0.8 or M27UnitInfo.GetUnitTechLevel(M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond])) == 1 then
                                            if bDebugMessages == true then LOG(sFunctionRef..': About to overflow mass so will build frigate') end
                                            iCategoryToBuild = M27UnitInfo.refCategoryFrigate
                                        end
                                    end
                                elseif iCurrentConditionToTry == 19 then
                                    --Get more AA if we have a shortfall vs enemy air to ground threat (higher thresholds than before)
                                    local iAirThreatWanted = aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat] * 0.85
                                    local iOurNavalSurfaceThreat = M27Logic.GetCombatThreatRating(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, nil, nil, false, false, false, false, true, false, false)
                                    iAirThreatWanted = math.max(math.min(iAirThreatWanted, 0.5 * iOurNavalSurfaceThreat), iOurNavalSurfaceThreat * 0.13)
                                    if aiBrain[M27AirOverseer.refbHaveAirControl] then iAirThreatWanted = iAirThreatWanted * 0.6 end
                                    if iAirThreatWanted >= 150 then
                                        local iAirThreatHave = M27Logic.GetAirThreatLevel(aiBrain, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]], false, false, true, false, false, nil, nil, nil, nil, false, false)
                                        iAirThreatWanted = iAirThreatWanted - iAirThreatHave
                                        if iAirThreatWanted >= 150 then
                                            if bDebugMessages == true then LOG(sFunctionRef..': Dont have low mass, and want more AA. iAirThreatWanted='..iAirThreatWanted..'; iOurNavalSurfaceThreat='..iOurNavalSurfaceThreat..'; Have air control='..tostring(aiBrain[M27AirOverseer.refbHaveAirControl])..'; Air to ground threat='..aiBrain[M27AirOverseer.refiEnemyAirToGroundThreat]..'; iAirThreatHave='..iAirThreatHave) end
                                            iCategoryToBuild = GetNavalAntiAirCategory(aiBrain, oFactory, iFactoryTechLevel)
                                        end
                                    end

                                elseif iFactoryTechLevel >= 2 then
                                    if iCurrentConditionToTry == 20 then --More bombardment units based on number of mexes in range
                                        local iPotentialBombardmentRange = 60
                                        local iBombardmentCategory = M27UnitInfo.refCategoryDestroyer + categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip
                                        local iUnitsPerMexInRange = 1
                                        local sMexDistanceSubref = M27Navy.subrefMexDFDistance
                                        if EntityCategoryContains(categories.UEF + categories.SERAPHIM, oFactory.UnitId) then
                                            local iCurCruisers = 0
                                            local tCurCruisers = EntityCategoryFilterDown(M27UnitInfo.refCategoryCruiserCarrier, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            if M27Utilities.IsTableEmpty(tCurCruisers) == false then iCurCruisers = table.getn(tCurCruisers) end
                                            local bHaveBattleship = false
                                            local tBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalSurface * categories.TECH3 * categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            bHaveBattleship = not(M27Utilities.IsTableEmpty(tBattleships))
                                            if bDebugMessages == true then LOG(sFunctionRef..': Want bombardment category for UEF or Seraphim. iCurCruisers='..iCurCruisers..'; iFactoryTechLevel='..iFactoryTechLevel..'; bHaveBattleship='..tostring(bHaveBattleship)) end
                                            if iCurCruisers >= 10 and iFactoryTechLevel == 2 then
                                                bUpgradeFactoryInstead = true
                                            elseif iCurCruisers < 5 or (iCurCruisers <= 10 and (bHaveBattleship or iFactoryTechLevel == 2)) then
                                                iBombardmentCategory = M27UnitInfo.refCategoryCruiser
                                                iPotentialBombardmentRange = 150
                                                sMexDistanceSubref = M27Navy.subrefMexIndirectDistance
                                            elseif iFactoryTechLevel == 3 then
                                                iBombardmentCategory = categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip
                                                iPotentialBombardmentRange = 128
                                                if EntityCategoryContains(categories.UEF, oFactory.UnitId) then iPotentialBombardmentRange = 150 end
                                            end
                                        elseif iFactoryTechLevel == 3 then
                                            iUnitsPerMexInRange = 0.35
                                            iPotentialBombardmentRange = 128
                                            iBombardmentCategory = categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip
                                            if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                                --Do we already have 1+ missile ships and no battleship? If so then get battleship
                                                iBombardmentCategory = M27UnitInfo.refCategoryMissileShip * categories.TECH3 - categories.SUBMERSIBLE


                                                local iCurMissileShips = 0
                                                local tCurMissileShips = EntityCategoryFilterDown(iBombardmentCategory, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                if M27Utilities.IsTableEmpty(tCurMissileShips) == false then iCurMissileShips = table.getn(tCurMissileShips) end
                                                local bHaveBattleship = false
                                                local tBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryNavalSurface * categories.TECH3 * categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                bHaveBattleship = not(M27Utilities.IsTableEmpty(tBattleships))
                                                if bDebugMessages == true then LOG(sFunctionRef..': Aeon T3 naval factory, bHaveBattleship='..tostring(bHaveBattleship)..'; iCurMissileShips='..iCurMissileShips..'; Number of battleships='..table.getn(tBattleships)) end
                                                if iCurMissileShips >= 1 and not(bHaveBattleship) then
                                                    iBombardmentCategory = categories.BATTLESHIP  - M27UnitInfo.refCategoryMissileShip
                                                    iPotentialBombardmentRange = 110
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Setting bombardment category to be a battleship as we have none') end
                                                elseif iCurMissileShips < 4 then --Missile ship
                                                    iPotentialBombardmentRange = 200
                                                    sMexDistanceSubref = M27Navy.subrefMexIndirectDistance
                                                    if bDebugMessages == true then LOG(sFunctionRef..': No change to default bombardment category (missile navy)') end
                                                elseif table.getn(tBattleships) <= 1 then
                                                    iBombardmentCategory = categories.BATTLESHIP - M27UnitInfo.refCategoryMissileShip
                                                    iPotentialBombardmentRange = 110
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Want battleship as only have one and have lots of missile ships') end
                                                else
                                                    iBombardmentCategory = nil --have 5 missile ships and 2 battleships so dont want to get more bombardment units
                                                end
                                            end
                                        else
                                            if EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                                                iPotentialBombardmentRange = 80
                                            end
                                            if iFactoryTechLevel == 2 and oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) then
                                                local tExistingBombardmentUnits = EntityCategoryFilterDown(iBombardmentCategory, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                local iExistingBombardmentUnits = 0
                                                if M27Utilities.IsTableEmpty(tExistingBombardmentUnits) == false then iExistingBombardmentUnits = table.getn(tExistingBombardmentUnits) end
                                                if bDebugMessages == true then LOG(sFunctionRef..': Want bombardment and have T2 aeon naval fac, iExistingBombardmentUnits='..iExistingBombardmentUnits) end
                                                if iExistingBombardmentUnits >= 5 then
                                                    bUpgradeFactoryInstead = true
                                                end
                                            end
                                        end

                                        if iBombardmentCategory then

                                            local iExistingBombardmentUnits = 0
                                            local tExistingBombardmentUnits = EntityCategoryFilterDown(iBombardmentCategory, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            if M27Utilities.IsTableEmpty(tExistingBombardmentUnits) == false then
                                                iExistingBombardmentUnits = table.getn(tExistingBombardmentUnits)
                                            end

                                            if bDebugMessages == true then
                                                LOG(sFunctionRef .. ': iExistingBombardmentUnits=' .. (iExistingBombardmentUnits or 'nil') .. '; Pond value to us=' .. (aiBrain[M27Navy.reftiPondValueToUs][oFactory[M27Navy.refiAssignedPond]] or 'nil'))
                                            end
                                            if iExistingBombardmentUnits == 0 or iExistingBombardmentUnits <= math.max(iFactoryTechLevel - 1, (aiBrain[M27Navy.reftiPondValueToUs][oFactory[M27Navy.refiAssignedPond]] or 0) * 0.3) then
                                                iCategoryToBuild = iBombardmentCategory
                                            else
                                                --If we already have 2+ battleships and 2+ of the desired bombardment category, enemy has a significant naval threat, we have T3 navy, and the bombardment category contains tech3 units, then get naval combat instead
                                                local bGetSurfaceCombatInstead = false
                                                if iExistingBombardmentUnits >= 2 and iFactoryTechLevel >= 3 and M27Team.tTeamData[aiBrain.M27Team][M27Team.refiEnemyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] >= 4000 then
                                                    local tFriendlyBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattleship,  M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                    if M27Utilities.IsTableEmpty(tFriendlyBattleships) == false then
                                                        if table.getn(tFriendlyBattleships) >= 2 then

                                                            local iOurThreatExcludingBattleships = (M27Team.tTeamData[aiBrain.M27Team][M27Team.refiFriendlyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] or 0) - (M27Logic.GetCombatThreatRating(aiBrain, tFriendlyBattleships, false, nil, nil, nil, false, false, false, true, false, false) or 0)
                                                            if bDebugMessages == true then LOG(sFunctionRef..': We have at least 2 battleships, and enemy has notable naval combat threat; if we dont have at least twice the enemy naval threat excluding our battleships, then will use logic to get combat unit. Threat of friendly battleships='..M27Logic.GetCombatThreatRating(aiBrain, tFriendlyBattleships, false, nil, nil, nil, false, false, false, true, false, false)..'; iOurThreatExcludingBattleships='..iOurThreatExcludingBattleships) end
                                                            if iOurThreatExcludingBattleships < math.max(10000, (M27Team.tTeamData[aiBrain.M27Team][M27Team.refiEnemyNavalThreatByPond][oFactory[M27Navy.refiAssignedPond]] or 0) * 2) then
                                                                bGetSurfaceCombatInstead = true
                                                            end
                                                        end
                                                    end
                                                end
                                                if bDebugMessages == true then LOG(sFunctionRef..': bGetSurfaceCombatInstead='..tostring(bGetSurfaceCombatInstead)) end

                                                --Only set category to build to bombardment category if worth investing more in this pond (note that bombardment category may already be nil though)

                                                --How many mexes are in range?
                                                local iMexesInRange = 0
                                                local tEnemyPosition = M27MapInfo.GetPrimaryEnemyBaseLocation(aiBrain)
                                                local tOurPosition = M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]
                                                if M27Utilities.IsTableEmpty(M27Navy.tPondDetails[oFactory[M27Navy.refiAssignedPond]][M27Navy.subrefPondMexInfo]) == false then
                                                    for iMex, tMexSubtable in M27Navy.tPondDetails[oFactory[M27Navy.refiAssignedPond]][M27Navy.subrefPondMexInfo] do
                                                        if tMexSubtable[sMexDistanceSubref] <= iPotentialBombardmentRange then
                                                            if M27Utilities.GetDistanceBetweenPositions(tMexSubtable[M27Navy.subrefMexLocation], tEnemyPosition) <= M27Utilities.GetDistanceBetweenPositions(tMexSubtable[M27Navy.subrefMexLocation], tOurPosition) then
                                                                iMexesInRange = iMexesInRange + 1
                                                            end
                                                        end
                                                    end
                                                end
                                                if bDebugMessages == true then
                                                    LOG(sFunctionRef .. ': iMexesInRange=' .. iMexesInRange .. '; iUnitsPerMexInRange=' .. iUnitsPerMexInRange)
                                                end
                                                if iExistingBombardmentUnits < iMexesInRange * iUnitsPerMexInRange then
                                                    iCategoryToBuild = iBombardmentCategory
                                                end
                                            end
                                        end
                                    elseif iCurrentConditionToTry == 21 then
                                        --Upgrade to t2 or T3 (lower priority)
                                        if iFactoryTechLevel < 3 and (oFactory == M27Navy.GetPrimaryNavalFactory(aiBrain, oFactory[M27Navy.refiAssignedPond]) or aiBrain:GetEconomyStored('MASS') >= 2000 * iFactoryTechLevel or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10 * iFactoryTechLevel) and (aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 10 or (aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 7 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryAllNavy * categories.TECH2) >= 10)) then
                                            bUpgradeFactoryInstead = true
                                        end
                                    elseif iCurrentConditionToTry == 22 then
                                        --Minimum level of bombardment units
                                        local iExistingLongRange = 0
                                        local iCategoryWanted
                                        if iFactoryTechLevel <= 2 then
                                            iCategoryWanted = M27UnitInfo.refCategoryMissileShip + categories.BATTLESHIP * categories.TECH3
                                            if EntityCategoryContains(categories.CYBRAN, oFactory.UnitId) then
                                                iCategoryWanted = iCategoryWanted + M27UnitInfo.refCategoryDestroyer
                                            end
                                        else
                                            iCategoryWanted = categories.BATTLESHIP * categories.TECH3
                                        end
                                        local tExistingUnits = EntityCategoryFilterDown(iCategoryWanted, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                        if M27Utilities.IsTableEmpty(tExistingUnits) == false then
                                            iExistingLongRange = table.getn(tExistingUnits)
                                        end
                                        if iExistingLongRange == 0 then
                                            iTotalWanted = 1
                                            iCategoryToBuild = iCategoryWanted
                                        end
                                    elseif iCurrentConditionToTry == 23 then --as many destroyers as battleships; as many frigates as destroyers
                                        local iCurFrigates = 0
                                        local iCurDestroyers = 0
                                        local iCurBattleships = 0
                                        if M27Utilities.IsTableEmpty(M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]]) == false then
                                            local tCurFrigates = EntityCategoryFilterDown(M27UnitInfo.refCategoryFrigate, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            if M27Utilities.IsTableEmpty(tCurFrigates) == false then iCurFrigates = table.getn(tCurFrigates) end
                                            local tCurDestroyers = EntityCategoryFilterDown(M27UnitInfo.refCategoryDestroyer, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                            if M27Utilities.IsTableEmpty(tCurDestroyers) == false then iCurDestroyers = table.getn(tCurDestroyers) end
                                            if iFactoryTechLevel == 3 then
                                                local tCurBattleships = EntityCategoryFilterDown(M27UnitInfo.refCategoryBattleship, M27Team.tTeamData[aiBrain.M27Team][M27Team.reftFriendlyUnitsByPond][oFactory[M27Navy.refiAssignedPond]])
                                                if M27Utilities.IsTableEmpty(tCurBattleships) == false then
                                                    iCurBattleships = table.getn(tCurBattleships)
                                                end
                                            end
                                            if iCurDestroyers <= iCurBattleships then iCategoryToBuild = M27UnitInfo.refCategoryDestroyer
                                            elseif iCurFrigates <= iCurDestroyers then iCategoryToBuild = M27UnitInfo.refCategoryFrigate
                                            end
                                        end
                                    elseif aiBrain:GetEconomyStoredRatio('MASS') >= 0.8 then
                                        --(dont use normal 'get surface combat category' to cover the hopefully unlikely scenario that the function returns something we cant build)
                                        iCategoryToBuild = M27UnitInfo.refCategoryFrigate + M27UnitInfo.refCategoryDestroyer + categories.BATTLESHIP
                                    else
                                        bReachedLastOption = true
                                        break
                                    end
                                else
                                    bReachedLastOption = true
                                    break
                                end
                            else
                                bReachedLastOption = true
                                break
                            end
                            --=========QUANTUM GATEWAY======--
                        elseif bIsQuantumGateway then
                            if iCurrentConditionToTry == 1 then
                                --Do we have decent power and at least 7 mass per tick?
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Energy stored=' .. aiBrain:GetEconomyStored('ENERGY') .. '; ratio=' .. aiBrain:GetEconomyStoredRatio('ENERGY') .. '; Net energy income=' .. aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] .. '; Last energy stall=' .. (GetGameTimeSeconds() - (aiBrain[M27EconomyOverseer.refiLastEnergyStall] or -100)))
                                end
                                if (not(aiBrain[M27Overseer.refbDefendAgainstArti]) or not(M27Conditions.HaveLowMass(aiBrain))) and aiBrain:GetEconomyStored('ENERGY') >= 4000 and aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 7 and (aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 or aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 250) and GetGameTimeSeconds() - (aiBrain[M27EconomyOverseer.refiLastEnergyStall] or -100) >= 10 then
                                    --Do we already have at least 100 SACUs?
                                    if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryRASSACU) < 100 then
                                        iCategoryToBuild = M27UnitInfo.refCategoryRASSACU
                                        iTotalWanted = 100
                                    end
                                end
                            else
                                bReachedLastOption = true
                                bTemporaryPause = true
                                iCategoryToBuild = nil
                            end
                        end
                    end

                    if bDebugMessages == true then

                        if iCategoryToBuild == M27UnitInfo.refCategoryAmphibiousCombat then
                            LOG(sFunctionRef .. ': Factory ' .. oFactory.UnitId .. M27UnitInfo.GetUnitLifetimeCount(oFactory) .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; Are going to try and build amphibious units')
                        elseif iCategoryToBuild then
                            LOG(sFunctionRef .. ': iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; Have a category to build that isnt amphibious combat')
                        else
                            LOG(sFunctionRef .. ': iCategoryToBuild is nil; iCurrentConditionToTry=' .. iCurrentConditionToTry)
                        end
                        LOG(sFunctionRef .. ': Gametime=' .. GetGameTimeSeconds())
                    end
                    --=======================Adjustments/overrides to initail category - engineers, indirect and unit cap
                    --See later section for adjustments based on particular blueprints (which includes unit caps other than engi unit cap)
                    --Engineers - Check this is a factory where we want to build engineers and we're not over the cap
                    if iCategoryToBuild == refCategoryEngineer or iCategoryToBuild == refCategoryEngineer * categories.TECH2 or iCategoryToBuild == refCategoryEngineer * categories.TECH3 then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Are trying to build an engineer, will check for factory and tech overrides')
                        end
                        if oFactory[refbFactoryCanBuildEngis] == false then
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': Factory is flagged to not build engineers, so changing category to build to nil')
                            end
                            iCategoryToBuild = nil
                        else
                            local iEngiCategory
                            if iFactoryTechLevel == 1 then
                                iEngiCategory = refCategoryEngineer
                            elseif iFactoryTechLevel == 2 then
                                iEngiCategory = refCategoryEngineer * categories.TECH2 + refCategoryEngineer * categories.TECH3
                            else
                                iEngiCategory = refCategoryEngineer * categories.TECH3
                            end

                            local iExistingEngis = aiBrain:GetCurrentUnits(iEngiCategory)
                            if aiBrain[M27Overseer.refbCloseToUnitCap] then aiBrain[refiEngineerCap] = math.min(aiBrain[refiEngineerCap], 350, 0.35*tonumber(ScenarioInfo.Options.UnitCap)) end

                            if not(bPlateauFactory) or iExistingEngis >= math.min(aiBrain[refiEngineerCap], 250) then

                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': About to check engi cap which willi increase if we have a t3 factory. aiBrain[refiEngineerCap]=' .. (aiBrain[refiEngineerCap] or 'nil') .. '; iFactoryTechLevel=' .. (iFactoryTechLevel or 'nil') .. '; iExistingEngis=' .. (iExistingEngis or 'nil') .. '; aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel]=' .. repru((aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel] or { 'nil' }))..'; bPlateauFactory='..tostring(bPlateauFactory))
                                end
                                if aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 40 then
                                    aiBrain[refiEngineerCap] = 110
                                else
                                    aiBrain[refiEngineerCap] = 70
                                end
                                if iFactoryTechLevel >= 3 then
                                    aiBrain[refiEngineerCap] = aiBrain[refiEngineerCap] * 2
                                end
                                if M27Utilities.IsTableEmpty(aiBrain[M27EngineerOverseer.reftPriorityShieldsToAssist]) == false then
                                    aiBrain[refiEngineerCap] = aiBrain[refiEngineerCap] + math.min(60, table.getn(aiBrain[M27EngineerOverseer.reftPriorityShieldsToAssist]) * 14)
                                end

                                if aiBrain[M27Overseer.refbCloseToUnitCap] then aiBrain[refiEngineerCap] = math.min(aiBrain[refiEngineerCap], 350, 0.35*tonumber(ScenarioInfo.Options.UnitCap)) end

                                if iExistingEngis > aiBrain[refiEngineerCap] and (aiBrain[M27Overseer.refbCloseToUnitCap] or (aiBrain:GetEconomyStoredRatio('MASS') <= 0.5 or aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][iFactoryTechLevel] >= math.max(30, aiBrain[refiEngineerCap] * 0.5) or iFactoryTechLevel < 3)) then
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Are over the engi cap so will set to nil')
                                    end
                                    iCategoryToBuild = nil
                                elseif iExistingEngis > 20 and aiBrain:GetEconomyStoredRatio('MASS') <= 0.5 and aiBrain[M27EngineerOverseer.reftiBOActiveSpareEngineersByTechLevel][iFactoryTechLevel] >= math.max(40, aiBrain[refiEngineerCap] * 0.7) then
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Too many spare engineers so will set to nil')
                                    end
                                    iCategoryToBuild = nil
                                elseif iExistingEngis > aiBrain[reftiEngineerLowMassCap][iFactoryTechLevel] and aiBrain:GetEconomyStored('MASS') <= 50 then
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Over the lower engi cap for if have low mass and have almost none stored so will set to nil')
                                    end
                                    iCategoryToBuild = nil
                                elseif aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] > 1 and iFactoryTechLevel < aiBrain[M27Overseer.refiOurHighestFactoryTechLevel] then
                                    --Dealing with factory below our highest level; Use an engineer cap of the current cap or if lower 20 (i.e. 20 of current and higher tech level)
                                    if iExistingEngis > math.min(aiBrain[refiEngineerCap] * 0.5, 20) then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Cur factory isnt our highest tech factory, and are either exceeding half the cap, or 20. aiBrain[refiEngineerCap]=' .. aiBrain[refiEngineerCap])
                                        end
                                        iCategoryToBuild = nil
                                    end
                                end
                                --Low mass override - dont get more engieners if already have a decent number of that tech level and are stalling
                                if iExistingEngis >= 12 and aiBrain:GetEconomyStoredRatio('MASS') == 0 and M27Utilities.IsTableEmpty(aiBrain[M27Transport.reftTransportsWaitingForEngi]) and aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] < -math.max(aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] * 0.35, 0.6) and (iFactoryTechLevel == 1 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryEngineer * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) >= math.max(6, math.ceil(aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] * 0.5))) then
                                    iCategoryToBuild = nil
                                end
                            end
                        end
                        if bReachedLastOption and (aiBrain:GetEconomyStoredRatio('MASS') >= 0.6 or aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] >= 200) and aiBrain:GetEconomyStoredRatio('ENERGY') >= 0.99 and aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] >= 50 then
                            if bIsLandFactory then
                                iCategoryToBuild = GetLandCombatCategory(aiBrain, oFactory, iFactoryTechLevel, false)
                            elseif bIsAirFactory and bHavePowerForAir then
                                iCategoryToBuild = M27UnitInfo.refCategoryBomber
                            end
                        end
                    end
                    if iCategoryToBuild == refCategoryIndirect then
                        --Set min tech level based on the tech level wanted (so we dont try t1 arti vs t2 PD, and dont try t2 MML against ravagers)
                        if aiBrain[M27Overseer.refiMinIndirectTechLevel] > 1 then
                            if aiBrain[M27Overseer.refiMinIndirectTechLevel] >= 3 then
                                iCategoryToBuild = M27UnitInfo.refCategoryIndirectT3
                            else
                                iCategoryToBuild = M27UnitInfo.refCategoryIndirectT2Plus
                            end
                        end
                        --Override this for UEF and just build mobile artillery instead of the missile launchers in some scenarios
                        if iFactoryTechLevel >= 3 and EntityCategoryContains(M27Utilities.FactionIndexToCategory(M27UnitInfo.refFactionUEF), oFactory.UnitId) then
                            --If enemy has lots of TMD (or just 1 if aeon) then build mobile artillery
                            local tEnemyUnits = aiBrain:GetUnitsAroundPoint(M27UnitInfo.refCategoryTMD, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber], aiBrain[M27Overseer.refiDistanceToNearestEnemyBase], 'Enemy')
                            if M27Utilities.IsTableEmpty(tEnemyUnits) == false and (table.getn(tEnemyUnits) >= 4 or M27Utilities.IsTableEmpty(EntityCategoryFilterDown(M27Utilities.FactionIndexToCategory(M27UnitInfo.refFactionAeon), tEnemyUnits)) == false) then
                                iCategoryToBuild = M27UnitInfo.refCategoryT3MobileArtillery
                            elseif aiBrain[M27Overseer.refbNeedIndirect] and M27Conditions.LifetimeBuildCountLessThan(aiBrain, M27UnitInfo.refCategoryT3MML, 6) then
                                iCategoryToBuild = M27UnitInfo.refCategoryT3MML
                            end
                            --Aeon: If have t3 factory consider shield disruptors
                        elseif iFactoryTechLevel >= 3 and EntityCategoryContains(categories.AEON, oFactory.UnitId) then
                            --Is the nearest threat shielded?
                            if M27Logic.IsTargetUnderShield(aiBrain, aiBrain[M27Overseer.refoNearestThreat], nil, nil, false, true) then
                                local iCurDisrupters = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryShieldDisruptor)
                                local iCurT3Indirect = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryIndirectT3)
                                if iCurDisrupters < iCurT3Indirect and iCurDisrupters <= 5 then
                                    iCategoryToBuild = M27UnitInfo.refCategoryShieldDisruptor
                                end
                            elseif EntityCategoryContains(M27UnitInfo.refCategoryPersonalShield + M27UnitInfo.refCategoryMobileLandShield + M27UnitInfo.refCategoryFixedShield + categories.BUBBLESHIELDSPILLOVERCHECK, aiBrain[M27Overseer.refoNearestThreat].UnitId) then
                                --Want at least 1 shield disrupter
                                local iCurDisrupters = aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryShieldDisruptor)
                                if iCurDisrupters <= 0 then iCategoryToBuild = M27UnitInfo.refCategoryShieldDisruptor end
                            end
                            if bDebugMessages == true then
                                if M27UnitInfo.IsUnitValid(aiBrain[M27Overseer.refoNearestThreat]) then
                                    LOG(sFunctionRef..': Have an Aeon factory, will see if want to build shield disruptor instead of normal indirect. Current disruptors='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryShieldDisruptor)..'; Cur T3 indirect='..aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryIndirectT3)..'; Is nearest enemy under shield='..tostring(M27Logic.IsTargetUnderShield(aiBrain, aiBrain[M27Overseer.refoNearestThreat], nil, nil, false, true))..'; Does nearest threat have a personal shield='..tostring(EntityCategoryContains(M27UnitInfo.refCategoryPersonalShield + M27UnitInfo.refCategoryMobileLandShield + M27UnitInfo.refCategoryFixedShield + categories.BUBBLESHIELDSPILLOVERCHECK, aiBrain[M27Overseer.refoNearestThreat].UnitId))..'; Is our category to build still indirect='..tostring(iCategoryToBuild == refCategoryIndirect)..'; Nearest threat='..(aiBrain[M27Overseer.refoNearestThreat].UnitId..M27UnitInfo.GetUnitLifetimeCount(aiBrain[M27Overseer.refoNearestThreat])))
                                else LOG(sFunctionRef..': Aeon factory considering if nearest threat means should build shield disruptor, but nearest threat not valid')
                                end
                            end
                        end
                    elseif iCategoryToBuild == refCategoryMAA then
                        --Aeon specific - build amphibious MAA if cant path to enemy base with land
                        if not (aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithLand]) and aiBrain[M27MapInfo.refbCanPathToEnemyBaseWithAmphibious] then
                            --If we are at tech3 then want at least 1 T3 MAA since theyre better vs fast moving air units; otherwise if are aeon or seraphim want to only build amphibious AA
                            if (M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionAeon or M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionSeraphim) and (iFactoryTechLevel < 3 or aiBrain:GetCurrentUnits(refCategoryMAA * categories.TECH3) >= 1) then
                                --Exception - have a T1 factory and nearby enemey air threat
                                if iFactoryTechLevel > 1 or not (aiBrain[M27Overseer.refbEmergencyMAANeeded]) then
                                    iCategoryToBuild = refCategoryMAA * categories.HOVER + refCategoryMAA * categories.AMPHIBIOUS
                                end
                            end
                        elseif iFactoryTechLevel >= 3 and not(aiBrain[M27Overseer.refbCloseToUnitCap]) then
                            --Want to get roughly a 2:1 ratio of T2 to T3 MAA (for Cybran want a 5:1 ratio because Cybran T3 MAA sucks)
                            local bGetT2MAA = false
                            --[[if M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionCybran and math.random(1, 6) < 6 then
                                iCategoryToBuild = refCategoryMAA * categories.TECH2
                            elseif math.random(1, 10) < 8 then
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Will build T2 MAA as math.random was <8 out of 10')
                                end
                                iCategoryToBuild = refCategoryMAA * categories.TECH2
                            end--]]
                            if M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionCybran then
                                local iRandom = math.random(1, 8)
                                if bDebugMessages == true then LOG(sFunctionRef..': Deciding whether to get T2 or T3 MAA; iRandom='..iRandom) end
                                if iRandom < 8 then
                                    iCategoryToBuild = refCategoryMAA * categories.TECH2
                                end
                            elseif M27UnitInfo.GetUnitFaction(oFactory) == M27UnitInfo.refFactionAeon then
                                if math.random(1, 6) < 6 then
                                    iCategoryToBuild = refCategoryMAA * categories.TECH2
                                end
                            elseif math.random(1, 4) < 4 then
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Will build T2 MAA')
                                end
                                iCategoryToBuild = refCategoryMAA * categories.TECH2
                            end

                        end
                    elseif iFactoryTechLevel == 3 and (iCategoryToBuild == refCategoryBomber or iCategoryToBuild == refCategoryBomber * categories.TECH3) and aiBrain:GetCurrentUnits(refCategoryBomber * categories.TECH3) >= 25 then
                        --Dont build more bombers unless are going to overflow
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Have lots of T3 bombers already so will set to nil unless have high mass. aiBrain:GetEconomyStoredRatio=' .. aiBrain:GetEconomyStoredRatio('MASS') .. '; aiBrain[M27EconomyOverseer.refiNetMassBaseIncome]=' .. aiBrain[M27EconomyOverseer.refiNetMassBaseIncome])
                        end
                        if aiBrain:GetEconomyStoredRatio('MASS') < 0.5 or (aiBrain:GetEconomyStoredRatio('MASS') <= 0.75 and aiBrain[M27EconomyOverseer.refiNetMassBaseIncome] <= 1) then
                            iCategoryToBuild = nil
                        end
                    elseif bIsAirFactory and iCategoryToBuild and aiBrain[M27Overseer.refbCloseToUnitCap] and M27Utilities.DoesCategoryContainCategory(refCategoryBomber - categories.TECH3, iCategoryToBuild, true) then
                        iCategoryToBuild = refCategoryBomber * categories.TECH3
                    end

                    if bUpgradeFactoryInstead and iFactoryTechLevel < 3 then iCategoryToBuild = M27UnitInfo.refCategoryAllHQFactories end

                    if not (iCategoryToBuild == nil) then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': iConditionToTry=' .. iCurrentConditionToTry .. ': Have a valid category to build, subject to existing construction; bReachedLastOption=' .. tostring(bReachedLastOption))
                            if iCategoryToBuild == refCategoryDFTank then
                                LOG(sFunctionRef .. ': Want to build a DF Tank')
                            end
                        end

                        --Specify speed for tanks and attack bots as some factions have both - superceded by new blueprint priority override system
                        --Tanks - assume want tank not speed; attack bots - assume want speed not tankiness
                        --[[
                        if bGetSlowest == nil then
                            if iCategoryToBuild == refCategoryDFTank then bGetSlowest = true
                            elseif iCategoryToBuild == refCategoryAttackBot then bGetSlowest = false
                            else bGetSlowest = false end
                        end
                        if bGetFastest == nil then
                            if iCategoryToBuild == refCategoryDFTank then bGetFastest = false
                            elseif iCategoryToBuild == refCategoryAttackBot then bGetFastest = true
                            else bGetFastest = false end
                        end

                        if bDebugMessages == true then LOG(sFunctionRef..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
                        --]]

                        --=========Check if we are already building the number wanted
                        if bConsiderUnderConstruction == true then
                            if iTotalLandFactories > iTotalWanted then

                                if iFactoriesRecorded > 1 then
                                    for iFactory = 1, iFactoriesRecorded do
                                        oCurFactory = aiBrain[reftFactoryBuildQueue][iFactory][refoFactory]
                                        if M27UnitInfo.IsUnitValid(oCurFactory) and (not(oCurFactory:GetWorkProgress() == 0) or oCurFactory:IsUnitState('Building')) then
                                            if aiBrain[reftFactoryBuildQueue][iFactory][refiUnitCategoryToBuild] == iCategoryToBuild then
                                                if oCurFactory:IsUnitState('Upgrading') then
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Factory is upgrading so cant be building the desired unit') end
                                                else
                                                    iAlreadyBuilding = iAlreadyBuilding + 1
                                                    if bDebugMessages == true then LOG(sFunctionRef..': Factory '..oCurFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oCurFactory)..' is already building a unit of this category; factory unit state='..M27Logic.GetUnitState(oCurFactory)..'; Factory work progress='..oCurFactory:GetWorkProgress()) end
                                                end
                                            end
                                        end
                                    end
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Number of units of this type already building=' .. iAlreadyBuilding)
                                    end
                                    if iAlreadyBuilding >= iTotalWanted then
                                        bAlreadyBuildingEnough = true
                                    end
                                end
                            end
                        end
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': iAlreadyBuilding=' .. (iAlreadyBuilding or 0) .. '; iTotalWanted=' .. (iTotalWanted or 0) .. '; bAlreadyBuildingEnough=' .. tostring(bAlreadyBuildingEnough))
                        end
                        if bAlreadyBuildingEnough == false then
                            --GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryCondition, oFactory, bGetSlowest, bGetFastest, iOptionalCategoryThatMustBeAbleToBuild, bGetCheapest, bIgnoreTechDifferences)
                            sBPIDToBuild = GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, bGetSlowest, bGetFastest, nil, bGetCheapest, bIgnoreTechDifferences)
                            if bDebugMessages == true then LOG(sFunctionRef..': sBPIDToBuild for iCurrentConditionToTry='..iCurrentConditionToTry..' before adjustments='..(sBPIDToBuild or 'nil')..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)..'; bGetCheapest='..tostring(bGetCheapest)..'; bIgnoreTechDifferences='..tostring(bIgnoreTechDifferences)) end

                            --Basic backup for unlikely unit restriction scenarios:
                            if sBPIDToBuild == nil and M27Utilities.IsTableEmpty(ScenarioInfo.Options.RestrictedCategories) == false then
                                if iCategoryToBuild == M27UnitInfo.refCategoryT3MobileArtillery then
                                    iCategoryToBuild = refCategoryIndirect
                                end
                                sBPIDToBuild = GetBlueprintsThatCanBuildOfCategory(aiBrain, iCategoryToBuild, oFactory, bGetSlowest, bGetFastest)
                            end

                            if bDebugMessages == true then
                                if sBPIDToBuild == nil then
                                    LOG(sFunctionRef .. ': Have no BPID to build so factory cant build any that meet the desired category')
                                else
                                    LOG(sFunctionRef .. ': sBPIDToBuild pre unit cap override=' .. sBPIDToBuild .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; bIsLandFactory=' .. tostring(bIsLandFactory))
                                end
                                if M27Utilities.DoesCategoryContainCategory(iCategoryToBuild, M27UnitInfo.refCategoryEngineer, false) then
                                    LOG('Are building an engineer; current number of engineers that we already have=' .. (iEngineers or 'nil'))
                                else
                                    LOG('Not building an engineer. number of units with the same category we already have=' .. aiBrain:GetCurrentUnits(iCategoryToBuild))
                                end
                            end
                        end
                    elseif bDebugMessages == true then
                        LOG(sFunctionRef .. ': sBPIDToBuild is nil')
                    end
                    if bTemporaryPause == true then
                        --aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] + 1
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': bTemporaryPause is true so wont build anything')
                        end
                        sBPIDToBuild = nil
                        break
                    else
                        iCurrentConditionToTry = iCurrentConditionToTry + 1
                    end

                    --=================Overrides based on blueprint or more generalised categories
                    if sBPIDToBuild then
                        --Dont build units with a combat ability if in norush
                        if M27MapInfo.bNoRushActive and M27MapInfo.iNoRushTimer - GetGameTimeSeconds() >= 120 and (aiBrain:GetEconomyStoredRatio('MASS') <= 0.8 or aiBrain:GetEconomyStoredRatio('ENERGY') < 0.999 or aiBrain[M27EconomyOverseer.refiNetEnergyBaseIncome] <= 5) then
                            if not(EntityCategoryContains(M27UnitInfo.refCategoryEngineer + M27UnitInfo.refCategoryExperimentalLevel, sBPIDToBuild)) then
                                if bDebugMessages == true then LOG(sFunctionRef..': Still have a bit of norush time left so wont try and build non-engineer units') end
                                sBPIDToBuild = nil
                            end
                        end

                        --Unit cap by unit type (engineer is covered above)
                        iUnitToBuildTechLevel = M27UnitInfo.GetUnitIDTechLevel(sBPIDToBuild)
                        if bDebugMessages == true then LOG(sFunctionRef..': Pre unit cap sBPIDToBuild='..(sBPIDToBuild or 'nil')..'; aiBrain[M27Overseer.refbCloseToUnitCap]='..tostring(aiBrain[M27Overseer.refbCloseToUnitCap])..'; bIsNavalFactory='..tostring(bIsNavalFactory)..'; iUnitToBuildTechLevel='..iUnitToBuildTechLevel) end
                        if aiBrain[M27Overseer.refbCloseToUnitCap] and (iUnitToBuildTechLevel <= 1 or (iUnitToBuildTechLevel == 2 and not(bIsNavalFactory))) then
                            sBPIDToBuild = nil
                            if bDebugMessages == true then LOG(sFunctionRef..': Are close to unit cap so wont build unit of this tech level') end
                        else
                            if bIsLandFactory then

                                if EntityCategoryContains(M27UnitInfo.refCategoryDFTank, sBPIDToBuild) then
                                    if iUnitToBuildTechLevel >= 3 then
                                        iUnitCapCategory = M27UnitInfo.refCategoryDFTank * categories.TECH3
                                    elseif iUnitToBuildTechLevel >= 2 then
                                        iUnitCapCategory = M27UnitInfo.refCategoryDFTank - categories.TECH1
                                    else
                                        iUnitCapCategory = M27UnitInfo.refCategoryDFTank
                                    end

                                    if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiDFCap] then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Exceeded the unit cap for DF units of ' .. aiBrain[refiDFCap])
                                        end
                                        sBPIDToBuild = nil
                                    end
                                elseif EntityCategoryContains(refCategoryMAA, sBPIDToBuild) then
                                    if iUnitToBuildTechLevel >= 3 then
                                        iUnitCapCategory = refCategoryMAA * categories.TECH3
                                    elseif iUnitToBuildTechLevel >= 2 then
                                        iUnitCapCategory = refCategoryMAA - categories.TECH1
                                    else
                                        iUnitCapCategory = refCategoryMAA
                                    end

                                    if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiMAACap] then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Exceeded the unit cap for MAA units of ' .. aiBrain[refiMAACap])
                                        end
                                        sBPIDToBuild = nil
                                    end
                                elseif EntityCategoryContains(refCategoryIndirect, sBPIDToBuild) then
                                    if iUnitToBuildTechLevel >= 3 then
                                        iUnitCapCategory = refCategoryIndirect * categories.TECH3
                                    elseif iUnitToBuildTechLevel >= 2 then
                                        iUnitCapCategory = refCategoryIndirect - categories.TECH1
                                    else
                                        iUnitCapCategory = refCategoryIndirect
                                    end

                                    if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiIndirectCap] then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Exceeded the unit cap for indirect units of ' .. aiBrain[refiIndirectCap])
                                        end
                                        sBPIDToBuild = nil
                                    end
                                end
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': DF tanks=' .. aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryDFTank * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; MAA=' .. aiBrain:GetCurrentUnits(refCategoryMAA * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; Indirect=' .. aiBrain:GetCurrentUnits(refCategoryIndirect * M27UnitInfo.ConvertTechLevelToCategory(iFactoryTechLevel)) .. '; DFcap=' .. aiBrain[refiDFCap] .. '; sBPIDToBuild=' .. (sBPIDToBuild or 'nil'))
                                end
                            elseif bIsAirFactory then
                                if EntityCategoryContains(M27UnitInfo.refCategoryAirAA, sBPIDToBuild) then
                                    if iUnitToBuildTechLevel >= 3 then
                                        iUnitCapCategory = M27UnitInfo.refCategoryAirAA * categories.TECH3
                                    elseif iUnitToBuildTechLevel >= 2 then
                                        iUnitCapCategory = M27UnitInfo.refCategoryAirAA - categories.TECH1
                                    else
                                        iUnitCapCategory = M27UnitInfo.refCategoryAirAA
                                    end
                                    if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiAirAACap] then
                                        sBPIDToBuild = nil
                                    end
                                elseif EntityCategoryContains(M27UnitInfo.refCategoryAirScout, sBPIDToBuild) then
                                    if aiBrain[M27AirOverseer.refbHaveOmniVision] then sBPIDToBuild = nil
                                    else
                                        if iUnitToBuildTechLevel >= 3 then
                                            iUnitCapCategory = M27UnitInfo.refCategoryAirScout * categories.TECH3
                                        elseif iUnitToBuildTechLevel >= 2 then
                                            iUnitCapCategory = M27UnitInfo.refCategoryAirScout - categories.TECH1
                                        else
                                            iUnitCapCategory = M27UnitInfo.refCategoryAirScout
                                        end

                                        if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiAirScoutCap] then
                                            sBPIDToBuild = nil
                                        end
                                    end
                                end
                            elseif bIsNavalFactory and sBPIDToBuild then
                                if iUnitToBuildTechLevel <= 2 then
                                    iUnitCapCategory = M27UnitInfo.refCategoryAllNavy - categories.TECH3 - categories.EXPERIMENTAL
                                    if aiBrain:GetCurrentUnits(iUnitCapCategory) > aiBrain[refiNavalT2AndBelowCap] then
                                        sBPIDToBuild = nil
                                    end
                                end

                            end
                        end
                        --Air factory - cap on number of inties/AirAA based on our mass income, or if we are trying to build T1 AirAA and have T3 air factory
                        if sBPIDToBuild and iFactoryTechLevel <= 2 and EntityCategoryContains(M27UnitInfo.refCategoryAirAA, sBPIDToBuild) and (M27Conditions.HaveLowMass(aiBrain) or (aiBrain[M27Overseer.refiOurHighestAirFactoryTech] >= 3 and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryAirAA * categories.TECH3) >= 8)) then
                            --Have low mass and are building AirAA - cancel in some cases
                            if EntityCategoryContains(categories.TECH1, sBPIDToBuild) then
                                if aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirAA) >= 30 then sBPIDToBuild = nil end
                            elseif EntityCategoryContains(categories.TECH2, sBPIDToBuild) and (aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirAA - categories.TECH1) >= 10 or (aiBrain[M27Overseer.refiOurHighestAirFactoryTech] >= 3 and M27Conditions.HaveLowMass(aiBrain) and M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryAirAA - categories.TECH1) >= 8)) then
                                sBPIDToBuild = nil
                            end
                            --Cap asf numbers if we already have a decent number and have low mass and low general mass
                        elseif iFactoryTechLevel == 3 and EntityCategoryContains(M27UnitInfo.refCategoryAirAA * categories.TECH3, sBPIDToBuild) and aiBrain[M27EconomyOverseer.refiGrossMassBaseIncome] <= 10 and M27Conditions.HaveLowMass(aiBrain) and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryAirAA * categories.TECH3) >= 30 and aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryT3Mex) < math.min(4, table.getn(M27MapInfo.tResourceNearStart[aiBrain.M27StartPositionNumber][1])) then
                            sBPIDToBuild = nil
                        end
                    end
                    if bReachedLastOption then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Reached last option so will stop looking')
                        end
                        break
                    else
                        if iCurrentConditionToTry > iMaxLoop then
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': iCurrentCondition exceeds max loop so will abort')
                            end
                            M27Utilities.ErrorHandler('reached max loop determining what to build, need to try and stop sooner for efficiency; bPlateauFactory=' .. tostring(bPlateauFactory) .. '; bIsLandFactory=' .. tostring(bIsLandFactory) .. '; bIsAirFactory=' .. tostring(bIsAirFactory) .. '; M27GrandStrategyRef=' .. aiBrain[M27Overseer.refiAIBrainCurrentStrategy] .. '; iCurrentConditionToTry=' .. iCurrentConditionToTry .. '; iMaxLoop=' .. iMaxLoop .. '; ', true)
                            break
                        end
                    end
                end
            end
        else
            M27Utilities.ErrorHandler('Blueprint is nil')
        end
        if iCategoryToBuild and sBPIDToBuild then
            RecordUnderConstruction(aiBrain, oFactory, iCategoryToBuild)
        else
            RecordUnderConstruction(aiBrain, oFactory, nil)
        end
    end
    if bDebugMessages == true then
        LOG(sFunctionRef .. ': End of code, sBPIDToBuild=' .. (sBPIDToBuild or 'nil'))
    end

    --Special case - Cybran and UEF - if building loyalists or titans, then check if want to switch to bricks/percies

    if sBPIDToBuild == 'url0303' then --Loyalist
        if M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryLandCombat * categories.TECH3) >= 5 then
            aiBrain[reftBlueprintPriorityOverride]['url0303'] = nil --loyalist
            aiBrain[reftBlueprintPriorityOverride]['xrl0305'] = 1 --brick
        end
    elseif sBPIDToBuild == 'uel0303' then --Titan
        if M27Conditions.GetLifetimeBuildCount(aiBrain, M27UnitInfo.refCategoryLandCombat * categories.TECH3) >= 15 then
            aiBrain[reftBlueprintPriorityOverride]['url0303'] = nil --Titan
            aiBrain[reftBlueprintPriorityOverride]['xel0305'] = 1 --Percival
        end
    end


    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    return sBPIDToBuild
end

function RemoveTemporaryFactoryPause(aiBrain, oFactory)
    --Call via forkthread
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'RemoveTemporaryFactoryPause'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
    WaitSeconds(iFactoryDelayBeforeConsiderBuildingAgain)
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    if bDebugMessages == true then LOG(sFunctionRef..': Setting temporary pause to false for factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..'; GameTIme='..GetGameTimeSeconds()) end
    --if not(M27UnitInfo.IsUnitValid(oFactory)) then aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] - 1
    --else

        --if not(oFactory[M27Transport.refiAssignedPlateau]) or oFactory[M27Transport.refiAssignedPlateau] == aiBrain[M27MapInfo.refiOurBasePlateauGroup] then
            aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] - 1
        --end
    --end
    if oFactory then oFactory[refbFactoryTemporaryPauseActive] = false end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function KillIdleFactory(aiBrain, oFactory)
    oFactory:Kill()
    aiBrain[refiTimeOfLastCtrlK] = GetGameTimeSeconds()
end

function FactoryMainOverseerLoop(aiBrain, tAllFactories, iTicksWaited)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'FactoryMainOverseerLoop'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    --local iFactoryCategory = M27UnitInfo.refCategoryAllFactories + M27UnitInfo.refCategoryQuantumGateway
    local sUnitToBuild, oCommandAction, tCommandQueue, bFactoryIsIdle
    local refbUpdatedFactoryUnitTracker = 'M27FactoryUnitTracker'
    local oTrackerLastUnit
    --local tAllFactories = aiBrain:GetListOfUnits(iFactoryCategory, true, true)

    if tAllFactories then
        for iFactory, oFactory in tAllFactories do
            if not(oFactory.Dead) then
                if bDebugMessages == true then LOG(sFunctionRef..': iFactory='..iFactory..'; ID='..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..': Factory unit state='..M27Logic.GetUnitState(oFactory)..'; oFactory[refbFactoryTemporaryPauseActive]='..tostring((oFactory[refbFactoryTemporaryPauseActive] or false))) end
                if not (oFactory:IsUnitState('BeingBuilt')) and not (oFactory[refbFactoryTemporaryPauseActive] == true) then
                    if not (oFactory[M27Transport.refiAssignedPlateau]) then
                        oFactory[M27Transport.refiAssignedPlateau] = M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, oFactory:GetPosition())
                        if bDebugMessages == true then LOG(sFunctionRef..': oFactory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)..' doesnt have an assigned plateau.  Its segment group is '..oFactory[M27Transport.refiAssignedPlateau]..'; base group='..aiBrain[M27MapInfo.refiOurBasePlateauGroup]) end
                        if not (oFactory[M27Transport.refiAssignedPlateau] == aiBrain[M27MapInfo.refiOurBasePlateauGroup]) then
                            --Make sure we have recorded this in the table of factories for the plateau
                            if not(aiBrain[M27MapInfo.reftOurPlateauInformation]) then aiBrain[M27MapInfo.reftOurPlateauInformation] = {} end
                            if not(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]]) then aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]] = {} end
                            if M27Utilities.IsTableEmpty(aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauLandFactories]) then aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauLandFactories] = {} end
                            aiBrain[M27MapInfo.reftOurPlateauInformation][oFactory[M27Transport.refiAssignedPlateau]][M27MapInfo.subrefPlateauLandFactories][oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)] = oFactory
                            if bDebugMessages == true then LOG(sFunctionRef..': Have recorded factory in the plateau information, for plateau group '..oFactory[M27Transport.refiAssignedPlateau]) end
                        end
                    end
                    if not (oFactory:IsUnitState('Building')) and not (oFactory:IsUnitState('Upgrading')) then
                        --and not(oFactory:IsUnitState('Guarding'))
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Factory ' .. oFactory.UnitId .. M27UnitInfo.GetUnitLifetimeCount(oFactory) .. ' doesnt appear to be busy, checking command queue')
                        end
                        if oFactory.GetCommandQueue then
                            tCommandQueue = oFactory:GetCommandQueue()
                            bFactoryIsIdle = false
                            local oLastUnit = oFactory[refoLastUnitBuilt]
                            if M27Utilities.IsTableEmpty(tCommandQueue) == true then
                                bFactoryIsIdle = true
                            else
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': factory has a command queue')
                                end
                                if oFactory:GetFractionComplete() >= 1 and not (oFactory:IsPaused()) then
                                    if oLastUnit and not (oLastUnit.Dead) then
                                        local sUnitID = oLastUnit.UnitId
                                        if not (oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon]) then
                                            M27PlatoonFormer.AllocateNewUnitToPlatoonFromFactory(oLastUnit, oFactory)
                                        else
                                            if oFactory[refFactoryIdleCount] == nil then
                                                oFactory[refFactoryIdleCount] = 0
                                            end
                                            oFactory[refFactoryIdleCount] = oFactory[refFactoryIdleCount] + iTicksWaited
                                            if oFactory[refFactoryIdleCount] > iMaxCyclesBeforeOverride then
                                                if oLastUnit.GetPosition and oFactory.GetPosition then
                                                    if oLastUnit[M27PlatoonFormer.refbJustCleared] == false and not (oLastUnit[M27PlatoonFormer.refbJustBuilt] == true) then
                                                        --Below is a redundancy - hopefully no longer needed given the logic in the platoon former
                                                        if M27Utilities.GetDistanceBetweenPositions(oLastUnit:GetPosition(), oFactory:GetPosition()) >= 2.9 then
                                                            --i.e. land fac is 4x4, so 2x2 from middle, so if do (2^2 + 2^2)^0.5 get just under 2.83, so if distance is >=2.83 the unit is away from the factory; have used distance of 3 to be safe incase unit size affects things
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef .. ': Clearing factory commands and issuing new ones')
                                                                LOG(sFunctionRef .. ': iFactory unit state=' .. M27Logic.GetUnitState(oFactory))
                                                                LOG(sFunctionRef .. ': iFactory=' .. ': Factory command repr=' .. repru(tCommandQueue))
                                                                oCommandAction = tCommandQueue[table.getn(tCommandQueue)] -- Last command
                                                                LOG(sFunctionRef .. ': repr of oCommandAction=' .. repru(oCommandAction))
                                                                LOG(sFunctionRef .. ': oLastUnit state=' .. M27Logic.GetUnitState(oLastUnit))
                                                            end


                                                            --Occassional error where factory thinks its still attached to a unit:
                                                            if oLastUnit and not (oLastUnit.Dead) and oLastUnit.IsUnitState then
                                                                if not (EntityCategoryContains(categories.AIR, sUnitID)) then
                                                                    if oLastUnit.Stop then
                                                                        if bDebugMessages == true then
                                                                            LOG(sFunctionRef .. ': Issuing clear command to unit with lifetime count=' .. M27UnitInfo.GetUnitLifetimeCount(oLastUnit))
                                                                        end
                                                                        oLastUnit:Stop()
                                                                    elseif EntityCategoryContains(M27UnitInfo.refCategoryNavalSurface, sUnitID) then
                                                                        --Do nothing as can sometimes have naval units get stuck
                                                                    else
                                                                        if bDebugMessages == true then
                                                                            LOG(sFunctionRef .. ': Issuing clear command to unit with lifetime count=' .. M27UnitInfo.GetUnitLifetimeCount(oLastUnit) .. ' and ID=' .. sUnitID)
                                                                        end

                                                                        M27Utilities.IssueTrackedClearCommands({ oLastUnit })
                                                                    end
                                                                    if EntityCategoryContains(M27UnitInfo.refCategoryEngineer, oLastUnit.UnitId) then
                                                                        M27EngineerOverseer.ClearEngineerActionTrackers(aiBrain, oLastUnit, true)
                                                                    end
                                                                    if bDebugMessages == true then LOG(sFunctionRef..': About to issue clear factory commands for factory '..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory)) end
                                                                    IssueClearFactoryCommands({ oFactory })
                                                                end
                                                                --bFactoryIsIdle = true
                                                            end
                                                        elseif oLastUnit and not (oLastUnit.Dead) and oLastUnit.GetUnitId and M27Logic.IsUnitIdle(oLastUnit, false, false) == true then
                                                            --FindEmptyPathableAreaNearTarget(aiBrain, oPathingUnit, tStartPosition, iAreaRadius)
                                                            local tTempRallyPoint = M27MapInfo.FindEmptyPathableAreaNearTarget(aiBrain, oLastUnit, oFactory:GetPosition(), 5)
                                                            if bDebugMessages == true then
                                                                LOG(sFunctionRef .. ': tTempRallyPoint=' .. repru(tTempRallyPoint))
                                                                M27Utilities.DrawLocation(tTempRallyPoint)
                                                            end
                                                            IssueMove({ oLastUnit }, tTempRallyPoint)
                                                        end
                                                    end
                                                end
                                            end
                                            if oFactory[refFactoryIdleCount] > 200 then
                                                if bDebugMessages == true then
                                                    M27Utilities.DrawLocation(oFactory:GetPosition())
                                                    LOG(sFunctionRef..': Factory position=' .. repru(oFactory:GetPosition()) .. '; iFactory=' .. iFactory..'; Factory='..oFactory.UnitId..M27UnitInfo.GetUnitLifetimeCount(oFactory))
                                                end
                                                M27Utilities.ErrorHandler('Factory has gone 200 cycles of being stuck - will reset count', true)
                                                oFactory[refFactoryIdleCount] = 1
                                            end
                                        end
                                    end
                                end

                            end
                            if bFactoryIsIdle == true then
                                --If we just built a unit then tell it to be assigned to a platoon
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': About to check if weve already sent last unit for processing')
                                    if not (oLastUnit) then
                                        LOG('Last unit is nil')
                                    elseif oLastUnit.Dead then
                                        LOG('Last unit is dead')
                                    elseif oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon] == nil then
                                        LOG('refbProcessedForPlatoon is nil')
                                    else
                                        LOG('refbProcessedForPlatoon=' .. tostring(oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon]))
                                    end
                                end
                                if oLastUnit and not (oLastUnit.Dead) and not (oLastUnit[M27PlatoonFormer.refbProcessedForPlatoon]) then
                                    M27PlatoonFormer.AllocateNewUnitToPlatoonFromFactory(oLastUnit, oFactory)
                                end
                                oFactory[refFactoryIdleCount] = 0
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': iFactory=' .. iFactory .. ': Has an empty command queue')
                                end
                                if oFactory[refiFactoryUniqueID] then
                                    if aiBrain[reftFactoryBuildQueue] == nil then
                                        aiBrain[reftFactoryBuildQueue] = {}
                                    end
                                    if aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID] == nil then
                                        aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID] = {}
                                    end
                                    aiBrain[reftFactoryBuildQueue][refiFactoryUniqueID][refiUnitCategoryToBuild] = nil
                                end
                                --Set flags for whether can build engis at this factory
                                if iFactory == 1 then
                                    --always want at least 1 factory that can build engis regardless of where it is
                                    oFactory[refbFactoryCanBuildEngis] = true
                                else
                                    if oFactory[refbFactoryCanBuildEngis] == nil then
                                        if oFactory[refiFactoryDistanceToStart] == nil then
                                            oFactory[refiFactoryDistanceToStart] = M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber])
                                        end
                                        if oFactory[refiFactoryDistanceToStart] <= 100 then
                                            oFactory[refbFactoryCanBuildEngis] = true
                                        elseif oFactory[M27Transport.refiAssignedPlateau] == M27MapInfo.GetSegmentGroupOfLocation(M27UnitInfo.refPathingTypeAmphibious, M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) then
                                            oFactory[refbFactoryCanBuildEngis] = false
                                        else
                                            --Plateau factory so still want to build engis
                                            oFactory[refbFactoryCanBuildEngis] = true
                                        end
                                    end
                                end
                                --Ctrl-K T1 land factories near base if have T3 land factories and low mass
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': Deciding if should ctrlK the factory. aiBrain[M27Overseer.refiOurHighestLandFactoryTech]=' .. (aiBrain[M27Overseer.refiOurHighestLandFactoryTech] or 'nil') .. '; Dealing with Tehc1 Land factory=' .. tostring(EntityCategoryContains(M27UnitInfo.refCategoryLandFactory * categories.TECH1, oFactory.UnitId)) .. '; HaveLowMass=' .. tostring(M27Conditions.HaveLowMass(aiBrain)) .. '; Dist to our start=' .. M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]))
                                end
                                if aiBrain[M27Overseer.refiOurHighestLandFactoryTech] >= 3 and EntityCategoryContains(M27UnitInfo.refCategoryLandFactory * categories.TECH1, oFactory.UnitId) and M27Conditions.HaveLowMass(aiBrain) and M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) <= 100 and GetGameTimeSeconds() - (aiBrain[refiTimeOfLastCtrlK] or -1000) >= 15 and (oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup] then
                                    if bDebugMessages == true then
                                        LOG(sFunctionRef .. ': Will kill the factory')
                                    end
                                    KillIdleFactory(aiBrain, oFactory)
                                else
                                    sUnitToBuild = DetermineWhatToBuild(aiBrain, oFactory)
                                    if sUnitToBuild == nil then
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': Setting temporary pause to true for oFactory=' .. oFactory.UnitId .. M27UnitInfo.GetUnitLifetimeCount(oFactory) .. '; GameTime=' .. GetGameTimeSeconds())
                                        end
                                        --Ctrl-K the factory instead if we have a number of other paused factories and its lower than our highest tech
                                        if EntityCategoryContains(M27UnitInfo.refCategoryLandFactory, oFactory.UnitId) and M27UnitInfo.GetUnitTechLevel(oFactory) < aiBrain[M27Overseer.refiOurHighestLandFactoryTech] and M27Conditions.HaveLowMass(aiBrain) and (aiBrain[refiFactoriesTemporarilyPaused] >= 2 or aiBrain:GetCurrentUnits(M27UnitInfo.refCategoryLandFactory * M27UnitInfo.ConvertTechLevelToCategory(aiBrain[M27Overseer.refiOurHighestLandFactoryTech])) >= 3) and GetGameTimeSeconds() - (aiBrain[refiTimeOfLastCtrlK] or -1000) >= 15 and (oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup] then
                                            KillIdleFactory(aiBrain, oFactory)
                                        else
                                            oFactory[refbFactoryTemporaryPauseActive] = true
                                            if (oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup] then
                                                aiBrain[refiFactoriesTemporarilyPaused] = aiBrain[refiFactoriesTemporarilyPaused] + 1
                                            end
                                            ForkThread(RemoveTemporaryFactoryPause, aiBrain, oFactory)
                                        end
                                    elseif EntityCategoryContains(M27UnitInfo.refCategoryNavalFactory, oFactory.UnitId) and EntityCategoryContains(M27UnitInfo.refCategoryNavalFactory, sUnitToBuild) then
                                        if bDebugMessages == true then LOG(sFunctionRef..': Will upgrade naval factory') end
                                        M27EconomyOverseer.UpgradeUnit(oFactory, false, false)
                                    else
                                        if bDebugMessages == true then
                                            LOG(sFunctionRef .. ': iFactory=' .. iFactory .. ': About to tell factory to build ' .. sUnitToBuild)
                                        end
                                        IssueBuildFactory({ oFactory }, sUnitToBuild, 1)
                                        oFactory[refFactoryIdleCount] = 0
                                        oFactory[refbUpdatedFactoryUnitTracker] = false
                                        oFactory[refiFactoryBuildCount] = (oFactory[refiFactoryBuildCount] or 0) + 1
                                        --Update factory rally point
                                        M27Logic.SetFactoryRallyPoint(oFactory)
                                    end
                                end
                            else
                                if bDebugMessages == true then
                                    LOG(sFunctionRef .. ': factory not idle')
                                end
                            end
                        else
                            if bDebugMessages == true then
                                LOG(sFunctionRef .. ': factory doesnt have a command queue')
                            end
                        end
                    else
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Factory isnt neither building nor upgrading')
                        end
                        if not (oFactory[refbUpdatedFactoryUnitTracker]) then
                            oFactory[refFactoryIdleCount] = 0
                            if oFactory:IsUnitState('Building') then
                                if oFactory.GetFocusUnit then
                                    oTrackerLastUnit = oFactory:GetFocusUnit()
                                    oFactory[refoLastUnitBuilt] = oTrackerLastUnit
                                    oTrackerLastUnit[M27PlatoonFormer.refbJustBuilt] = true
                                    oFactory[refbUpdatedFactoryUnitTracker] = true
                                end
                            end
                        end
                    end
                else
                    if bDebugMessages == true then
                        LOG(sFunctionRef .. ': Factory ' .. oFactory.UnitId .. M27UnitInfo.GetUnitLifetimeCount(oFactory) .. ' is paused or busy; will consider if shoudl ctrl-K if its a T1 factory; Current time=' .. GetGameTimeSeconds() .. '; oFactory[refbFactoryTemporaryPauseActive]=' .. tostring((oFactory[refbFactoryTemporaryPauseActive] or false)))
                        LOG('(cont): aiBrain[M27Overseer.refiOurHighestLandFactoryTech]=' .. (aiBrain[M27Overseer.refiOurHighestLandFactoryTech] or 'nil') .. '; Factory tech level=' .. M27UnitInfo.GetUnitTechLevel(oFactory) .. '; Is this a land factory=' .. tostring(EntityCategoryContains(M27UnitInfo.refCategoryLandFactory, oFactory.UnitId)))
                        LOG('cont): Have low mass=' .. tostring(M27Conditions.HaveLowMass(aiBrain)) .. '; Distance to our start=' .. M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]))
                    end
                    oFactory[refFactoryIdleCount] = 0
                    --Ctrl-K paused T1 factories that no longer need
                    if oFactory[refbFactoryTemporaryPauseActive] == true and aiBrain[M27Overseer.refiOurHighestLandFactoryTech] == 3 and M27UnitInfo.GetUnitTechLevel(oFactory) == 1 and EntityCategoryContains(M27UnitInfo.refCategoryLandFactory, oFactory.UnitId) and M27Conditions.HaveLowMass(aiBrain) and M27Utilities.GetDistanceBetweenPositions(oFactory:GetPosition(), M27MapInfo.PlayerStartPoints[aiBrain.M27StartPositionNumber]) <= 100 and GetGameTimeSeconds() - (aiBrain[refiTimeOfLastCtrlK] or -1000) >= 15 and (oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup] and (oFactory[M27Transport.refiAssignedPlateau] or aiBrain[refiOurBasePlateauGroup]) == aiBrain[M27MapInfo.refiOurBasePlateauGroup] then
                        if bDebugMessages == true then
                            LOG(sFunctionRef .. ': Will kill factory')
                        end
                        KillIdleFactory(aiBrain, oFactory)
                    end
                end
            end
        end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function FactoryOverseer(aiBrain)
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'FactoryOverseer'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)

    local iTicksToWait  = 1
    iMaxCyclesBeforeOverride = 28 / iTicksToWait --2.5s triggers often; 3s doesnt

    local iCurCycleCount = 0

    aiBrain[refiFactoriesTemporarilyPaused] = 0
    local tAllFactories = aiBrain:GetListOfUnits(M27UnitInfo.refCategoryAllFactories + M27UnitInfo.refCategoryQuantumGateway, true, true)

    while aiBrain do
        if bDebugMessages == true then LOG(sFunctionRef..': Checking if any idle factories') end
        ForkThread(FactoryMainOverseerLoop, aiBrain, tAllFactories, iTicksToWait)
        --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Pre wait tick')
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        iTicksToWait = _G.MyM27Scheduler:WaitTicks(1, 3, 0.1)
        --WaitTicks(iTicksToWait )
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
        iCurCycleCount = iCurCycleCount + iTicksToWait
        --Refresh list of factories every second
        if iCurCycleCount >= 10 then
            iCurCycleCount = 0
            tAllFactories = aiBrain:GetListOfUnits(M27UnitInfo.refCategoryAllFactories + M27UnitInfo.refCategoryQuantumGateway, true, true)
        end
        --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Post wait tick')
        if aiBrain:IsDefeated() or aiBrain.M27IsDefeated or M27Logic.iTimeOfLastBrainAllDefeated > 10 then break end
    end
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end

function SetPreferredUnitsByCategory(aiBrain)
    --If have multiple units that can build for a particular category, this will specify what to build
    --special cases where want to prioritise one unit over another where multiple of same type satisfy the category
    --NOTE: This gets ignored if we have coded in special cases where we want to pick the fastest or slowest unit
    aiBrain[reftBlueprintPriorityOverride] = {}
        --T1
    aiBrain[reftBlueprintPriorityOverride]['ual0201'] = 1 --Aurora (instead of LAB)
    aiBrain[reftBlueprintPriorityOverride]['url0107'] = 1 --Mantis (instead of LAB)
    aiBrain[reftBlueprintPriorityOverride]['uel0201'] = 1 --Striker (instead of mechmarine)
    aiBrain[reftBlueprintPriorityOverride]['xsl0201'] = 1 --Thaam (instead of combat scout)
        --T2
    aiBrain[reftBlueprintPriorityOverride]['uel0202'] = 1 --Pillar (instead of mongoose or riptide)
    aiBrain[reftBlueprintPriorityOverride]['xsl0202'] = 1 --Ilshavoh (instead of hover tank)
    aiBrain[reftBlueprintPriorityOverride]['url0202'] = 1 --Rhino (instead of hover tank)
    aiBrain[reftBlueprintPriorityOverride]['ual0202'] = 1 --Obsidian (instead of blaze)
        --T3
    aiBrain[reftBlueprintPriorityOverride]['uel0303'] = 1 --Titan (instead of Percy)
    aiBrain[reftBlueprintPriorityOverride]['ual0303'] = 1 --Harby (instead of sniper bot)
    --aiBrain[reftBlueprintPriorityOverride]['ual0304'] = 1 --Mobile t3 arti instead of shield disrupter
    aiBrain[reftBlueprintPriorityOverride]['url0303'] = 1 --Loyalist (instead of Brick)
    --aiBrain[reftBlueprintPriorityOverride]['xrl0305'] = 1 --Brick
    aiBrain[reftBlueprintPriorityOverride]['xsl0303'] = 1 --Siege tank (instead of sniper bot)
    aiBrain[reftBlueprintPriorityOverride]['xsl0301'] = 1 --Seraphim basic SACU (instead of preset)

        --Engineers
    aiBrain[reftBlueprintPriorityOverride]['uel0208'] = 1 --T2 Engi (instead of sparky)

end

function NovaxProductionCheck(oNovaxCentre)
    --Call via forkthread when starting construction of a novax, to make sure we pick up when the satellite is already
    local bDebugMessages = false if M27Utilities.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'NovaxProductionCheck'
    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    if bDebugMessages == true then LOG(sFunctionRef..': Start of code for centre='..oNovaxCentre.UnitId..M27UnitInfo.GetUnitLifetimeCount(oNovaxCentre)) end

    local iTicksToWait = 10
    while M27UnitInfo.IsUnitValid(oNovaxCentre) do
        if oNovaxCentre:GetFractionComplete() >= 1 then
            iTicksToWait = 1
            if oNovaxCentre.GetFocusUnit then
                oNovaxCentre[refoLastUnitBuilt] = oNovaxCentre:GetFocusUnit()
                if oNovaxCentre[refoLastUnitBuilt] then
                    break
                end
            end
        end
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        WaitTicks(iTicksToWait)
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    end
    if bDebugMessages == true then LOG(sFunctionRef..': Novax centre is building a unit='..oNovaxCentre[refoLastUnitBuilt].UnitId..M27UnitInfo.GetUnitLifetimeCount(oNovaxCentre[refoLastUnitBuilt])) end
    while M27UnitInfo.IsUnitValid(oNovaxCentre[refoLastUnitBuilt]) do
        iTicksToWait = 1
        if oNovaxCentre[refoLastUnitBuilt]:GetFractionComplete() == 1 then
            if bDebugMessages == true then LOG(sFunctionRef..': Sending the satellite to be allocated to a platoon and to start the main novax satellite logic') end
            M27PlatoonFormer.AllocateNewUnitToPlatoonFromFactory(oNovaxCentre[refoLastUnitBuilt], oNovaxCentre)
            break
        end
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
        WaitTicks(iTicksToWait)
        M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerStart)
    end

    M27Utilities.FunctionProfiler(sFunctionRef, M27Utilities.refProfilerEnd)
end