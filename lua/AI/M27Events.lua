---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 08/10/2021 13:05
---

local M27UnitInfo = import('/mods/M27AI/lua/AI/M27UnitInfo.lua')
local M27EngineerOverseer = import('/mods/M27AI/lua/AI/M27EngineerOverseer.lua')
local M27AirOverseer = import('/mods/M27AI/lua/AI/M27AirOverseer.lua')
local M27Utilities = import('/mods/M27AI/lua/M27Utilities.lua')
local M27Overseer = import('/mods/M27AI/lua/AI/M27Overseer.lua')

local refCategoryEngineer = M27UnitInfo.refCategoryEngineer
local refCategoryAirScout = M27UnitInfo.refCategoryAirScout

function OnKilled(self, instigator, type, overkillRatio)
    --NOTE: Called by any unit of any player being killed; also note that OnUnitDeath triggers as well as this
    --i.e. this shoudl be used for where only want to get an event where the unit was killed by something
    --Is the unit owned by M27AI?
    if self.GetAIBrain then
        local aiBrain = self:GetAIBrain()
        if aiBrain.M27AI then
            --were we killed by something?
            local oKillerUnit
            if instigator then
                if IsUnit(instigator) then
                    oKillerUnit = instigator
                elseif IsProjectile(instigator) or IsCollisionBeam(instigator) then
                    oKillerUnit = instigator.unit
                end
                if oKillerUnit and oKillerUnit.GetAIBrain then
                    M27AirOverseer.CheckForUnseenKiller(aiBrain, self, oKillerUnit)
                end
            end
        end
    end
end

function OnUnitDeath(oUnit)
    --NOTE: This is called by the death of any unit of any player, so careful with what commands are given
    local bDebugMessages = false
    local sFunctionRef = 'OnUnitDeath'
    if bDebugMessages == true then LOG(sFunctionRef..'Hook successful') end
    --Is it an ACU?
    if M27Utilities.IsACU(oUnit) then
        M27Overseer.iACUDeathCount = M27Overseer.iACUDeathCount + 1
        LOG(sFunctionRef..' ACU kill detected; total kills='..M27Overseer.iACUDeathCount)
    else
        --Is the unit owned by M27AI?
        if oUnit.GetAIBrain then
            local aiBrain = oUnit:GetAIBrain()
            if aiBrain.M27AI then
                local sUnitBP = oUnit:GetUnitId()
                if EntityCategoryContains(refCategoryEngineer, sUnitBP) then
                    --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Pre clear action')
                    M27EngineerOverseer.ClearEngineerActionTrackers(aiBrain, oUnit, true)
                    --M27EngineerOverseer.TEMPTEST(aiBrain, sFunctionRef..'Post clear action')
                elseif EntityCategoryContains(refCategoryAirScout, sUnitBP) then
                    M27AirOverseer.OnScoutDeath(aiBrain, oUnit)
                elseif EntityCategoryContains(M27UnitInfo.refCategoryAirAA, sUnitBP) then
                    M27AirOverseer.OnAirAADeath(oUnit)
                elseif EntityCategoryContains(M27UnitInfo.refCategoryBomber, sUnitBP) or EntityCategoryContains(M27UnitInfo.refCategoryTorpBomber, sUnitBP) then
                    M27AirOverseer.OnBomberDeath(aiBrain, oUnit)
                end
            end
        end
    end
end

function OnWorkEnd(self, work)
    local bDebugMessages = false
    local sFunctionRef = 'OnWorkEnd'
    if bDebugMessages == true then LOG(sFunctionRef..': Hook successful') end
end

function OnDamaged(self, instigator)
    --Has our ACU been hit by an enemy we have no sight of?
    if self.GetUnitId and EntityCategoryContains(categories.COMMAND, self:GetUnitId()) then
        if self.GetAIBrain and not(self.Dead) then
            local aiBrain = self:GetAIBrain()
            if aiBrain.M27AI and self == M27Utilities.GetACU(aiBrain) then
                local bDebugMessages = false
                local sFunctionRef = 'OnDamage'
                if bDebugMessages == true then LOG(sFunctionRef..': ACU has just taken damage, checking if can see the unit that damaged it') end
                --Do we have a unit that damaged us?
                local oUnitCausingDamage
                if instigator then
                    if IsUnit(instigator) then
                        oUnitCausingDamage = instigator
                    elseif IsProjectile(instigator) or IsCollisionBeam(instigator) then
                        oUnitCausingDamage = instigator.unit
                    end
                    if not(oUnitCausingDamage) and bDebugMessages == true then LOG(sFunctionRef..': Dont ahve a valid unit as instigator') end

                    if oUnitCausingDamage and oUnitCausingDamage.GetAIBrain then
                        --Can we see the unit?
                        if bDebugMessages == true then LOG(sFunctionRef..': Checking if can see the unit that dealt us damage') end
                        if not(M27Utilities.CanSeeUnit(aiBrain, oUnitCausingDamage, true)) then
                            if bDebugMessages == true then LOG(sFunctionRef..': cant see unit that caused damage, will ask for an air scout and flag the ACU has taken damage recently') end
                            self[M27Overseer.refiACULastTakenUnseenDamage] = GetGameTimeSeconds()
                            self[M27Overseer.refoUnitDealingUnseenDamage] = oUnitCausingDamage
                            --Flag that we want the location (and +- 2 segments around it) the shot came from scouted asap
                            M27AirOverseer.MakeSegmentsAroundPositionHighPriority(aiBrain, oUnitCausingDamage:GetPosition(), 2)
                        end
                    end
                end
            end
        end
    end
end